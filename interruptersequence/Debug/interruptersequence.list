
interruptersequence.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ed8  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080060cc  080060cc  000160cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800614c  0800614c  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  0800614c  0800614c  0001614c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006154  08006154  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006154  08006154  00016154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006158  08006158  00016158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800615c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000470  20000014  08006170  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000484  08006170  00020484  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020f7e  00000000  00000000  0002004a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037ff  00000000  00000000  00040fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001aa0  00000000  00000000  000447c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001958  00000000  00000000  00046268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e712  00000000  00000000  00047bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001da78  00000000  00000000  000762d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00132059  00000000  00000000  00093d4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001c5da3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000073f4  00000000  00000000  001c5df4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	e000      	b.n	8000206 <__do_global_dtors_aux+0x12>
 8000204:	bf00      	nop
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	20000014 	.word	0x20000014
 8000210:	00000000 	.word	0x00000000
 8000214:	080060b4 	.word	0x080060b4

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	e000      	b.n	8000226 <frame_dummy+0xe>
 8000224:	bf00      	nop
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000018 	.word	0x20000018
 8000230:	080060b4 	.word	0x080060b4

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b982 	b.w	8000550 <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000268:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800026a:	4604      	mov	r4, r0
 800026c:	460f      	mov	r7, r1
 800026e:	2b00      	cmp	r3, #0
 8000270:	d148      	bne.n	8000304 <__udivmoddi4+0xa0>
 8000272:	428a      	cmp	r2, r1
 8000274:	4694      	mov	ip, r2
 8000276:	d961      	bls.n	800033c <__udivmoddi4+0xd8>
 8000278:	fab2 f382 	clz	r3, r2
 800027c:	b143      	cbz	r3, 8000290 <__udivmoddi4+0x2c>
 800027e:	f1c3 0120 	rsb	r1, r3, #32
 8000282:	409f      	lsls	r7, r3
 8000284:	fa02 fc03 	lsl.w	ip, r2, r3
 8000288:	409c      	lsls	r4, r3
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	430f      	orrs	r7, r1
 8000290:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000294:	fa1f fe8c 	uxth.w	lr, ip
 8000298:	0c22      	lsrs	r2, r4, #16
 800029a:	fbb7 f6f1 	udiv	r6, r7, r1
 800029e:	fb01 7716 	mls	r7, r1, r6, r7
 80002a2:	fb06 f00e 	mul.w	r0, r6, lr
 80002a6:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002aa:	4290      	cmp	r0, r2
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0x5c>
 80002ae:	eb1c 0202 	adds.w	r2, ip, r2
 80002b2:	f106 37ff 	add.w	r7, r6, #4294967295
 80002b6:	d202      	bcs.n	80002be <__udivmoddi4+0x5a>
 80002b8:	4290      	cmp	r0, r2
 80002ba:	f200 8137 	bhi.w	800052c <__udivmoddi4+0x2c8>
 80002be:	463e      	mov	r6, r7
 80002c0:	1a12      	subs	r2, r2, r0
 80002c2:	b2a4      	uxth	r4, r4
 80002c4:	fbb2 f0f1 	udiv	r0, r2, r1
 80002c8:	fb01 2210 	mls	r2, r1, r0, r2
 80002cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80002d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002d4:	45a6      	cmp	lr, r4
 80002d6:	d908      	bls.n	80002ea <__udivmoddi4+0x86>
 80002d8:	eb1c 0404 	adds.w	r4, ip, r4
 80002dc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e0:	d202      	bcs.n	80002e8 <__udivmoddi4+0x84>
 80002e2:	45a6      	cmp	lr, r4
 80002e4:	f200 811c 	bhi.w	8000520 <__udivmoddi4+0x2bc>
 80002e8:	4610      	mov	r0, r2
 80002ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ee:	eba4 040e 	sub.w	r4, r4, lr
 80002f2:	2600      	movs	r6, #0
 80002f4:	b11d      	cbz	r5, 80002fe <__udivmoddi4+0x9a>
 80002f6:	40dc      	lsrs	r4, r3
 80002f8:	2300      	movs	r3, #0
 80002fa:	e9c5 4300 	strd	r4, r3, [r5]
 80002fe:	4631      	mov	r1, r6
 8000300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000304:	428b      	cmp	r3, r1
 8000306:	d909      	bls.n	800031c <__udivmoddi4+0xb8>
 8000308:	2d00      	cmp	r5, #0
 800030a:	f000 80fd 	beq.w	8000508 <__udivmoddi4+0x2a4>
 800030e:	2600      	movs	r6, #0
 8000310:	e9c5 0100 	strd	r0, r1, [r5]
 8000314:	4630      	mov	r0, r6
 8000316:	4631      	mov	r1, r6
 8000318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800031c:	fab3 f683 	clz	r6, r3
 8000320:	2e00      	cmp	r6, #0
 8000322:	d14b      	bne.n	80003bc <__udivmoddi4+0x158>
 8000324:	428b      	cmp	r3, r1
 8000326:	f0c0 80f2 	bcc.w	800050e <__udivmoddi4+0x2aa>
 800032a:	4282      	cmp	r2, r0
 800032c:	f240 80ef 	bls.w	800050e <__udivmoddi4+0x2aa>
 8000330:	4630      	mov	r0, r6
 8000332:	2d00      	cmp	r5, #0
 8000334:	d0e3      	beq.n	80002fe <__udivmoddi4+0x9a>
 8000336:	e9c5 4700 	strd	r4, r7, [r5]
 800033a:	e7e0      	b.n	80002fe <__udivmoddi4+0x9a>
 800033c:	b902      	cbnz	r2, 8000340 <__udivmoddi4+0xdc>
 800033e:	deff      	udf	#255	; 0xff
 8000340:	fab2 f382 	clz	r3, r2
 8000344:	2b00      	cmp	r3, #0
 8000346:	f040 809d 	bne.w	8000484 <__udivmoddi4+0x220>
 800034a:	1a89      	subs	r1, r1, r2
 800034c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000350:	b297      	uxth	r7, r2
 8000352:	2601      	movs	r6, #1
 8000354:	0c20      	lsrs	r0, r4, #16
 8000356:	fbb1 f2fe 	udiv	r2, r1, lr
 800035a:	fb0e 1112 	mls	r1, lr, r2, r1
 800035e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000362:	fb07 f002 	mul.w	r0, r7, r2
 8000366:	4288      	cmp	r0, r1
 8000368:	d90f      	bls.n	800038a <__udivmoddi4+0x126>
 800036a:	eb1c 0101 	adds.w	r1, ip, r1
 800036e:	f102 38ff 	add.w	r8, r2, #4294967295
 8000372:	bf2c      	ite	cs
 8000374:	f04f 0901 	movcs.w	r9, #1
 8000378:	f04f 0900 	movcc.w	r9, #0
 800037c:	4288      	cmp	r0, r1
 800037e:	d903      	bls.n	8000388 <__udivmoddi4+0x124>
 8000380:	f1b9 0f00 	cmp.w	r9, #0
 8000384:	f000 80cf 	beq.w	8000526 <__udivmoddi4+0x2c2>
 8000388:	4642      	mov	r2, r8
 800038a:	1a09      	subs	r1, r1, r0
 800038c:	b2a4      	uxth	r4, r4
 800038e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000392:	fb0e 1110 	mls	r1, lr, r0, r1
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800039e:	42a7      	cmp	r7, r4
 80003a0:	d908      	bls.n	80003b4 <__udivmoddi4+0x150>
 80003a2:	eb1c 0404 	adds.w	r4, ip, r4
 80003a6:	f100 31ff 	add.w	r1, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14e>
 80003ac:	42a7      	cmp	r7, r4
 80003ae:	f200 80b4 	bhi.w	800051a <__udivmoddi4+0x2b6>
 80003b2:	4608      	mov	r0, r1
 80003b4:	1be4      	subs	r4, r4, r7
 80003b6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003ba:	e79b      	b.n	80002f4 <__udivmoddi4+0x90>
 80003bc:	f1c6 0720 	rsb	r7, r6, #32
 80003c0:	40b3      	lsls	r3, r6
 80003c2:	fa01 f406 	lsl.w	r4, r1, r6
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	40f9      	lsrs	r1, r7
 80003cc:	40b2      	lsls	r2, r6
 80003ce:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d2:	fa20 f307 	lsr.w	r3, r0, r7
 80003d6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003da:	431c      	orrs	r4, r3
 80003dc:	fa1f fe8c 	uxth.w	lr, ip
 80003e0:	fa00 f306 	lsl.w	r3, r0, r6
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ea:	fb09 1118 	mls	r1, r9, r8, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb08 f00e 	mul.w	r0, r8, lr
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d90f      	bls.n	800041a <__udivmoddi4+0x1b6>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f108 3aff 	add.w	sl, r8, #4294967295
 8000402:	bf2c      	ite	cs
 8000404:	f04f 0b01 	movcs.w	fp, #1
 8000408:	f04f 0b00 	movcc.w	fp, #0
 800040c:	4288      	cmp	r0, r1
 800040e:	d903      	bls.n	8000418 <__udivmoddi4+0x1b4>
 8000410:	f1bb 0f00 	cmp.w	fp, #0
 8000414:	f000 808d 	beq.w	8000532 <__udivmoddi4+0x2ce>
 8000418:	46d0      	mov	r8, sl
 800041a:	1a09      	subs	r1, r1, r0
 800041c:	b2a4      	uxth	r4, r4
 800041e:	fbb1 f0f9 	udiv	r0, r1, r9
 8000422:	fb09 1110 	mls	r1, r9, r0, r1
 8000426:	fb00 fe0e 	mul.w	lr, r0, lr
 800042a:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800042e:	458e      	cmp	lr, r1
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x1de>
 8000432:	eb1c 0101 	adds.w	r1, ip, r1
 8000436:	f100 34ff 	add.w	r4, r0, #4294967295
 800043a:	d201      	bcs.n	8000440 <__udivmoddi4+0x1dc>
 800043c:	458e      	cmp	lr, r1
 800043e:	d87f      	bhi.n	8000540 <__udivmoddi4+0x2dc>
 8000440:	4620      	mov	r0, r4
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	eba1 010e 	sub.w	r1, r1, lr
 800044a:	fba0 9802 	umull	r9, r8, r0, r2
 800044e:	4541      	cmp	r1, r8
 8000450:	464c      	mov	r4, r9
 8000452:	46c6      	mov	lr, r8
 8000454:	d302      	bcc.n	800045c <__udivmoddi4+0x1f8>
 8000456:	d106      	bne.n	8000466 <__udivmoddi4+0x202>
 8000458:	454b      	cmp	r3, r9
 800045a:	d204      	bcs.n	8000466 <__udivmoddi4+0x202>
 800045c:	3801      	subs	r0, #1
 800045e:	ebb9 0402 	subs.w	r4, r9, r2
 8000462:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000466:	2d00      	cmp	r5, #0
 8000468:	d070      	beq.n	800054c <__udivmoddi4+0x2e8>
 800046a:	1b1a      	subs	r2, r3, r4
 800046c:	eb61 010e 	sbc.w	r1, r1, lr
 8000470:	fa22 f306 	lsr.w	r3, r2, r6
 8000474:	fa01 f707 	lsl.w	r7, r1, r7
 8000478:	40f1      	lsrs	r1, r6
 800047a:	2600      	movs	r6, #0
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	e73c      	b.n	80002fe <__udivmoddi4+0x9a>
 8000484:	fa02 fc03 	lsl.w	ip, r2, r3
 8000488:	f1c3 0020 	rsb	r0, r3, #32
 800048c:	fa01 f203 	lsl.w	r2, r1, r3
 8000490:	fa21 f600 	lsr.w	r6, r1, r0
 8000494:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000498:	fa24 f100 	lsr.w	r1, r4, r0
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	409c      	lsls	r4, r3
 80004a2:	4311      	orrs	r1, r2
 80004a4:	fbb6 f0fe 	udiv	r0, r6, lr
 80004a8:	0c0a      	lsrs	r2, r1, #16
 80004aa:	fb0e 6610 	mls	r6, lr, r0, r6
 80004ae:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80004b2:	fb00 f607 	mul.w	r6, r0, r7
 80004b6:	4296      	cmp	r6, r2
 80004b8:	d90e      	bls.n	80004d8 <__udivmoddi4+0x274>
 80004ba:	eb1c 0202 	adds.w	r2, ip, r2
 80004be:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c2:	bf2c      	ite	cs
 80004c4:	f04f 0901 	movcs.w	r9, #1
 80004c8:	f04f 0900 	movcc.w	r9, #0
 80004cc:	4296      	cmp	r6, r2
 80004ce:	d902      	bls.n	80004d6 <__udivmoddi4+0x272>
 80004d0:	f1b9 0f00 	cmp.w	r9, #0
 80004d4:	d031      	beq.n	800053a <__udivmoddi4+0x2d6>
 80004d6:	4640      	mov	r0, r8
 80004d8:	1b92      	subs	r2, r2, r6
 80004da:	b289      	uxth	r1, r1
 80004dc:	fbb2 f6fe 	udiv	r6, r2, lr
 80004e0:	fb0e 2216 	mls	r2, lr, r6, r2
 80004e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80004e8:	fb06 f207 	mul.w	r2, r6, r7
 80004ec:	428a      	cmp	r2, r1
 80004ee:	d907      	bls.n	8000500 <__udivmoddi4+0x29c>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f8:	d201      	bcs.n	80004fe <__udivmoddi4+0x29a>
 80004fa:	428a      	cmp	r2, r1
 80004fc:	d823      	bhi.n	8000546 <__udivmoddi4+0x2e2>
 80004fe:	4646      	mov	r6, r8
 8000500:	1a89      	subs	r1, r1, r2
 8000502:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000506:	e725      	b.n	8000354 <__udivmoddi4+0xf0>
 8000508:	462e      	mov	r6, r5
 800050a:	4628      	mov	r0, r5
 800050c:	e6f7      	b.n	80002fe <__udivmoddi4+0x9a>
 800050e:	1a84      	subs	r4, r0, r2
 8000510:	eb61 0303 	sbc.w	r3, r1, r3
 8000514:	2001      	movs	r0, #1
 8000516:	461f      	mov	r7, r3
 8000518:	e70b      	b.n	8000332 <__udivmoddi4+0xce>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e749      	b.n	80003b4 <__udivmoddi4+0x150>
 8000520:	4464      	add	r4, ip
 8000522:	3802      	subs	r0, #2
 8000524:	e6e1      	b.n	80002ea <__udivmoddi4+0x86>
 8000526:	3a02      	subs	r2, #2
 8000528:	4461      	add	r1, ip
 800052a:	e72e      	b.n	800038a <__udivmoddi4+0x126>
 800052c:	3e02      	subs	r6, #2
 800052e:	4462      	add	r2, ip
 8000530:	e6c6      	b.n	80002c0 <__udivmoddi4+0x5c>
 8000532:	f1a8 0802 	sub.w	r8, r8, #2
 8000536:	4461      	add	r1, ip
 8000538:	e76f      	b.n	800041a <__udivmoddi4+0x1b6>
 800053a:	3802      	subs	r0, #2
 800053c:	4462      	add	r2, ip
 800053e:	e7cb      	b.n	80004d8 <__udivmoddi4+0x274>
 8000540:	3802      	subs	r0, #2
 8000542:	4461      	add	r1, ip
 8000544:	e77d      	b.n	8000442 <__udivmoddi4+0x1de>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	e7d9      	b.n	8000500 <__udivmoddi4+0x29c>
 800054c:	462e      	mov	r6, r5
 800054e:	e6d6      	b.n	80002fe <__udivmoddi4+0x9a>

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000554:	b480      	push	{r7}
 8000556:	b085      	sub	sp, #20
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800055c:	4b08      	ldr	r3, [pc, #32]	; (8000580 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800055e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000560:	4907      	ldr	r1, [pc, #28]	; (8000580 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4313      	orrs	r3, r2
 8000566:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000568:	4b05      	ldr	r3, [pc, #20]	; (8000580 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800056a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	4013      	ands	r3, r2
 8000570:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000572:	68fb      	ldr	r3, [r7, #12]
}
 8000574:	bf00      	nop
 8000576:	3714      	adds	r7, #20
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr
 8000580:	40021000 	.word	0x40021000

08000584 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <LL_APB1_GRP2_EnableClock+0x2c>)
 800058e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000590:	4907      	ldr	r1, [pc, #28]	; (80005b0 <LL_APB1_GRP2_EnableClock+0x2c>)
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4313      	orrs	r3, r2
 8000596:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000598:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <LL_APB1_GRP2_EnableClock+0x2c>)
 800059a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	4013      	ands	r3, r2
 80005a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005a2:	68fb      	ldr	r3, [r7, #12]
}
 80005a4:	bf00      	nop
 80005a6:	3714      	adds	r7, #20
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr
 80005b0:	40021000 	.word	0x40021000

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b8:	f000 fe21 	bl	80011fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005bc:	f000 f880 	bl	80006c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c0:	f000 fa9a 	bl	8000af8 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005c4:	f000 f8de 	bl	8000784 <MX_ADC1_Init>
  MX_LPUART1_UART_Init();
 80005c8:	f000 f952 	bl	8000870 <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 80005cc:	f000 f99e 	bl	800090c <MX_RTC_Init>
  MX_UCPD1_Init();
 80005d0:	f000 fa34 	bl	8000a3c <MX_UCPD1_Init>
  MX_USB_PCD_Init();
 80005d4:	f000 fa68 	bl	8000aa8 <MX_USB_PCD_Init>
  MX_TIM2_Init();
 80005d8:	f000 f9e2 	bl	80009a0 <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005dc:	e7fe      	b.n	80005dc <main+0x28>
	...

080005e0 <HAL_TIM_PeriodElapsedCallback>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b086      	sub	sp, #24
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	//pattern shifter for A_serial
	uint8_t pattern = Apatterns[AcurrentPatternIndex]; // pattern allows us to track bit by bit movement
 80005e8:	4b30      	ldr	r3, [pc, #192]	; (80006ac <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	461a      	mov	r2, r3
 80005ee:	4b30      	ldr	r3, [pc, #192]	; (80006b0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80005f0:	5c9b      	ldrb	r3, [r3, r2]
 80005f2:	73fb      	strb	r3, [r7, #15]
	    for (int i = 0; i < 4; i++) {
 80005f4:	2300      	movs	r3, #0
 80005f6:	617b      	str	r3, [r7, #20]
 80005f8:	e015      	b.n	8000626 <HAL_TIM_PeriodElapsedCallback+0x46>
	        uint8_t bit = (pattern >> (3 - i)) & 0x01; // Get the i-th bit from the pattern
 80005fa:	7bfa      	ldrb	r2, [r7, #15]
 80005fc:	697b      	ldr	r3, [r7, #20]
 80005fe:	f1c3 0303 	rsb	r3, r3, #3
 8000602:	fa42 f303 	asr.w	r3, r2, r3
 8000606:	b2db      	uxtb	r3, r3
 8000608:	f003 0301 	and.w	r3, r3, #1
 800060c:	733b      	strb	r3, [r7, #12]
	        HAL_GPIO_WritePin(A_serial_GPIO_Port, A_serial_Pin, bit); // Set PA5 to the current bit
 800060e:	7b3b      	ldrb	r3, [r7, #12]
 8000610:	461a      	mov	r2, r3
 8000612:	2108      	movs	r1, #8
 8000614:	4827      	ldr	r0, [pc, #156]	; (80006b4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000616:	f002 f8bd 	bl	8002794 <HAL_GPIO_WritePin>

	        // Delay (or use another method) to simulate clocking in the data
	        HAL_Delay(1);
 800061a:	2001      	movs	r0, #1
 800061c:	f000 fe66 	bl	80012ec <HAL_Delay>
	    for (int i = 0; i < 4; i++) {
 8000620:	697b      	ldr	r3, [r7, #20]
 8000622:	3301      	adds	r3, #1
 8000624:	617b      	str	r3, [r7, #20]
 8000626:	697b      	ldr	r3, [r7, #20]
 8000628:	2b03      	cmp	r3, #3
 800062a:	dde6      	ble.n	80005fa <HAL_TIM_PeriodElapsedCallback+0x1a>
	    }

	    // Increment pattern index, loop back to 0 if end is reached
	    AcurrentPatternIndex++;
 800062c:	4b1f      	ldr	r3, [pc, #124]	; (80006ac <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	3301      	adds	r3, #1
 8000632:	b2da      	uxtb	r2, r3
 8000634:	4b1d      	ldr	r3, [pc, #116]	; (80006ac <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000636:	701a      	strb	r2, [r3, #0]
	    if (AcurrentPatternIndex >= sizeof(Apatterns) / sizeof(Apatterns[0])) {
 8000638:	4b1c      	ldr	r3, [pc, #112]	; (80006ac <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b03      	cmp	r3, #3
 800063e:	d902      	bls.n	8000646 <HAL_TIM_PeriodElapsedCallback+0x66>
	        AcurrentPatternIndex = 0;
 8000640:	4b1a      	ldr	r3, [pc, #104]	; (80006ac <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000642:	2200      	movs	r2, #0
 8000644:	701a      	strb	r2, [r3, #0]
	    }
	//pattern shifter for B_serial
	uint8_t bpattern = Bpatterns[BcurrentPatternIndex];
 8000646:	4b1c      	ldr	r3, [pc, #112]	; (80006b8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	461a      	mov	r2, r3
 800064c:	4b1b      	ldr	r3, [pc, #108]	; (80006bc <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800064e:	5c9b      	ldrb	r3, [r3, r2]
 8000650:	73bb      	strb	r3, [r7, #14]
	for (int i = 0; i < 4; i++) {
 8000652:	2300      	movs	r3, #0
 8000654:	613b      	str	r3, [r7, #16]
 8000656:	e015      	b.n	8000684 <HAL_TIM_PeriodElapsedCallback+0xa4>
		        uint8_t bit = (bpattern >> (3 - i)) & 0x01; // Get the i-th bit from the pattern
 8000658:	7bba      	ldrb	r2, [r7, #14]
 800065a:	693b      	ldr	r3, [r7, #16]
 800065c:	f1c3 0303 	rsb	r3, r3, #3
 8000660:	fa42 f303 	asr.w	r3, r2, r3
 8000664:	b2db      	uxtb	r3, r3
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	737b      	strb	r3, [r7, #13]
		        HAL_GPIO_WritePin(B_serial_GPIO_Port, B_serial_Pin, bit); // Set PA5 to the current bit
 800066c:	7b7b      	ldrb	r3, [r7, #13]
 800066e:	461a      	mov	r2, r3
 8000670:	2120      	movs	r1, #32
 8000672:	4810      	ldr	r0, [pc, #64]	; (80006b4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000674:	f002 f88e 	bl	8002794 <HAL_GPIO_WritePin>

		        // Delay (or use another method) to simulate clocking in the data
		        HAL_Delay(1);
 8000678:	2001      	movs	r0, #1
 800067a:	f000 fe37 	bl	80012ec <HAL_Delay>
	for (int i = 0; i < 4; i++) {
 800067e:	693b      	ldr	r3, [r7, #16]
 8000680:	3301      	adds	r3, #1
 8000682:	613b      	str	r3, [r7, #16]
 8000684:	693b      	ldr	r3, [r7, #16]
 8000686:	2b03      	cmp	r3, #3
 8000688:	dde6      	ble.n	8000658 <HAL_TIM_PeriodElapsedCallback+0x78>
		    }

		    // Increment pattern index, loop back to 0 if end is reached
		    BcurrentPatternIndex++;
 800068a:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	3301      	adds	r3, #1
 8000690:	b2da      	uxtb	r2, r3
 8000692:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000694:	701a      	strb	r2, [r3, #0]
		    if (BcurrentPatternIndex >= sizeof(Bpatterns) / sizeof(Bpatterns[0])) {
 8000696:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	2b03      	cmp	r3, #3
 800069c:	d902      	bls.n	80006a4 <HAL_TIM_PeriodElapsedCallback+0xc4>
		        BcurrentPatternIndex = 0;
 800069e:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	701a      	strb	r2, [r3, #0]
		    }

}
 80006a4:	bf00      	nop
 80006a6:	3718      	adds	r7, #24
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	2000047c 	.word	0x2000047c
 80006b0:	20000000 	.word	0x20000000
 80006b4:	42021400 	.word	0x42021400
 80006b8:	2000047d 	.word	0x2000047d
 80006bc:	20000004 	.word	0x20000004

080006c0 <SystemClock_Config>:

void SystemClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b098      	sub	sp, #96	; 0x60
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	f107 0318 	add.w	r3, r7, #24
 80006ca:	2248      	movs	r2, #72	; 0x48
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f005 fce8 	bl	80060a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d4:	1d3b      	adds	r3, r7, #4
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
 80006e0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 80006e2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80006e6:	f002 f983 	bl	80029f0 <HAL_PWREx_ControlVoltageScaling>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006f0:	f000 fac2 	bl	8000c78 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006f4:	f002 f95e 	bl	80029b4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006f8:	4b21      	ldr	r3, [pc, #132]	; (8000780 <SystemClock_Config+0xc0>)
 80006fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80006fe:	4a20      	ldr	r2, [pc, #128]	; (8000780 <SystemClock_Config+0xc0>)
 8000700:	f023 0318 	bic.w	r3, r3, #24
 8000704:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSE
 8000708:	2334      	movs	r3, #52	; 0x34
 800070a:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800070c:	2381      	movs	r3, #129	; 0x81
 800070e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000710:	2301      	movs	r3, #1
 8000712:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000714:	2301      	movs	r3, #1
 8000716:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000718:	2300      	movs	r3, #0
 800071a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800071c:	2360      	movs	r3, #96	; 0x60
 800071e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000720:	2302      	movs	r3, #2
 8000722:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000724:	2301      	movs	r3, #1
 8000726:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000728:	2301      	movs	r3, #1
 800072a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 16;
 800072c:	2310      	movs	r3, #16
 800072e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000730:	2307      	movs	r3, #7
 8000732:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000734:	2302      	movs	r3, #2
 8000736:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000738:	2302      	movs	r3, #2
 800073a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073c:	f107 0318 	add.w	r3, r7, #24
 8000740:	4618      	mov	r0, r3
 8000742:	f002 f9e5 	bl	8002b10 <HAL_RCC_OscConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800074c:	f000 fa94 	bl	8000c78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000750:	230f      	movs	r3, #15
 8000752:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000754:	2303      	movs	r3, #3
 8000756:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000758:	2380      	movs	r3, #128	; 0x80
 800075a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800075c:	2300      	movs	r3, #0
 800075e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	2101      	movs	r1, #1
 8000768:	4618      	mov	r0, r3
 800076a:	f002 fea7 	bl	80034bc <HAL_RCC_ClockConfig>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000774:	f000 fa80 	bl	8000c78 <Error_Handler>
  }
}
 8000778:	bf00      	nop
 800077a:	3760      	adds	r7, #96	; 0x60
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40021000 	.word	0x40021000

08000784 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08a      	sub	sp, #40	; 0x28
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800078a:	f107 031c 	add.w	r3, r7, #28
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000796:	1d3b      	adds	r3, r7, #4
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]
 80007a4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007a6:	4b2f      	ldr	r3, [pc, #188]	; (8000864 <MX_ADC1_Init+0xe0>)
 80007a8:	4a2f      	ldr	r2, [pc, #188]	; (8000868 <MX_ADC1_Init+0xe4>)
 80007aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007ac:	4b2d      	ldr	r3, [pc, #180]	; (8000864 <MX_ADC1_Init+0xe0>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007b2:	4b2c      	ldr	r3, [pc, #176]	; (8000864 <MX_ADC1_Init+0xe0>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007b8:	4b2a      	ldr	r3, [pc, #168]	; (8000864 <MX_ADC1_Init+0xe0>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007be:	4b29      	ldr	r3, [pc, #164]	; (8000864 <MX_ADC1_Init+0xe0>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007c4:	4b27      	ldr	r3, [pc, #156]	; (8000864 <MX_ADC1_Init+0xe0>)
 80007c6:	2204      	movs	r2, #4
 80007c8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007ca:	4b26      	ldr	r3, [pc, #152]	; (8000864 <MX_ADC1_Init+0xe0>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007d0:	4b24      	ldr	r3, [pc, #144]	; (8000864 <MX_ADC1_Init+0xe0>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80007d6:	4b23      	ldr	r3, [pc, #140]	; (8000864 <MX_ADC1_Init+0xe0>)
 80007d8:	2201      	movs	r2, #1
 80007da:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007dc:	4b21      	ldr	r3, [pc, #132]	; (8000864 <MX_ADC1_Init+0xe0>)
 80007de:	2200      	movs	r2, #0
 80007e0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007e4:	4b1f      	ldr	r3, [pc, #124]	; (8000864 <MX_ADC1_Init+0xe0>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ea:	4b1e      	ldr	r3, [pc, #120]	; (8000864 <MX_ADC1_Init+0xe0>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007f0:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <MX_ADC1_Init+0xe0>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007f8:	4b1a      	ldr	r3, [pc, #104]	; (8000864 <MX_ADC1_Init+0xe0>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007fe:	4b19      	ldr	r3, [pc, #100]	; (8000864 <MX_ADC1_Init+0xe0>)
 8000800:	2200      	movs	r2, #0
 8000802:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000806:	4817      	ldr	r0, [pc, #92]	; (8000864 <MX_ADC1_Init+0xe0>)
 8000808:	f000 ff34 	bl	8001674 <HAL_ADC_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000812:	f000 fa31 	bl	8000c78 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000816:	2300      	movs	r3, #0
 8000818:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800081a:	f107 031c 	add.w	r3, r7, #28
 800081e:	4619      	mov	r1, r3
 8000820:	4810      	ldr	r0, [pc, #64]	; (8000864 <MX_ADC1_Init+0xe0>)
 8000822:	f001 fc83 	bl	800212c <HAL_ADCEx_MultiModeConfigChannel>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800082c:	f000 fa24 	bl	8000c78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000830:	4b0e      	ldr	r3, [pc, #56]	; (800086c <MX_ADC1_Init+0xe8>)
 8000832:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000834:	2306      	movs	r3, #6
 8000836:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000838:	2300      	movs	r3, #0
 800083a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800083c:	237f      	movs	r3, #127	; 0x7f
 800083e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000840:	2304      	movs	r3, #4
 8000842:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000844:	2300      	movs	r3, #0
 8000846:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	4619      	mov	r1, r3
 800084c:	4805      	ldr	r0, [pc, #20]	; (8000864 <MX_ADC1_Init+0xe0>)
 800084e:	f001 f85d 	bl	800190c <HAL_ADC_ConfigChannel>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000858:	f000 fa0e 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800085c:	bf00      	nop
 800085e:	3728      	adds	r7, #40	; 0x28
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	20000030 	.word	0x20000030
 8000868:	42028000 	.word	0x42028000
 800086c:	0c900008 	.word	0x0c900008

08000870 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000874:	4b22      	ldr	r3, [pc, #136]	; (8000900 <MX_LPUART1_UART_Init+0x90>)
 8000876:	4a23      	ldr	r2, [pc, #140]	; (8000904 <MX_LPUART1_UART_Init+0x94>)
 8000878:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800087a:	4b21      	ldr	r3, [pc, #132]	; (8000900 <MX_LPUART1_UART_Init+0x90>)
 800087c:	4a22      	ldr	r2, [pc, #136]	; (8000908 <MX_LPUART1_UART_Init+0x98>)
 800087e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000880:	4b1f      	ldr	r3, [pc, #124]	; (8000900 <MX_LPUART1_UART_Init+0x90>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000886:	4b1e      	ldr	r3, [pc, #120]	; (8000900 <MX_LPUART1_UART_Init+0x90>)
 8000888:	2200      	movs	r2, #0
 800088a:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800088c:	4b1c      	ldr	r3, [pc, #112]	; (8000900 <MX_LPUART1_UART_Init+0x90>)
 800088e:	2200      	movs	r2, #0
 8000890:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000892:	4b1b      	ldr	r3, [pc, #108]	; (8000900 <MX_LPUART1_UART_Init+0x90>)
 8000894:	220c      	movs	r2, #12
 8000896:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000898:	4b19      	ldr	r3, [pc, #100]	; (8000900 <MX_LPUART1_UART_Init+0x90>)
 800089a:	2200      	movs	r2, #0
 800089c:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800089e:	4b18      	ldr	r3, [pc, #96]	; (8000900 <MX_LPUART1_UART_Init+0x90>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008a4:	4b16      	ldr	r3, [pc, #88]	; (8000900 <MX_LPUART1_UART_Init+0x90>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008aa:	4b15      	ldr	r3, [pc, #84]	; (8000900 <MX_LPUART1_UART_Init+0x90>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80008b0:	4b13      	ldr	r3, [pc, #76]	; (8000900 <MX_LPUART1_UART_Init+0x90>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80008b6:	4812      	ldr	r0, [pc, #72]	; (8000900 <MX_LPUART1_UART_Init+0x90>)
 80008b8:	f004 fb6c 	bl	8004f94 <HAL_UART_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 80008c2:	f000 f9d9 	bl	8000c78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008c6:	2100      	movs	r1, #0
 80008c8:	480d      	ldr	r0, [pc, #52]	; (8000900 <MX_LPUART1_UART_Init+0x90>)
 80008ca:	f005 f90b 	bl	8005ae4 <HAL_UARTEx_SetTxFifoThreshold>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 80008d4:	f000 f9d0 	bl	8000c78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008d8:	2100      	movs	r1, #0
 80008da:	4809      	ldr	r0, [pc, #36]	; (8000900 <MX_LPUART1_UART_Init+0x90>)
 80008dc:	f005 f940 	bl	8005b60 <HAL_UARTEx_SetRxFifoThreshold>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 80008e6:	f000 f9c7 	bl	8000c78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80008ea:	4805      	ldr	r0, [pc, #20]	; (8000900 <MX_LPUART1_UART_Init+0x90>)
 80008ec:	f005 f8c1 	bl	8005a72 <HAL_UARTEx_DisableFifoMode>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 80008f6:	f000 f9bf 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000098 	.word	0x20000098
 8000904:	40008000 	.word	0x40008000
 8000908:	00033324 	.word	0x00033324

0800090c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b086      	sub	sp, #24
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8000912:	463b      	mov	r3, r7
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
 800091e:	611a      	str	r2, [r3, #16]
 8000920:	615a      	str	r2, [r3, #20]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000922:	4b1d      	ldr	r3, [pc, #116]	; (8000998 <MX_RTC_Init+0x8c>)
 8000924:	4a1d      	ldr	r2, [pc, #116]	; (800099c <MX_RTC_Init+0x90>)
 8000926:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000928:	4b1b      	ldr	r3, [pc, #108]	; (8000998 <MX_RTC_Init+0x8c>)
 800092a:	2200      	movs	r2, #0
 800092c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800092e:	4b1a      	ldr	r3, [pc, #104]	; (8000998 <MX_RTC_Init+0x8c>)
 8000930:	227f      	movs	r2, #127	; 0x7f
 8000932:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000934:	4b18      	ldr	r3, [pc, #96]	; (8000998 <MX_RTC_Init+0x8c>)
 8000936:	22ff      	movs	r2, #255	; 0xff
 8000938:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800093a:	4b17      	ldr	r3, [pc, #92]	; (8000998 <MX_RTC_Init+0x8c>)
 800093c:	2200      	movs	r2, #0
 800093e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000940:	4b15      	ldr	r3, [pc, #84]	; (8000998 <MX_RTC_Init+0x8c>)
 8000942:	2200      	movs	r2, #0
 8000944:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000946:	4b14      	ldr	r3, [pc, #80]	; (8000998 <MX_RTC_Init+0x8c>)
 8000948:	2200      	movs	r2, #0
 800094a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800094c:	4b12      	ldr	r3, [pc, #72]	; (8000998 <MX_RTC_Init+0x8c>)
 800094e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000952:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000954:	4b10      	ldr	r3, [pc, #64]	; (8000998 <MX_RTC_Init+0x8c>)
 8000956:	2200      	movs	r2, #0
 8000958:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800095a:	480f      	ldr	r0, [pc, #60]	; (8000998 <MX_RTC_Init+0x8c>)
 800095c:	f003 fda8 	bl	80044b0 <HAL_RTC_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8000966:	f000 f987 	bl	8000c78 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 800096a:	2300      	movs	r3, #0
 800096c:	603b      	str	r3, [r7, #0]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 800096e:	2300      	movs	r3, #0
 8000970:	60fb      	str	r3, [r7, #12]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8000972:	2300      	movs	r3, #0
 8000974:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8000976:	2300      	movs	r3, #0
 8000978:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 800097a:	463b      	mov	r3, r7
 800097c:	4619      	mov	r1, r3
 800097e:	4806      	ldr	r0, [pc, #24]	; (8000998 <MX_RTC_Init+0x8c>)
 8000980:	f003 fea4 	bl	80046cc <HAL_RTCEx_PrivilegeModeSet>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800098a:	f000 f975 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800098e:	bf00      	nop
 8000990:	3718      	adds	r7, #24
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	2000012c 	.word	0x2000012c
 800099c:	40002800 	.word	0x40002800

080009a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b088      	sub	sp, #32
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009a6:	f107 0310 	add.w	r3, r7, #16
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b4:	1d3b      	adds	r3, r7, #4
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
 80009bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009be:	4b1e      	ldr	r3, [pc, #120]	; (8000a38 <MX_TIM2_Init+0x98>)
 80009c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009c4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 80009c6:	4b1c      	ldr	r3, [pc, #112]	; (8000a38 <MX_TIM2_Init+0x98>)
 80009c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ce:	4b1a      	ldr	r3, [pc, #104]	; (8000a38 <MX_TIM2_Init+0x98>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 600;
 80009d4:	4b18      	ldr	r3, [pc, #96]	; (8000a38 <MX_TIM2_Init+0x98>)
 80009d6:	f44f 7216 	mov.w	r2, #600	; 0x258
 80009da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009dc:	4b16      	ldr	r3, [pc, #88]	; (8000a38 <MX_TIM2_Init+0x98>)
 80009de:	2200      	movs	r2, #0
 80009e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e2:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <MX_TIM2_Init+0x98>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009e8:	4813      	ldr	r0, [pc, #76]	; (8000a38 <MX_TIM2_Init+0x98>)
 80009ea:	f003 fe9b 	bl	8004724 <HAL_TIM_Base_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80009f4:	f000 f940 	bl	8000c78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009fe:	f107 0310 	add.w	r3, r7, #16
 8000a02:	4619      	mov	r1, r3
 8000a04:	480c      	ldr	r0, [pc, #48]	; (8000a38 <MX_TIM2_Init+0x98>)
 8000a06:	f003 ffeb 	bl	80049e0 <HAL_TIM_ConfigClockSource>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000a10:	f000 f932 	bl	8000c78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a14:	2300      	movs	r3, #0
 8000a16:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4805      	ldr	r0, [pc, #20]	; (8000a38 <MX_TIM2_Init+0x98>)
 8000a22:	f004 fa11 	bl	8004e48 <HAL_TIMEx_MasterConfigSynchronization>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000a2c:	f000 f924 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a30:	bf00      	nop
 8000a32:	3720      	adds	r7, #32
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20000154 	.word	0x20000154

08000a3c <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a42:	463b      	mov	r3, r7
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
 8000a50:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8000a52:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000a56:	f7ff fd95 	bl	8000584 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000a5a:	2002      	movs	r0, #2
 8000a5c:	f7ff fd7a 	bl	8000554 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000a60:	2001      	movs	r0, #1
 8000a62:	f7ff fd77 	bl	8000554 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000a66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a6a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a70:	2300      	movs	r3, #0
 8000a72:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a74:	463b      	mov	r3, r7
 8000a76:	4619      	mov	r1, r3
 8000a78:	4809      	ldr	r0, [pc, #36]	; (8000aa0 <MX_UCPD1_Init+0x64>)
 8000a7a:	f005 fa48 	bl	8005f0e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000a7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a82:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000a84:	2303      	movs	r3, #3
 8000a86:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8c:	463b      	mov	r3, r7
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4804      	ldr	r0, [pc, #16]	; (8000aa4 <MX_UCPD1_Init+0x68>)
 8000a92:	f005 fa3c 	bl	8005f0e <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8000a96:	bf00      	nop
 8000a98:	3718      	adds	r7, #24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	42020400 	.word	0x42020400
 8000aa4:	42020000 	.word	0x42020000

08000aa8 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000aac:	4b10      	ldr	r3, [pc, #64]	; (8000af0 <MX_USB_PCD_Init+0x48>)
 8000aae:	4a11      	ldr	r2, [pc, #68]	; (8000af4 <MX_USB_PCD_Init+0x4c>)
 8000ab0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000ab2:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <MX_USB_PCD_Init+0x48>)
 8000ab4:	2208      	movs	r2, #8
 8000ab6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000ab8:	4b0d      	ldr	r3, [pc, #52]	; (8000af0 <MX_USB_PCD_Init+0x48>)
 8000aba:	2202      	movs	r2, #2
 8000abc:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000abe:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <MX_USB_PCD_Init+0x48>)
 8000ac0:	2202      	movs	r2, #2
 8000ac2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000ac4:	4b0a      	ldr	r3, [pc, #40]	; (8000af0 <MX_USB_PCD_Init+0x48>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000aca:	4b09      	ldr	r3, [pc, #36]	; (8000af0 <MX_USB_PCD_Init+0x48>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000ad0:	4b07      	ldr	r3, [pc, #28]	; (8000af0 <MX_USB_PCD_Init+0x48>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000ad6:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <MX_USB_PCD_Init+0x48>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000adc:	4804      	ldr	r0, [pc, #16]	; (8000af0 <MX_USB_PCD_Init+0x48>)
 8000ade:	f001 fe71 	bl	80027c4 <HAL_PCD_Init>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000ae8:	f000 f8c6 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	200001a0 	.word	0x200001a0
 8000af4:	4000d400 	.word	0x4000d400

08000af8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08c      	sub	sp, #48	; 0x30
 8000afc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afe:	f107 031c 	add.w	r3, r7, #28
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	605a      	str	r2, [r3, #4]
 8000b08:	609a      	str	r2, [r3, #8]
 8000b0a:	60da      	str	r2, [r3, #12]
 8000b0c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b0e:	4b55      	ldr	r3, [pc, #340]	; (8000c64 <MX_GPIO_Init+0x16c>)
 8000b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b12:	4a54      	ldr	r2, [pc, #336]	; (8000c64 <MX_GPIO_Init+0x16c>)
 8000b14:	f043 0304 	orr.w	r3, r3, #4
 8000b18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b1a:	4b52      	ldr	r3, [pc, #328]	; (8000c64 <MX_GPIO_Init+0x16c>)
 8000b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1e:	f003 0304 	and.w	r3, r3, #4
 8000b22:	61bb      	str	r3, [r7, #24]
 8000b24:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b26:	4b4f      	ldr	r3, [pc, #316]	; (8000c64 <MX_GPIO_Init+0x16c>)
 8000b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2a:	4a4e      	ldr	r2, [pc, #312]	; (8000c64 <MX_GPIO_Init+0x16c>)
 8000b2c:	f043 0320 	orr.w	r3, r3, #32
 8000b30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b32:	4b4c      	ldr	r3, [pc, #304]	; (8000c64 <MX_GPIO_Init+0x16c>)
 8000b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b36:	f003 0320 	and.w	r3, r3, #32
 8000b3a:	617b      	str	r3, [r7, #20]
 8000b3c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b3e:	4b49      	ldr	r3, [pc, #292]	; (8000c64 <MX_GPIO_Init+0x16c>)
 8000b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b42:	4a48      	ldr	r2, [pc, #288]	; (8000c64 <MX_GPIO_Init+0x16c>)
 8000b44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b4a:	4b46      	ldr	r3, [pc, #280]	; (8000c64 <MX_GPIO_Init+0x16c>)
 8000b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b52:	613b      	str	r3, [r7, #16]
 8000b54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b56:	4b43      	ldr	r3, [pc, #268]	; (8000c64 <MX_GPIO_Init+0x16c>)
 8000b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5a:	4a42      	ldr	r2, [pc, #264]	; (8000c64 <MX_GPIO_Init+0x16c>)
 8000b5c:	f043 0302 	orr.w	r3, r3, #2
 8000b60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b62:	4b40      	ldr	r3, [pc, #256]	; (8000c64 <MX_GPIO_Init+0x16c>)
 8000b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b66:	f003 0302 	and.w	r3, r3, #2
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b6e:	4b3d      	ldr	r3, [pc, #244]	; (8000c64 <MX_GPIO_Init+0x16c>)
 8000b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b72:	4a3c      	ldr	r2, [pc, #240]	; (8000c64 <MX_GPIO_Init+0x16c>)
 8000b74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b7a:	4b3a      	ldr	r3, [pc, #232]	; (8000c64 <MX_GPIO_Init+0x16c>)
 8000b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b82:	60bb      	str	r3, [r7, #8]
 8000b84:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8000b86:	f001 ff8f 	bl	8002aa8 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8a:	4b36      	ldr	r3, [pc, #216]	; (8000c64 <MX_GPIO_Init+0x16c>)
 8000b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8e:	4a35      	ldr	r2, [pc, #212]	; (8000c64 <MX_GPIO_Init+0x16c>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b96:	4b33      	ldr	r3, [pc, #204]	; (8000c64 <MX_GPIO_Init+0x16c>)
 8000b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, A_serial_Pin|B_serial_Pin, GPIO_PIN_RESET);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2128      	movs	r1, #40	; 0x28
 8000ba6:	4830      	ldr	r0, [pc, #192]	; (8000c68 <MX_GPIO_Init+0x170>)
 8000ba8:	f001 fdf4 	bl	8002794 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000bac:	2200      	movs	r2, #0
 8000bae:	2180      	movs	r1, #128	; 0x80
 8000bb0:	482e      	ldr	r0, [pc, #184]	; (8000c6c <MX_GPIO_Init+0x174>)
 8000bb2:	f001 fdef 	bl	8002794 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bbc:	482c      	ldr	r0, [pc, #176]	; (8000c70 <MX_GPIO_Init+0x178>)
 8000bbe:	f001 fde9 	bl	8002794 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	21a0      	movs	r1, #160	; 0xa0
 8000bc6:	482b      	ldr	r0, [pc, #172]	; (8000c74 <MX_GPIO_Init+0x17c>)
 8000bc8:	f001 fde4 	bl	8002794 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A_serial_Pin B_serial_Pin */
  GPIO_InitStruct.Pin = A_serial_Pin|B_serial_Pin;
 8000bcc:	2328      	movs	r3, #40	; 0x28
 8000bce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000bdc:	f107 031c 	add.w	r3, r7, #28
 8000be0:	4619      	mov	r1, r3
 8000be2:	4821      	ldr	r0, [pc, #132]	; (8000c68 <MX_GPIO_Init+0x170>)
 8000be4:	f001 fc56 	bl	8002494 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000be8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000bec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bee:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bf2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000bf8:	f107 031c 	add.w	r3, r7, #28
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	481d      	ldr	r0, [pc, #116]	; (8000c74 <MX_GPIO_Init+0x17c>)
 8000c00:	f001 fc48 	bl	8002494 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000c04:	2380      	movs	r3, #128	; 0x80
 8000c06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c10:	2300      	movs	r3, #0
 8000c12:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000c14:	f107 031c 	add.w	r3, r7, #28
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4814      	ldr	r0, [pc, #80]	; (8000c6c <MX_GPIO_Init+0x174>)
 8000c1c:	f001 fc3a 	bl	8002494 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000c20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c26:	2301      	movs	r3, #1
 8000c28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000c32:	f107 031c 	add.w	r3, r7, #28
 8000c36:	4619      	mov	r1, r3
 8000c38:	480d      	ldr	r0, [pc, #52]	; (8000c70 <MX_GPIO_Init+0x178>)
 8000c3a:	f001 fc2b 	bl	8002494 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_DBN_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = UCPD_DBN_Pin|LED_BLUE_Pin;
 8000c3e:	23a0      	movs	r3, #160	; 0xa0
 8000c40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c42:	2301      	movs	r3, #1
 8000c44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c4e:	f107 031c 	add.w	r3, r7, #28
 8000c52:	4619      	mov	r1, r3
 8000c54:	4807      	ldr	r0, [pc, #28]	; (8000c74 <MX_GPIO_Init+0x17c>)
 8000c56:	f001 fc1d 	bl	8002494 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c5a:	bf00      	nop
 8000c5c:	3730      	adds	r7, #48	; 0x30
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40021000 	.word	0x40021000
 8000c68:	42021400 	.word	0x42021400
 8000c6c:	42020800 	.word	0x42020800
 8000c70:	42020000 	.word	0x42020000
 8000c74:	42020400 	.word	0x42020400

08000c78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c7c:	b672      	cpsid	i
}
 8000c7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <Error_Handler+0x8>
	...

08000c84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c8a:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <HAL_MspInit+0x44>)
 8000c8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c8e:	4a0e      	ldr	r2, [pc, #56]	; (8000cc8 <HAL_MspInit+0x44>)
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	6613      	str	r3, [r2, #96]	; 0x60
 8000c96:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <HAL_MspInit+0x44>)
 8000c98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca2:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <HAL_MspInit+0x44>)
 8000ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ca6:	4a08      	ldr	r2, [pc, #32]	; (8000cc8 <HAL_MspInit+0x44>)
 8000ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cac:	6593      	str	r3, [r2, #88]	; 0x58
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <HAL_MspInit+0x44>)
 8000cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	603b      	str	r3, [r7, #0]
 8000cb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	40021000 	.word	0x40021000

08000ccc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b0ae      	sub	sp, #184	; 0xb8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ce4:	f107 0310 	add.w	r3, r7, #16
 8000ce8:	2294      	movs	r2, #148	; 0x94
 8000cea:	2100      	movs	r1, #0
 8000cec:	4618      	mov	r0, r3
 8000cee:	f005 f9d9 	bl	80060a4 <memset>
  if(hadc->Instance==ADC1)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a1f      	ldr	r2, [pc, #124]	; (8000d74 <HAL_ADC_MspInit+0xa8>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d137      	bne.n	8000d6c <HAL_ADC_MspInit+0xa0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000cfc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d00:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000d02:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000d06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d0a:	f107 0310 	add.w	r3, r7, #16
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f002 feb8 	bl	8003a84 <HAL_RCCEx_PeriphCLKConfig>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8000d1a:	f7ff ffad 	bl	8000c78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000d1e:	4b16      	ldr	r3, [pc, #88]	; (8000d78 <HAL_ADC_MspInit+0xac>)
 8000d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d22:	4a15      	ldr	r2, [pc, #84]	; (8000d78 <HAL_ADC_MspInit+0xac>)
 8000d24:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d2a:	4b13      	ldr	r3, [pc, #76]	; (8000d78 <HAL_ADC_MspInit+0xac>)
 8000d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d36:	4b10      	ldr	r3, [pc, #64]	; (8000d78 <HAL_ADC_MspInit+0xac>)
 8000d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d3a:	4a0f      	ldr	r2, [pc, #60]	; (8000d78 <HAL_ADC_MspInit+0xac>)
 8000d3c:	f043 0304 	orr.w	r3, r3, #4
 8000d40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d42:	4b0d      	ldr	r3, [pc, #52]	; (8000d78 <HAL_ADC_MspInit+0xac>)
 8000d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d46:	f003 0304 	and.w	r3, r3, #4
 8000d4a:	60bb      	str	r3, [r7, #8]
 8000d4c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000d4e:	2304      	movs	r3, #4
 8000d50:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d54:	2303      	movs	r3, #3
 8000d56:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000d60:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d64:	4619      	mov	r1, r3
 8000d66:	4805      	ldr	r0, [pc, #20]	; (8000d7c <HAL_ADC_MspInit+0xb0>)
 8000d68:	f001 fb94 	bl	8002494 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d6c:	bf00      	nop
 8000d6e:	37b8      	adds	r7, #184	; 0xb8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	42028000 	.word	0x42028000
 8000d78:	40021000 	.word	0x40021000
 8000d7c:	42020800 	.word	0x42020800

08000d80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b0ae      	sub	sp, #184	; 0xb8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d98:	f107 0310 	add.w	r3, r7, #16
 8000d9c:	2294      	movs	r2, #148	; 0x94
 8000d9e:	2100      	movs	r1, #0
 8000da0:	4618      	mov	r0, r3
 8000da2:	f005 f97f 	bl	80060a4 <memset>
  if(huart->Instance==LPUART1)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a22      	ldr	r2, [pc, #136]	; (8000e34 <HAL_UART_MspInit+0xb4>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d13d      	bne.n	8000e2c <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000db0:	2320      	movs	r3, #32
 8000db2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000db4:	2300      	movs	r3, #0
 8000db6:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000db8:	f107 0310 	add.w	r3, r7, #16
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f002 fe61 	bl	8003a84 <HAL_RCCEx_PeriphCLKConfig>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000dc8:	f7ff ff56 	bl	8000c78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000dcc:	4b1a      	ldr	r3, [pc, #104]	; (8000e38 <HAL_UART_MspInit+0xb8>)
 8000dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000dd0:	4a19      	ldr	r2, [pc, #100]	; (8000e38 <HAL_UART_MspInit+0xb8>)
 8000dd2:	f043 0301 	orr.w	r3, r3, #1
 8000dd6:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000dd8:	4b17      	ldr	r3, [pc, #92]	; (8000e38 <HAL_UART_MspInit+0xb8>)
 8000dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ddc:	f003 0301 	and.w	r3, r3, #1
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000de4:	4b14      	ldr	r3, [pc, #80]	; (8000e38 <HAL_UART_MspInit+0xb8>)
 8000de6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de8:	4a13      	ldr	r2, [pc, #76]	; (8000e38 <HAL_UART_MspInit+0xb8>)
 8000dea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000df0:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <HAL_UART_MspInit+0xb8>)
 8000df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000df8:	60bb      	str	r3, [r7, #8]
 8000dfa:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000dfc:	f001 fe54 	bl	8002aa8 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_VCP_TX_Pin|ST_LINK_VCP_RX_Pin;
 8000e00:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000e04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e14:	2300      	movs	r3, #0
 8000e16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000e1a:	2308      	movs	r3, #8
 8000e1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e20:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e24:	4619      	mov	r1, r3
 8000e26:	4805      	ldr	r0, [pc, #20]	; (8000e3c <HAL_UART_MspInit+0xbc>)
 8000e28:	f001 fb34 	bl	8002494 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000e2c:	bf00      	nop
 8000e2e:	37b8      	adds	r7, #184	; 0xb8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40008000 	.word	0x40008000
 8000e38:	40021000 	.word	0x40021000
 8000e3c:	42021800 	.word	0x42021800

08000e40 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b0a8      	sub	sp, #160	; 0xa0
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e48:	f107 030c 	add.w	r3, r7, #12
 8000e4c:	2294      	movs	r2, #148	; 0x94
 8000e4e:	2100      	movs	r1, #0
 8000e50:	4618      	mov	r0, r3
 8000e52:	f005 f927 	bl	80060a4 <memset>
  if(hrtc->Instance==RTC)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a16      	ldr	r2, [pc, #88]	; (8000eb4 <HAL_RTC_MspInit+0x74>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d124      	bne.n	8000eaa <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000e60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e64:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000e66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e6e:	f107 030c 	add.w	r3, r7, #12
 8000e72:	4618      	mov	r0, r3
 8000e74:	f002 fe06 	bl	8003a84 <HAL_RCCEx_PeriphCLKConfig>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000e7e:	f7ff fefb 	bl	8000c78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000e82:	4b0d      	ldr	r3, [pc, #52]	; (8000eb8 <HAL_RTC_MspInit+0x78>)
 8000e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e88:	4a0b      	ldr	r2, [pc, #44]	; (8000eb8 <HAL_RTC_MspInit+0x78>)
 8000e8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000e92:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <HAL_RTC_MspInit+0x78>)
 8000e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e96:	4a08      	ldr	r2, [pc, #32]	; (8000eb8 <HAL_RTC_MspInit+0x78>)
 8000e98:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e9c:	6593      	str	r3, [r2, #88]	; 0x58
 8000e9e:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <HAL_RTC_MspInit+0x78>)
 8000ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ea2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ea6:	60bb      	str	r3, [r7, #8]
 8000ea8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000eaa:	bf00      	nop
 8000eac:	37a0      	adds	r7, #160	; 0xa0
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40002800 	.word	0x40002800
 8000eb8:	40021000 	.word	0x40021000

08000ebc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ecc:	d113      	bne.n	8000ef6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ece:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <HAL_TIM_Base_MspInit+0x44>)
 8000ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ed2:	4a0b      	ldr	r2, [pc, #44]	; (8000f00 <HAL_TIM_Base_MspInit+0x44>)
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	6593      	str	r3, [r2, #88]	; 0x58
 8000eda:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <HAL_TIM_Base_MspInit+0x44>)
 8000edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2100      	movs	r1, #0
 8000eea:	202d      	movs	r0, #45	; 0x2d
 8000eec:	f001 fa9d 	bl	800242a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ef0:	202d      	movs	r0, #45	; 0x2d
 8000ef2:	f001 fab4 	bl	800245e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ef6:	bf00      	nop
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40021000 	.word	0x40021000

08000f04 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b0ae      	sub	sp, #184	; 0xb8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f1c:	f107 0310 	add.w	r3, r7, #16
 8000f20:	2294      	movs	r2, #148	; 0x94
 8000f22:	2100      	movs	r1, #0
 8000f24:	4618      	mov	r0, r3
 8000f26:	f005 f8bd 	bl	80060a4 <memset>
  if(hpcd->Instance==USB)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a22      	ldr	r2, [pc, #136]	; (8000fb8 <HAL_PCD_MspInit+0xb4>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d13d      	bne.n	8000fb0 <HAL_PCD_MspInit+0xac>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000f34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f38:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f40:	f107 0310 	add.w	r3, r7, #16
 8000f44:	4618      	mov	r0, r3
 8000f46:	f002 fd9d 	bl	8003a84 <HAL_RCCEx_PeriphCLKConfig>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000f50:	f7ff fe92 	bl	8000c78 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f54:	4b19      	ldr	r3, [pc, #100]	; (8000fbc <HAL_PCD_MspInit+0xb8>)
 8000f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f58:	4a18      	ldr	r2, [pc, #96]	; (8000fbc <HAL_PCD_MspInit+0xb8>)
 8000f5a:	f043 0301 	orr.w	r3, r3, #1
 8000f5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f60:	4b16      	ldr	r3, [pc, #88]	; (8000fbc <HAL_PCD_MspInit+0xb8>)
 8000f62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f64:	f003 0301 	and.w	r3, r3, #1
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000f6c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f74:	2302      	movs	r3, #2
 8000f76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f80:	2300      	movs	r3, #0
 8000f82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000f86:	230a      	movs	r3, #10
 8000f88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f90:	4619      	mov	r1, r3
 8000f92:	480b      	ldr	r0, [pc, #44]	; (8000fc0 <HAL_PCD_MspInit+0xbc>)
 8000f94:	f001 fa7e 	bl	8002494 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000f98:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <HAL_PCD_MspInit+0xb8>)
 8000f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f9c:	4a07      	ldr	r2, [pc, #28]	; (8000fbc <HAL_PCD_MspInit+0xb8>)
 8000f9e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fa2:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000fa4:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <HAL_PCD_MspInit+0xb8>)
 8000fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fac:	60bb      	str	r3, [r7, #8]
 8000fae:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000fb0:	bf00      	nop
 8000fb2:	37b8      	adds	r7, #184	; 0xb8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	4000d400 	.word	0x4000d400
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	42020000 	.word	0x42020000

08000fc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <NMI_Handler+0x4>

08000fca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fce:	e7fe      	b.n	8000fce <HardFault_Handler+0x4>

08000fd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <MemManage_Handler+0x4>

08000fd6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fda:	e7fe      	b.n	8000fda <BusFault_Handler+0x4>

08000fdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <UsageFault_Handler+0x4>

08000fe2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001010:	f000 f94c 	bl	80012ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}

08001018 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800101c:	4802      	ldr	r0, [pc, #8]	; (8001028 <TIM2_IRQHandler+0x10>)
 800101e:	f003 fbd8 	bl	80047d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000154 	.word	0x20000154

0800102c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <SystemInit+0x20>)
 8001032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001036:	4a05      	ldr	r2, [pc, #20]	; (800104c <SystemInit+0x20>)
 8001038:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800103c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	e000ed00 	.word	0xe000ed00

08001050 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001050:	b480      	push	{r7}
 8001052:	b087      	sub	sp, #28
 8001054:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8001056:	4b4f      	ldr	r3, [pc, #316]	; (8001194 <SystemCoreClockUpdate+0x144>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 0308 	and.w	r3, r3, #8
 800105e:	2b00      	cmp	r3, #0
 8001060:	d107      	bne.n	8001072 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8001062:	4b4c      	ldr	r3, [pc, #304]	; (8001194 <SystemCoreClockUpdate+0x144>)
 8001064:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001068:	0a1b      	lsrs	r3, r3, #8
 800106a:	f003 030f 	and.w	r3, r3, #15
 800106e:	617b      	str	r3, [r7, #20]
 8001070:	e005      	b.n	800107e <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8001072:	4b48      	ldr	r3, [pc, #288]	; (8001194 <SystemCoreClockUpdate+0x144>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	091b      	lsrs	r3, r3, #4
 8001078:	f003 030f 	and.w	r3, r3, #15
 800107c:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 800107e:	4a46      	ldr	r2, [pc, #280]	; (8001198 <SystemCoreClockUpdate+0x148>)
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001086:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001088:	4b42      	ldr	r3, [pc, #264]	; (8001194 <SystemCoreClockUpdate+0x144>)
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	f003 030c 	and.w	r3, r3, #12
 8001090:	2b0c      	cmp	r3, #12
 8001092:	d866      	bhi.n	8001162 <SystemCoreClockUpdate+0x112>
 8001094:	a201      	add	r2, pc, #4	; (adr r2, 800109c <SystemCoreClockUpdate+0x4c>)
 8001096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800109a:	bf00      	nop
 800109c:	080010d1 	.word	0x080010d1
 80010a0:	08001163 	.word	0x08001163
 80010a4:	08001163 	.word	0x08001163
 80010a8:	08001163 	.word	0x08001163
 80010ac:	080010d9 	.word	0x080010d9
 80010b0:	08001163 	.word	0x08001163
 80010b4:	08001163 	.word	0x08001163
 80010b8:	08001163 	.word	0x08001163
 80010bc:	080010e1 	.word	0x080010e1
 80010c0:	08001163 	.word	0x08001163
 80010c4:	08001163 	.word	0x08001163
 80010c8:	08001163 	.word	0x08001163
 80010cc:	080010e9 	.word	0x080010e9
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80010d0:	4a32      	ldr	r2, [pc, #200]	; (800119c <SystemCoreClockUpdate+0x14c>)
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	6013      	str	r3, [r2, #0]
      break;
 80010d6:	e048      	b.n	800116a <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80010d8:	4b30      	ldr	r3, [pc, #192]	; (800119c <SystemCoreClockUpdate+0x14c>)
 80010da:	4a31      	ldr	r2, [pc, #196]	; (80011a0 <SystemCoreClockUpdate+0x150>)
 80010dc:	601a      	str	r2, [r3, #0]
      break;
 80010de:	e044      	b.n	800116a <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80010e0:	4b2e      	ldr	r3, [pc, #184]	; (800119c <SystemCoreClockUpdate+0x14c>)
 80010e2:	4a30      	ldr	r2, [pc, #192]	; (80011a4 <SystemCoreClockUpdate+0x154>)
 80010e4:	601a      	str	r2, [r3, #0]
      break;
 80010e6:	e040      	b.n	800116a <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80010e8:	4b2a      	ldr	r3, [pc, #168]	; (8001194 <SystemCoreClockUpdate+0x144>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	f003 0303 	and.w	r3, r3, #3
 80010f0:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 80010f2:	4b28      	ldr	r3, [pc, #160]	; (8001194 <SystemCoreClockUpdate+0x144>)
 80010f4:	68db      	ldr	r3, [r3, #12]
 80010f6:	091b      	lsrs	r3, r3, #4
 80010f8:	f003 030f 	and.w	r3, r3, #15
 80010fc:	3301      	adds	r3, #1
 80010fe:	60bb      	str	r3, [r7, #8]
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	2b02      	cmp	r3, #2
 8001104:	d003      	beq.n	800110e <SystemCoreClockUpdate+0xbe>
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	2b03      	cmp	r3, #3
 800110a:	d006      	beq.n	800111a <SystemCoreClockUpdate+0xca>
 800110c:	e00b      	b.n	8001126 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 800110e:	4a24      	ldr	r2, [pc, #144]	; (80011a0 <SystemCoreClockUpdate+0x150>)
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	fbb2 f3f3 	udiv	r3, r2, r3
 8001116:	613b      	str	r3, [r7, #16]
          break;
 8001118:	e00b      	b.n	8001132 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 800111a:	4a22      	ldr	r2, [pc, #136]	; (80011a4 <SystemCoreClockUpdate+0x154>)
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001122:	613b      	str	r3, [r7, #16]
          break;
 8001124:	e005      	b.n	8001132 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8001126:	697a      	ldr	r2, [r7, #20]
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	fbb2 f3f3 	udiv	r3, r2, r3
 800112e:	613b      	str	r3, [r7, #16]
          break;
 8001130:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8001132:	4b18      	ldr	r3, [pc, #96]	; (8001194 <SystemCoreClockUpdate+0x144>)
 8001134:	68db      	ldr	r3, [r3, #12]
 8001136:	0a1b      	lsrs	r3, r3, #8
 8001138:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	fb02 f303 	mul.w	r3, r2, r3
 8001142:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8001144:	4b13      	ldr	r3, [pc, #76]	; (8001194 <SystemCoreClockUpdate+0x144>)
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	0e5b      	lsrs	r3, r3, #25
 800114a:	f003 0303 	and.w	r3, r3, #3
 800114e:	3301      	adds	r3, #1
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	fbb2 f3f3 	udiv	r3, r2, r3
 800115c:	4a0f      	ldr	r2, [pc, #60]	; (800119c <SystemCoreClockUpdate+0x14c>)
 800115e:	6013      	str	r3, [r2, #0]
      break;
 8001160:	e003      	b.n	800116a <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8001162:	4a0e      	ldr	r2, [pc, #56]	; (800119c <SystemCoreClockUpdate+0x14c>)
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	6013      	str	r3, [r2, #0]
      break;
 8001168:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800116a:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <SystemCoreClockUpdate+0x144>)
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	091b      	lsrs	r3, r3, #4
 8001170:	f003 030f 	and.w	r3, r3, #15
 8001174:	4a0c      	ldr	r2, [pc, #48]	; (80011a8 <SystemCoreClockUpdate+0x158>)
 8001176:	5cd3      	ldrb	r3, [r2, r3]
 8001178:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800117a:	4b08      	ldr	r3, [pc, #32]	; (800119c <SystemCoreClockUpdate+0x14c>)
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	fa22 f303 	lsr.w	r3, r2, r3
 8001184:	4a05      	ldr	r2, [pc, #20]	; (800119c <SystemCoreClockUpdate+0x14c>)
 8001186:	6013      	str	r3, [r2, #0]
}
 8001188:	bf00      	nop
 800118a:	371c      	adds	r7, #28
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	40021000 	.word	0x40021000
 8001198:	080060e4 	.word	0x080060e4
 800119c:	20000008 	.word	0x20000008
 80011a0:	00f42400 	.word	0x00f42400
 80011a4:	007a1200 	.word	0x007a1200
 80011a8:	080060cc 	.word	0x080060cc

080011ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80011ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80011b0:	f7ff ff3c 	bl	800102c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80011b4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80011b6:	e003      	b.n	80011c0 <LoopCopyDataInit>

080011b8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80011b8:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80011ba:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80011bc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80011be:	3104      	adds	r1, #4

080011c0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80011c0:	480a      	ldr	r0, [pc, #40]	; (80011ec <LoopForever+0xa>)
	ldr	r3, =_edata
 80011c2:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80011c4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80011c6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80011c8:	d3f6      	bcc.n	80011b8 <CopyDataInit>
	ldr	r2, =_sbss
 80011ca:	4a0a      	ldr	r2, [pc, #40]	; (80011f4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80011cc:	e002      	b.n	80011d4 <LoopFillZerobss>

080011ce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80011ce:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80011d0:	f842 3b04 	str.w	r3, [r2], #4

080011d4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80011d4:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <LoopForever+0x16>)
	cmp	r2, r3
 80011d6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80011d8:	d3f9      	bcc.n	80011ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80011da:	f004 ff3f 	bl	800605c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011de:	f7ff f9e9 	bl	80005b4 <main>

080011e2 <LoopForever>:

LoopForever:
    b LoopForever
 80011e2:	e7fe      	b.n	80011e2 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80011e4:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 80011e8:	0800615c 	.word	0x0800615c
	ldr	r0, =_sdata
 80011ec:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80011f0:	20000014 	.word	0x20000014
	ldr	r2, =_sbss
 80011f4:	20000014 	.word	0x20000014
	ldr	r3, = _ebss
 80011f8:	20000484 	.word	0x20000484

080011fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011fc:	e7fe      	b.n	80011fc <ADC1_2_IRQHandler>

080011fe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b082      	sub	sp, #8
 8001202:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001204:	2300      	movs	r3, #0
 8001206:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001208:	2004      	movs	r0, #4
 800120a:	f001 f903 	bl	8002414 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 800120e:	f7ff ff1f 	bl	8001050 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001212:	2000      	movs	r0, #0
 8001214:	f000 f80e 	bl	8001234 <HAL_InitTick>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d002      	beq.n	8001224 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	71fb      	strb	r3, [r7, #7]
 8001222:	e001      	b.n	8001228 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001224:	f7ff fd2e 	bl	8000c84 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001228:	79fb      	ldrb	r3, [r7, #7]
}
 800122a:	4618      	mov	r0, r3
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
	...

08001234 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800123c:	2300      	movs	r3, #0
 800123e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001240:	4b17      	ldr	r3, [pc, #92]	; (80012a0 <HAL_InitTick+0x6c>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d023      	beq.n	8001290 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001248:	4b16      	ldr	r3, [pc, #88]	; (80012a4 <HAL_InitTick+0x70>)
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	4b14      	ldr	r3, [pc, #80]	; (80012a0 <HAL_InitTick+0x6c>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	4619      	mov	r1, r3
 8001252:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001256:	fbb3 f3f1 	udiv	r3, r3, r1
 800125a:	fbb2 f3f3 	udiv	r3, r2, r3
 800125e:	4618      	mov	r0, r3
 8001260:	f001 f90b 	bl	800247a <HAL_SYSTICK_Config>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d10f      	bne.n	800128a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2b07      	cmp	r3, #7
 800126e:	d809      	bhi.n	8001284 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001270:	2200      	movs	r2, #0
 8001272:	6879      	ldr	r1, [r7, #4]
 8001274:	f04f 30ff 	mov.w	r0, #4294967295
 8001278:	f001 f8d7 	bl	800242a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800127c:	4a0a      	ldr	r2, [pc, #40]	; (80012a8 <HAL_InitTick+0x74>)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6013      	str	r3, [r2, #0]
 8001282:	e007      	b.n	8001294 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	73fb      	strb	r3, [r7, #15]
 8001288:	e004      	b.n	8001294 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	73fb      	strb	r3, [r7, #15]
 800128e:	e001      	b.n	8001294 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001294:	7bfb      	ldrb	r3, [r7, #15]
}
 8001296:	4618      	mov	r0, r3
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	20000010 	.word	0x20000010
 80012a4:	20000008 	.word	0x20000008
 80012a8:	2000000c 	.word	0x2000000c

080012ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012b0:	4b06      	ldr	r3, [pc, #24]	; (80012cc <HAL_IncTick+0x20>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	461a      	mov	r2, r3
 80012b6:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <HAL_IncTick+0x24>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4413      	add	r3, r2
 80012bc:	4a04      	ldr	r2, [pc, #16]	; (80012d0 <HAL_IncTick+0x24>)
 80012be:	6013      	str	r3, [r2, #0]
}
 80012c0:	bf00      	nop
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	20000010 	.word	0x20000010
 80012d0:	20000480 	.word	0x20000480

080012d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  return uwTick;
 80012d8:	4b03      	ldr	r3, [pc, #12]	; (80012e8 <HAL_GetTick+0x14>)
 80012da:	681b      	ldr	r3, [r3, #0]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	20000480 	.word	0x20000480

080012ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012f4:	f7ff ffee 	bl	80012d4 <HAL_GetTick>
 80012f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001304:	d005      	beq.n	8001312 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001306:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <HAL_Delay+0x44>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	461a      	mov	r2, r3
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	4413      	add	r3, r2
 8001310:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001312:	bf00      	nop
 8001314:	f7ff ffde 	bl	80012d4 <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	68fa      	ldr	r2, [r7, #12]
 8001320:	429a      	cmp	r2, r3
 8001322:	d8f7      	bhi.n	8001314 <HAL_Delay+0x28>
  {
  }
}
 8001324:	bf00      	nop
 8001326:	bf00      	nop
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	20000010 	.word	0x20000010

08001334 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	431a      	orrs	r2, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	609a      	str	r2, [r3, #8]
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800135a:	b480      	push	{r7}
 800135c:	b083      	sub	sp, #12
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
 8001362:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	431a      	orrs	r2, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	609a      	str	r2, [r3, #8]
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001390:	4618      	mov	r0, r3
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800139c:	b480      	push	{r7}
 800139e:	b087      	sub	sp, #28
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
 80013a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	3360      	adds	r3, #96	; 0x60
 80013ae:	461a      	mov	r2, r3
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	4413      	add	r3, r2
 80013b6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <LL_ADC_SetOffset+0x44>)
 80013be:	4013      	ands	r3, r2
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80013c6:	683a      	ldr	r2, [r7, #0]
 80013c8:	430a      	orrs	r2, r1
 80013ca:	4313      	orrs	r3, r2
 80013cc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80013d4:	bf00      	nop
 80013d6:	371c      	adds	r7, #28
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	03fff000 	.word	0x03fff000

080013e4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	3360      	adds	r3, #96	; 0x60
 80013f2:	461a      	mov	r2, r3
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	4413      	add	r3, r2
 80013fa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001404:	4618      	mov	r0, r3
 8001406:	3714      	adds	r7, #20
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001410:	b480      	push	{r7}
 8001412:	b087      	sub	sp, #28
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	3360      	adds	r3, #96	; 0x60
 8001420:	461a      	mov	r2, r3
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	4413      	add	r3, r2
 8001428:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	431a      	orrs	r2, r3
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800143a:	bf00      	nop
 800143c:	371c      	adds	r7, #28
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001446:	b480      	push	{r7}
 8001448:	b083      	sub	sp, #12
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
 800144e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	695b      	ldr	r3, [r3, #20]
 8001454:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	431a      	orrs	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	615a      	str	r2, [r3, #20]
}
 8001460:	bf00      	nop
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800146c:	b480      	push	{r7}
 800146e:	b087      	sub	sp, #28
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	3330      	adds	r3, #48	; 0x30
 800147c:	461a      	mov	r2, r3
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	0a1b      	lsrs	r3, r3, #8
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	f003 030c 	and.w	r3, r3, #12
 8001488:	4413      	add	r3, r2
 800148a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	f003 031f 	and.w	r3, r3, #31
 8001496:	211f      	movs	r1, #31
 8001498:	fa01 f303 	lsl.w	r3, r1, r3
 800149c:	43db      	mvns	r3, r3
 800149e:	401a      	ands	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	0e9b      	lsrs	r3, r3, #26
 80014a4:	f003 011f 	and.w	r1, r3, #31
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	f003 031f 	and.w	r3, r3, #31
 80014ae:	fa01 f303 	lsl.w	r3, r1, r3
 80014b2:	431a      	orrs	r2, r3
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80014b8:	bf00      	nop
 80014ba:	371c      	adds	r7, #28
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b087      	sub	sp, #28
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	3314      	adds	r3, #20
 80014d4:	461a      	mov	r2, r3
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	0e5b      	lsrs	r3, r3, #25
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	f003 0304 	and.w	r3, r3, #4
 80014e0:	4413      	add	r3, r2
 80014e2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	0d1b      	lsrs	r3, r3, #20
 80014ec:	f003 031f 	and.w	r3, r3, #31
 80014f0:	2107      	movs	r1, #7
 80014f2:	fa01 f303 	lsl.w	r3, r1, r3
 80014f6:	43db      	mvns	r3, r3
 80014f8:	401a      	ands	r2, r3
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	0d1b      	lsrs	r3, r3, #20
 80014fe:	f003 031f 	and.w	r3, r3, #31
 8001502:	6879      	ldr	r1, [r7, #4]
 8001504:	fa01 f303 	lsl.w	r3, r1, r3
 8001508:	431a      	orrs	r2, r3
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800150e:	bf00      	nop
 8001510:	371c      	adds	r7, #28
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
	...

0800151c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001534:	43db      	mvns	r3, r3
 8001536:	401a      	ands	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f003 0318 	and.w	r3, r3, #24
 800153e:	4908      	ldr	r1, [pc, #32]	; (8001560 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001540:	40d9      	lsrs	r1, r3
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	400b      	ands	r3, r1
 8001546:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800154a:	431a      	orrs	r2, r3
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001552:	bf00      	nop
 8001554:	3714      	adds	r7, #20
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	0007ffff 	.word	0x0007ffff

08001564 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001574:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	6093      	str	r3, [r2, #8]
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001598:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800159c:	d101      	bne.n	80015a2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800159e:	2301      	movs	r3, #1
 80015a0:	e000      	b.n	80015a4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80015a2:	2300      	movs	r3, #0
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80015c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015c4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80015ec:	d101      	bne.n	80015f2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80015ee:	2301      	movs	r3, #1
 80015f0:	e000      	b.n	80015f4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80015f2:	2300      	movs	r3, #0
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	f003 0301 	and.w	r3, r3, #1
 8001610:	2b01      	cmp	r3, #1
 8001612:	d101      	bne.n	8001618 <LL_ADC_IsEnabled+0x18>
 8001614:	2301      	movs	r3, #1
 8001616:	e000      	b.n	800161a <LL_ADC_IsEnabled+0x1a>
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001626:	b480      	push	{r7}
 8001628:	b083      	sub	sp, #12
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f003 0304 	and.w	r3, r3, #4
 8001636:	2b04      	cmp	r3, #4
 8001638:	d101      	bne.n	800163e <LL_ADC_REG_IsConversionOngoing+0x18>
 800163a:	2301      	movs	r3, #1
 800163c:	e000      	b.n	8001640 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800163e:	2300      	movs	r3, #0
}
 8001640:	4618      	mov	r0, r3
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	f003 0308 	and.w	r3, r3, #8
 800165c:	2b08      	cmp	r3, #8
 800165e:	d101      	bne.n	8001664 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001660:	2301      	movs	r3, #1
 8001662:	e000      	b.n	8001666 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
	...

08001674 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001674:	b590      	push	{r4, r7, lr}
 8001676:	b089      	sub	sp, #36	; 0x24
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800167c:	2300      	movs	r3, #0
 800167e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001680:	2300      	movs	r3, #0
 8001682:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d101      	bne.n	800168e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e12e      	b.n	80018ec <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	691b      	ldr	r3, [r3, #16]
 8001692:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001698:	2b00      	cmp	r3, #0
 800169a:	d109      	bne.n	80016b0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f7ff fb15 	bl	8000ccc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff ff67 	bl	8001588 <LL_ADC_IsDeepPowerDownEnabled>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d004      	beq.n	80016ca <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff ff4d 	bl	8001564 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff ff82 	bl	80015d8 <LL_ADC_IsInternalRegulatorEnabled>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d115      	bne.n	8001706 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff ff66 	bl	80015b0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80016e4:	4b83      	ldr	r3, [pc, #524]	; (80018f4 <HAL_ADC_Init+0x280>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	099b      	lsrs	r3, r3, #6
 80016ea:	4a83      	ldr	r2, [pc, #524]	; (80018f8 <HAL_ADC_Init+0x284>)
 80016ec:	fba2 2303 	umull	r2, r3, r2, r3
 80016f0:	099b      	lsrs	r3, r3, #6
 80016f2:	3301      	adds	r3, #1
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80016f8:	e002      	b.n	8001700 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	3b01      	subs	r3, #1
 80016fe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1f9      	bne.n	80016fa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff ff64 	bl	80015d8 <LL_ADC_IsInternalRegulatorEnabled>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d10d      	bne.n	8001732 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800171a:	f043 0210 	orr.w	r2, r3, #16
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001726:	f043 0201 	orr.w	r2, r3, #1
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff ff75 	bl	8001626 <LL_ADC_REG_IsConversionOngoing>
 800173c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001742:	f003 0310 	and.w	r3, r3, #16
 8001746:	2b00      	cmp	r3, #0
 8001748:	f040 80c7 	bne.w	80018da <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	2b00      	cmp	r3, #0
 8001750:	f040 80c3 	bne.w	80018da <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001758:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800175c:	f043 0202 	orr.w	r2, r3, #2
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff ff49 	bl	8001600 <LL_ADC_IsEnabled>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d110      	bne.n	8001796 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001774:	4861      	ldr	r0, [pc, #388]	; (80018fc <HAL_ADC_Init+0x288>)
 8001776:	f7ff ff43 	bl	8001600 <LL_ADC_IsEnabled>
 800177a:	4604      	mov	r4, r0
 800177c:	4860      	ldr	r0, [pc, #384]	; (8001900 <HAL_ADC_Init+0x28c>)
 800177e:	f7ff ff3f 	bl	8001600 <LL_ADC_IsEnabled>
 8001782:	4603      	mov	r3, r0
 8001784:	4323      	orrs	r3, r4
 8001786:	2b00      	cmp	r3, #0
 8001788:	d105      	bne.n	8001796 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	4619      	mov	r1, r3
 8001790:	485c      	ldr	r0, [pc, #368]	; (8001904 <HAL_ADC_Init+0x290>)
 8001792:	f7ff fdcf 	bl	8001334 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	7e5b      	ldrb	r3, [r3, #25]
 800179a:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017a0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80017a6:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80017ac:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017b4:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017b6:	4313      	orrs	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d106      	bne.n	80017d2 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c8:	3b01      	subs	r3, #1
 80017ca:	045b      	lsls	r3, r3, #17
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d009      	beq.n	80017ee <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017de:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e6:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	68da      	ldr	r2, [r3, #12]
 80017f4:	4b44      	ldr	r3, [pc, #272]	; (8001908 <HAL_ADC_Init+0x294>)
 80017f6:	4013      	ands	r3, r2
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	6812      	ldr	r2, [r2, #0]
 80017fc:	69b9      	ldr	r1, [r7, #24]
 80017fe:	430b      	orrs	r3, r1
 8001800:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff ff20 	bl	800164c <LL_ADC_INJ_IsConversionOngoing>
 800180c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d140      	bne.n	8001896 <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d13d      	bne.n	8001896 <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	7e1b      	ldrb	r3, [r3, #24]
 8001822:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001824:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800182c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800182e:	4313      	orrs	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800183c:	f023 0306 	bic.w	r3, r3, #6
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	6812      	ldr	r2, [r2, #0]
 8001844:	69b9      	ldr	r1, [r7, #24]
 8001846:	430b      	orrs	r3, r1
 8001848:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001850:	2b01      	cmp	r3, #1
 8001852:	d118      	bne.n	8001886 <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	691b      	ldr	r3, [r3, #16]
 800185a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800185e:	f023 0304 	bic.w	r3, r3, #4
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800186a:	4311      	orrs	r1, r2
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001870:	4311      	orrs	r1, r2
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001876:	430a      	orrs	r2, r1
 8001878:	431a      	orrs	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f042 0201 	orr.w	r2, r2, #1
 8001882:	611a      	str	r2, [r3, #16]
 8001884:	e007      	b.n	8001896 <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	691a      	ldr	r2, [r3, #16]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f022 0201 	bic.w	r2, r2, #1
 8001894:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	691b      	ldr	r3, [r3, #16]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d10c      	bne.n	80018b8 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a4:	f023 010f 	bic.w	r1, r3, #15
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	69db      	ldr	r3, [r3, #28]
 80018ac:	1e5a      	subs	r2, r3, #1
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	430a      	orrs	r2, r1
 80018b4:	631a      	str	r2, [r3, #48]	; 0x30
 80018b6:	e007      	b.n	80018c8 <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f022 020f 	bic.w	r2, r2, #15
 80018c6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018cc:	f023 0303 	bic.w	r3, r3, #3
 80018d0:	f043 0201 	orr.w	r2, r3, #1
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	659a      	str	r2, [r3, #88]	; 0x58
 80018d8:	e007      	b.n	80018ea <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018de:	f043 0210 	orr.w	r2, r3, #16
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80018ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3724      	adds	r7, #36	; 0x24
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd90      	pop	{r4, r7, pc}
 80018f4:	20000008 	.word	0x20000008
 80018f8:	053e2d63 	.word	0x053e2d63
 80018fc:	42028000 	.word	0x42028000
 8001900:	42028100 	.word	0x42028100
 8001904:	42028300 	.word	0x42028300
 8001908:	fff0c007 	.word	0xfff0c007

0800190c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800190c:	b590      	push	{r4, r7, lr}
 800190e:	b0b7      	sub	sp, #220	; 0xdc
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001916:	2300      	movs	r3, #0
 8001918:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800191c:	2300      	movs	r3, #0
 800191e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001926:	2b01      	cmp	r3, #1
 8001928:	d101      	bne.n	800192e <HAL_ADC_ConfigChannel+0x22>
 800192a:	2302      	movs	r3, #2
 800192c:	e3c1      	b.n	80020b2 <HAL_ADC_ConfigChannel+0x7a6>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2201      	movs	r2, #1
 8001932:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff fe73 	bl	8001626 <LL_ADC_REG_IsConversionOngoing>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	f040 83a6 	bne.w	8002094 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6818      	ldr	r0, [r3, #0]
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	6859      	ldr	r1, [r3, #4]
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	461a      	mov	r2, r3
 8001956:	f7ff fd89 	bl	800146c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff fe61 	bl	8001626 <LL_ADC_REG_IsConversionOngoing>
 8001964:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff fe6d 	bl	800164c <LL_ADC_INJ_IsConversionOngoing>
 8001972:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001976:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800197a:	2b00      	cmp	r3, #0
 800197c:	f040 81c1 	bne.w	8001d02 <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001980:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001984:	2b00      	cmp	r3, #0
 8001986:	f040 81bc 	bne.w	8001d02 <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001992:	d10f      	bne.n	80019b4 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6818      	ldr	r0, [r3, #0]
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2200      	movs	r2, #0
 800199e:	4619      	mov	r1, r3
 80019a0:	f7ff fd90 	bl	80014c4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff fd4a 	bl	8001446 <LL_ADC_SetSamplingTimeCommonConfig>
 80019b2:	e00e      	b.n	80019d2 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6818      	ldr	r0, [r3, #0]
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	6819      	ldr	r1, [r3, #0]
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	461a      	mov	r2, r3
 80019c2:	f7ff fd7f 	bl	80014c4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2100      	movs	r1, #0
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff fd3a 	bl	8001446 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	695a      	ldr	r2, [r3, #20]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	08db      	lsrs	r3, r3, #3
 80019de:	f003 0303 	and.w	r3, r3, #3
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	691b      	ldr	r3, [r3, #16]
 80019f0:	2b04      	cmp	r3, #4
 80019f2:	d00a      	beq.n	8001a0a <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6818      	ldr	r0, [r3, #0]
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	6919      	ldr	r1, [r3, #16]
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001a04:	f7ff fcca 	bl	800139c <LL_ADC_SetOffset>
 8001a08:	e17b      	b.n	8001d02 <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2100      	movs	r1, #0
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff fce7 	bl	80013e4 <LL_ADC_GetOffsetChannel>
 8001a16:	4603      	mov	r3, r0
 8001a18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d10a      	bne.n	8001a36 <HAL_ADC_ConfigChannel+0x12a>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2100      	movs	r1, #0
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff fcdc 	bl	80013e4 <LL_ADC_GetOffsetChannel>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	0e9b      	lsrs	r3, r3, #26
 8001a30:	f003 021f 	and.w	r2, r3, #31
 8001a34:	e01e      	b.n	8001a74 <HAL_ADC_ConfigChannel+0x168>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff fcd1 	bl	80013e4 <LL_ADC_GetOffsetChannel>
 8001a42:	4603      	mov	r3, r0
 8001a44:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a48:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001a4c:	fa93 f3a3 	rbit	r3, r3
 8001a50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a54:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001a58:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001a5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d101      	bne.n	8001a68 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 8001a64:	2320      	movs	r3, #32
 8001a66:	e004      	b.n	8001a72 <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 8001a68:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a6c:	fab3 f383 	clz	r3, r3
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d105      	bne.n	8001a8c <HAL_ADC_ConfigChannel+0x180>
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	0e9b      	lsrs	r3, r3, #26
 8001a86:	f003 031f 	and.w	r3, r3, #31
 8001a8a:	e018      	b.n	8001abe <HAL_ADC_ConfigChannel+0x1b2>
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a94:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001a98:	fa93 f3a3 	rbit	r3, r3
 8001a9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001aa0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001aa4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001aa8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d101      	bne.n	8001ab4 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8001ab0:	2320      	movs	r3, #32
 8001ab2:	e004      	b.n	8001abe <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8001ab4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001ab8:	fab3 f383 	clz	r3, r3
 8001abc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d106      	bne.n	8001ad0 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2100      	movs	r1, #0
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff fca0 	bl	8001410 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff fc84 	bl	80013e4 <LL_ADC_GetOffsetChannel>
 8001adc:	4603      	mov	r3, r0
 8001ade:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d10a      	bne.n	8001afc <HAL_ADC_ConfigChannel+0x1f0>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2101      	movs	r1, #1
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff fc79 	bl	80013e4 <LL_ADC_GetOffsetChannel>
 8001af2:	4603      	mov	r3, r0
 8001af4:	0e9b      	lsrs	r3, r3, #26
 8001af6:	f003 021f 	and.w	r2, r3, #31
 8001afa:	e01e      	b.n	8001b3a <HAL_ADC_ConfigChannel+0x22e>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2101      	movs	r1, #1
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff fc6e 	bl	80013e4 <LL_ADC_GetOffsetChannel>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001b12:	fa93 f3a3 	rbit	r3, r3
 8001b16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001b1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001b1e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001b22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 8001b2a:	2320      	movs	r3, #32
 8001b2c:	e004      	b.n	8001b38 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 8001b2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b32:	fab3 f383 	clz	r3, r3
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d105      	bne.n	8001b52 <HAL_ADC_ConfigChannel+0x246>
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	0e9b      	lsrs	r3, r3, #26
 8001b4c:	f003 031f 	and.w	r3, r3, #31
 8001b50:	e018      	b.n	8001b84 <HAL_ADC_ConfigChannel+0x278>
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001b5e:	fa93 f3a3 	rbit	r3, r3
 8001b62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001b66:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001b6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001b6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 8001b76:	2320      	movs	r3, #32
 8001b78:	e004      	b.n	8001b84 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 8001b7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b7e:	fab3 f383 	clz	r3, r3
 8001b82:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d106      	bne.n	8001b96 <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	2101      	movs	r1, #1
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff fc3d 	bl	8001410 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2102      	movs	r1, #2
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff fc21 	bl	80013e4 <LL_ADC_GetOffsetChannel>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d10a      	bne.n	8001bc2 <HAL_ADC_ConfigChannel+0x2b6>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2102      	movs	r1, #2
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff fc16 	bl	80013e4 <LL_ADC_GetOffsetChannel>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	0e9b      	lsrs	r3, r3, #26
 8001bbc:	f003 021f 	and.w	r2, r3, #31
 8001bc0:	e01e      	b.n	8001c00 <HAL_ADC_ConfigChannel+0x2f4>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2102      	movs	r1, #2
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff fc0b 	bl	80013e4 <LL_ADC_GetOffsetChannel>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001bd8:	fa93 f3a3 	rbit	r3, r3
 8001bdc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001be0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001be4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001be8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d101      	bne.n	8001bf4 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 8001bf0:	2320      	movs	r3, #32
 8001bf2:	e004      	b.n	8001bfe <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8001bf4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001bf8:	fab3 f383 	clz	r3, r3
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d105      	bne.n	8001c18 <HAL_ADC_ConfigChannel+0x30c>
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	0e9b      	lsrs	r3, r3, #26
 8001c12:	f003 031f 	and.w	r3, r3, #31
 8001c16:	e016      	b.n	8001c46 <HAL_ADC_ConfigChannel+0x33a>
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c24:	fa93 f3a3 	rbit	r3, r3
 8001c28:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001c2a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001c30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d101      	bne.n	8001c3c <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8001c38:	2320      	movs	r3, #32
 8001c3a:	e004      	b.n	8001c46 <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 8001c3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c40:	fab3 f383 	clz	r3, r3
 8001c44:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d106      	bne.n	8001c58 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	2102      	movs	r1, #2
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff fbdc 	bl	8001410 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2103      	movs	r1, #3
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff fbc0 	bl	80013e4 <LL_ADC_GetOffsetChannel>
 8001c64:	4603      	mov	r3, r0
 8001c66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d10a      	bne.n	8001c84 <HAL_ADC_ConfigChannel+0x378>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2103      	movs	r1, #3
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff fbb5 	bl	80013e4 <LL_ADC_GetOffsetChannel>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	0e9b      	lsrs	r3, r3, #26
 8001c7e:	f003 021f 	and.w	r2, r3, #31
 8001c82:	e017      	b.n	8001cb4 <HAL_ADC_ConfigChannel+0x3a8>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2103      	movs	r1, #3
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff fbaa 	bl	80013e4 <LL_ADC_GetOffsetChannel>
 8001c90:	4603      	mov	r3, r0
 8001c92:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c96:	fa93 f3a3 	rbit	r3, r3
 8001c9a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001c9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c9e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001ca0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 8001ca6:	2320      	movs	r3, #32
 8001ca8:	e003      	b.n	8001cb2 <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 8001caa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001cac:	fab3 f383 	clz	r3, r3
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d105      	bne.n	8001ccc <HAL_ADC_ConfigChannel+0x3c0>
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	0e9b      	lsrs	r3, r3, #26
 8001cc6:	f003 031f 	and.w	r3, r3, #31
 8001cca:	e011      	b.n	8001cf0 <HAL_ADC_ConfigChannel+0x3e4>
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001cd4:	fa93 f3a3 	rbit	r3, r3
 8001cd8:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001cda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001cdc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001cde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d101      	bne.n	8001ce8 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8001ce4:	2320      	movs	r3, #32
 8001ce6:	e003      	b.n	8001cf0 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8001ce8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cea:	fab3 f383 	clz	r3, r3
 8001cee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d106      	bne.n	8001d02 <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	2103      	movs	r1, #3
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff fb87 	bl	8001410 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7ff fc7a 	bl	8001600 <LL_ADC_IsEnabled>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f040 81c9 	bne.w	80020a6 <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6818      	ldr	r0, [r3, #0]
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	6819      	ldr	r1, [r3, #0]
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	461a      	mov	r2, r3
 8001d22:	f7ff fbfb 	bl	800151c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	4a8f      	ldr	r2, [pc, #572]	; (8001f68 <HAL_ADC_ConfigChannel+0x65c>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	f040 8131 	bne.w	8001f94 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d10b      	bne.n	8001d5a <HAL_ADC_ConfigChannel+0x44e>
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	0e9b      	lsrs	r3, r3, #26
 8001d48:	3301      	adds	r3, #1
 8001d4a:	f003 031f 	and.w	r3, r3, #31
 8001d4e:	2b09      	cmp	r3, #9
 8001d50:	bf94      	ite	ls
 8001d52:	2301      	movls	r3, #1
 8001d54:	2300      	movhi	r3, #0
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	e019      	b.n	8001d8e <HAL_ADC_ConfigChannel+0x482>
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d62:	fa93 f3a3 	rbit	r3, r3
 8001d66:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001d68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d6a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001d6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 8001d72:	2320      	movs	r3, #32
 8001d74:	e003      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 8001d76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d78:	fab3 f383 	clz	r3, r3
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	3301      	adds	r3, #1
 8001d80:	f003 031f 	and.w	r3, r3, #31
 8001d84:	2b09      	cmp	r3, #9
 8001d86:	bf94      	ite	ls
 8001d88:	2301      	movls	r3, #1
 8001d8a:	2300      	movhi	r3, #0
 8001d8c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d079      	beq.n	8001e86 <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d107      	bne.n	8001dae <HAL_ADC_ConfigChannel+0x4a2>
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	0e9b      	lsrs	r3, r3, #26
 8001da4:	3301      	adds	r3, #1
 8001da6:	069b      	lsls	r3, r3, #26
 8001da8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dac:	e015      	b.n	8001dda <HAL_ADC_ConfigChannel+0x4ce>
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001db6:	fa93 f3a3 	rbit	r3, r3
 8001dba:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001dbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dbe:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001dc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8001dc6:	2320      	movs	r3, #32
 8001dc8:	e003      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8001dca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dcc:	fab3 f383 	clz	r3, r3
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	069b      	lsls	r3, r3, #26
 8001dd6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d109      	bne.n	8001dfa <HAL_ADC_ConfigChannel+0x4ee>
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	0e9b      	lsrs	r3, r3, #26
 8001dec:	3301      	adds	r3, #1
 8001dee:	f003 031f 	and.w	r3, r3, #31
 8001df2:	2101      	movs	r1, #1
 8001df4:	fa01 f303 	lsl.w	r3, r1, r3
 8001df8:	e017      	b.n	8001e2a <HAL_ADC_ConfigChannel+0x51e>
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e02:	fa93 f3a3 	rbit	r3, r3
 8001e06:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001e08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e0a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001e0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 8001e12:	2320      	movs	r3, #32
 8001e14:	e003      	b.n	8001e1e <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 8001e16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e18:	fab3 f383 	clz	r3, r3
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	3301      	adds	r3, #1
 8001e20:	f003 031f 	and.w	r3, r3, #31
 8001e24:	2101      	movs	r1, #1
 8001e26:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2a:	ea42 0103 	orr.w	r1, r2, r3
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d10a      	bne.n	8001e50 <HAL_ADC_ConfigChannel+0x544>
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	0e9b      	lsrs	r3, r3, #26
 8001e40:	3301      	adds	r3, #1
 8001e42:	f003 021f 	and.w	r2, r3, #31
 8001e46:	4613      	mov	r3, r2
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	4413      	add	r3, r2
 8001e4c:	051b      	lsls	r3, r3, #20
 8001e4e:	e018      	b.n	8001e82 <HAL_ADC_ConfigChannel+0x576>
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e58:	fa93 f3a3 	rbit	r3, r3
 8001e5c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e60:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001e62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d101      	bne.n	8001e6c <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8001e68:	2320      	movs	r3, #32
 8001e6a:	e003      	b.n	8001e74 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8001e6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e6e:	fab3 f383 	clz	r3, r3
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	3301      	adds	r3, #1
 8001e76:	f003 021f 	and.w	r2, r3, #31
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	4413      	add	r3, r2
 8001e80:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e82:	430b      	orrs	r3, r1
 8001e84:	e081      	b.n	8001f8a <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d107      	bne.n	8001ea2 <HAL_ADC_ConfigChannel+0x596>
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	0e9b      	lsrs	r3, r3, #26
 8001e98:	3301      	adds	r3, #1
 8001e9a:	069b      	lsls	r3, r3, #26
 8001e9c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ea0:	e015      	b.n	8001ece <HAL_ADC_ConfigChannel+0x5c2>
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eaa:	fa93 f3a3 	rbit	r3, r3
 8001eae:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eb2:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d101      	bne.n	8001ebe <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 8001eba:	2320      	movs	r3, #32
 8001ebc:	e003      	b.n	8001ec6 <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 8001ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ec0:	fab3 f383 	clz	r3, r3
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	069b      	lsls	r3, r3, #26
 8001eca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d109      	bne.n	8001eee <HAL_ADC_ConfigChannel+0x5e2>
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	0e9b      	lsrs	r3, r3, #26
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	f003 031f 	and.w	r3, r3, #31
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8001eec:	e017      	b.n	8001f1e <HAL_ADC_ConfigChannel+0x612>
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef4:	6a3b      	ldr	r3, [r7, #32]
 8001ef6:	fa93 f3a3 	rbit	r3, r3
 8001efa:	61fb      	str	r3, [r7, #28]
  return result;
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 8001f06:	2320      	movs	r3, #32
 8001f08:	e003      	b.n	8001f12 <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0c:	fab3 f383 	clz	r3, r3
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	3301      	adds	r3, #1
 8001f14:	f003 031f 	and.w	r3, r3, #31
 8001f18:	2101      	movs	r1, #1
 8001f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1e:	ea42 0103 	orr.w	r1, r2, r3
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d10d      	bne.n	8001f4a <HAL_ADC_ConfigChannel+0x63e>
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	0e9b      	lsrs	r3, r3, #26
 8001f34:	3301      	adds	r3, #1
 8001f36:	f003 021f 	and.w	r2, r3, #31
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	4413      	add	r3, r2
 8001f40:	3b1e      	subs	r3, #30
 8001f42:	051b      	lsls	r3, r3, #20
 8001f44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f48:	e01e      	b.n	8001f88 <HAL_ADC_ConfigChannel+0x67c>
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	fa93 f3a3 	rbit	r3, r3
 8001f56:	613b      	str	r3, [r7, #16]
  return result;
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d104      	bne.n	8001f6c <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 8001f62:	2320      	movs	r3, #32
 8001f64:	e006      	b.n	8001f74 <HAL_ADC_ConfigChannel+0x668>
 8001f66:	bf00      	nop
 8001f68:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	fab3 f383 	clz	r3, r3
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	3301      	adds	r3, #1
 8001f76:	f003 021f 	and.w	r2, r3, #31
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	4413      	add	r3, r2
 8001f80:	3b1e      	subs	r3, #30
 8001f82:	051b      	lsls	r3, r3, #20
 8001f84:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f88:	430b      	orrs	r3, r1
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	6892      	ldr	r2, [r2, #8]
 8001f8e:	4619      	mov	r1, r3
 8001f90:	f7ff fa98 	bl	80014c4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	4b48      	ldr	r3, [pc, #288]	; (80020bc <HAL_ADC_ConfigChannel+0x7b0>)
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f000 8082 	beq.w	80020a6 <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fa2:	4847      	ldr	r0, [pc, #284]	; (80020c0 <HAL_ADC_ConfigChannel+0x7b4>)
 8001fa4:	f7ff f9ec 	bl	8001380 <LL_ADC_GetCommonPathInternalCh>
 8001fa8:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001fac:	4845      	ldr	r0, [pc, #276]	; (80020c4 <HAL_ADC_ConfigChannel+0x7b8>)
 8001fae:	f7ff fb27 	bl	8001600 <LL_ADC_IsEnabled>
 8001fb2:	4604      	mov	r4, r0
 8001fb4:	4844      	ldr	r0, [pc, #272]	; (80020c8 <HAL_ADC_ConfigChannel+0x7bc>)
 8001fb6:	f7ff fb23 	bl	8001600 <LL_ADC_IsEnabled>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	4323      	orrs	r3, r4
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d15e      	bne.n	8002080 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a41      	ldr	r2, [pc, #260]	; (80020cc <HAL_ADC_ConfigChannel+0x7c0>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d127      	bne.n	800201c <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001fcc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001fd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d121      	bne.n	800201c <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a39      	ldr	r2, [pc, #228]	; (80020c4 <HAL_ADC_ConfigChannel+0x7b8>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d161      	bne.n	80020a6 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fe2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001fe6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001fea:	4619      	mov	r1, r3
 8001fec:	4834      	ldr	r0, [pc, #208]	; (80020c0 <HAL_ADC_ConfigChannel+0x7b4>)
 8001fee:	f7ff f9b4 	bl	800135a <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ff2:	4b37      	ldr	r3, [pc, #220]	; (80020d0 <HAL_ADC_ConfigChannel+0x7c4>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	099b      	lsrs	r3, r3, #6
 8001ff8:	4a36      	ldr	r2, [pc, #216]	; (80020d4 <HAL_ADC_ConfigChannel+0x7c8>)
 8001ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffe:	099b      	lsrs	r3, r3, #6
 8002000:	1c5a      	adds	r2, r3, #1
 8002002:	4613      	mov	r3, r2
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	4413      	add	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 800200a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800200c:	e002      	b.n	8002014 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	3b01      	subs	r3, #1
 8002012:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1f9      	bne.n	800200e <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800201a:	e044      	b.n	80020a6 <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a2d      	ldr	r2, [pc, #180]	; (80020d8 <HAL_ADC_ConfigChannel+0x7cc>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d113      	bne.n	800204e <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002026:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800202a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d10d      	bne.n	800204e <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a23      	ldr	r2, [pc, #140]	; (80020c4 <HAL_ADC_ConfigChannel+0x7b8>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d134      	bne.n	80020a6 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800203c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002040:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002044:	4619      	mov	r1, r3
 8002046:	481e      	ldr	r0, [pc, #120]	; (80020c0 <HAL_ADC_ConfigChannel+0x7b4>)
 8002048:	f7ff f987 	bl	800135a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800204c:	e02b      	b.n	80020a6 <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a22      	ldr	r2, [pc, #136]	; (80020dc <HAL_ADC_ConfigChannel+0x7d0>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d126      	bne.n	80020a6 <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002058:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800205c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d120      	bne.n	80020a6 <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a16      	ldr	r2, [pc, #88]	; (80020c4 <HAL_ADC_ConfigChannel+0x7b8>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d11b      	bne.n	80020a6 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800206e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002072:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002076:	4619      	mov	r1, r3
 8002078:	4811      	ldr	r0, [pc, #68]	; (80020c0 <HAL_ADC_ConfigChannel+0x7b4>)
 800207a:	f7ff f96e 	bl	800135a <LL_ADC_SetCommonPathInternalCh>
 800207e:	e012      	b.n	80020a6 <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002084:	f043 0220 	orr.w	r2, r3, #32
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002092:	e008      	b.n	80020a6 <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002098:	f043 0220 	orr.w	r2, r3, #32
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80020ae:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	37dc      	adds	r7, #220	; 0xdc
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd90      	pop	{r4, r7, pc}
 80020ba:	bf00      	nop
 80020bc:	80080000 	.word	0x80080000
 80020c0:	42028300 	.word	0x42028300
 80020c4:	42028000 	.word	0x42028000
 80020c8:	42028100 	.word	0x42028100
 80020cc:	c7520000 	.word	0xc7520000
 80020d0:	20000008 	.word	0x20000008
 80020d4:	053e2d63 	.word	0x053e2d63
 80020d8:	cb840000 	.word	0xcb840000
 80020dc:	80000001 	.word	0x80000001

080020e0 <LL_ADC_IsEnabled>:
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f003 0301 	and.w	r3, r3, #1
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d101      	bne.n	80020f8 <LL_ADC_IsEnabled+0x18>
 80020f4:	2301      	movs	r3, #1
 80020f6:	e000      	b.n	80020fa <LL_ADC_IsEnabled+0x1a>
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <LL_ADC_REG_IsConversionOngoing>:
{
 8002106:	b480      	push	{r7}
 8002108:	b083      	sub	sp, #12
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f003 0304 	and.w	r3, r3, #4
 8002116:	2b04      	cmp	r3, #4
 8002118:	d101      	bne.n	800211e <LL_ADC_REG_IsConversionOngoing+0x18>
 800211a:	2301      	movs	r3, #1
 800211c:	e000      	b.n	8002120 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800211e:	2300      	movs	r3, #0
}
 8002120:	4618      	mov	r0, r3
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800212c:	b590      	push	{r4, r7, lr}
 800212e:	b0a1      	sub	sp, #132	; 0x84
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002136:	2300      	movs	r3, #0
 8002138:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002142:	2b01      	cmp	r3, #1
 8002144:	d101      	bne.n	800214a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002146:	2302      	movs	r3, #2
 8002148:	e089      	b.n	800225e <HAL_ADCEx_MultiModeConfigChannel+0x132>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2201      	movs	r2, #1
 800214e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002152:	2300      	movs	r3, #0
 8002154:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002156:	2300      	movs	r3, #0
 8002158:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a42      	ldr	r2, [pc, #264]	; (8002268 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d102      	bne.n	800216a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002164:	4b41      	ldr	r3, [pc, #260]	; (800226c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002166:	60fb      	str	r3, [r7, #12]
 8002168:	e001      	b.n	800216e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800216a:	2300      	movs	r3, #0
 800216c:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d10b      	bne.n	800218c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002178:	f043 0220 	orr.w	r2, r3, #32
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e068      	b.n	800225e <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff ffb9 	bl	8002106 <LL_ADC_REG_IsConversionOngoing>
 8002194:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff ffb3 	bl	8002106 <LL_ADC_REG_IsConversionOngoing>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d14a      	bne.n	800223c <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80021a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d147      	bne.n	800223c <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80021ac:	4b30      	ldr	r3, [pc, #192]	; (8002270 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80021ae:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d027      	beq.n	8002208 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80021b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	6859      	ldr	r1, [r3, #4]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021ca:	035b      	lsls	r3, r3, #13
 80021cc:	430b      	orrs	r3, r1
 80021ce:	431a      	orrs	r2, r3
 80021d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021d2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021d4:	4824      	ldr	r0, [pc, #144]	; (8002268 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80021d6:	f7ff ff83 	bl	80020e0 <LL_ADC_IsEnabled>
 80021da:	4604      	mov	r4, r0
 80021dc:	4823      	ldr	r0, [pc, #140]	; (800226c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80021de:	f7ff ff7f 	bl	80020e0 <LL_ADC_IsEnabled>
 80021e2:	4603      	mov	r3, r0
 80021e4:	4323      	orrs	r3, r4
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d132      	bne.n	8002250 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80021ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80021f2:	f023 030f 	bic.w	r3, r3, #15
 80021f6:	683a      	ldr	r2, [r7, #0]
 80021f8:	6811      	ldr	r1, [r2, #0]
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	6892      	ldr	r2, [r2, #8]
 80021fe:	430a      	orrs	r2, r1
 8002200:	431a      	orrs	r2, r3
 8002202:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002204:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002206:	e023      	b.n	8002250 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002208:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002210:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002212:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002214:	4814      	ldr	r0, [pc, #80]	; (8002268 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002216:	f7ff ff63 	bl	80020e0 <LL_ADC_IsEnabled>
 800221a:	4604      	mov	r4, r0
 800221c:	4813      	ldr	r0, [pc, #76]	; (800226c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800221e:	f7ff ff5f 	bl	80020e0 <LL_ADC_IsEnabled>
 8002222:	4603      	mov	r3, r0
 8002224:	4323      	orrs	r3, r4
 8002226:	2b00      	cmp	r3, #0
 8002228:	d112      	bne.n	8002250 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800222a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002232:	f023 030f 	bic.w	r3, r3, #15
 8002236:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002238:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800223a:	e009      	b.n	8002250 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002240:	f043 0220 	orr.w	r2, r3, #32
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800224e:	e000      	b.n	8002252 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002250:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800225a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800225e:	4618      	mov	r0, r3
 8002260:	3784      	adds	r7, #132	; 0x84
 8002262:	46bd      	mov	sp, r7
 8002264:	bd90      	pop	{r4, r7, pc}
 8002266:	bf00      	nop
 8002268:	42028000 	.word	0x42028000
 800226c:	42028100 	.word	0x42028100
 8002270:	42028300 	.word	0x42028300

08002274 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002284:	4b0c      	ldr	r3, [pc, #48]	; (80022b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800228a:	68ba      	ldr	r2, [r7, #8]
 800228c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002290:	4013      	ands	r3, r2
 8002292:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800229c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022a6:	4a04      	ldr	r2, [pc, #16]	; (80022b8 <__NVIC_SetPriorityGrouping+0x44>)
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	60d3      	str	r3, [r2, #12]
}
 80022ac:	bf00      	nop
 80022ae:	3714      	adds	r7, #20
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr
 80022b8:	e000ed00 	.word	0xe000ed00

080022bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022c0:	4b04      	ldr	r3, [pc, #16]	; (80022d4 <__NVIC_GetPriorityGrouping+0x18>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	0a1b      	lsrs	r3, r3, #8
 80022c6:	f003 0307 	and.w	r3, r3, #7
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	e000ed00 	.word	0xe000ed00

080022d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	4603      	mov	r3, r0
 80022e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	db0b      	blt.n	8002302 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ea:	79fb      	ldrb	r3, [r7, #7]
 80022ec:	f003 021f 	and.w	r2, r3, #31
 80022f0:	4907      	ldr	r1, [pc, #28]	; (8002310 <__NVIC_EnableIRQ+0x38>)
 80022f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f6:	095b      	lsrs	r3, r3, #5
 80022f8:	2001      	movs	r0, #1
 80022fa:	fa00 f202 	lsl.w	r2, r0, r2
 80022fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002302:	bf00      	nop
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	e000e100 	.word	0xe000e100

08002314 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	4603      	mov	r3, r0
 800231c:	6039      	str	r1, [r7, #0]
 800231e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002324:	2b00      	cmp	r3, #0
 8002326:	db0a      	blt.n	800233e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	b2da      	uxtb	r2, r3
 800232c:	490c      	ldr	r1, [pc, #48]	; (8002360 <__NVIC_SetPriority+0x4c>)
 800232e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002332:	0152      	lsls	r2, r2, #5
 8002334:	b2d2      	uxtb	r2, r2
 8002336:	440b      	add	r3, r1
 8002338:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800233c:	e00a      	b.n	8002354 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	b2da      	uxtb	r2, r3
 8002342:	4908      	ldr	r1, [pc, #32]	; (8002364 <__NVIC_SetPriority+0x50>)
 8002344:	79fb      	ldrb	r3, [r7, #7]
 8002346:	f003 030f 	and.w	r3, r3, #15
 800234a:	3b04      	subs	r3, #4
 800234c:	0152      	lsls	r2, r2, #5
 800234e:	b2d2      	uxtb	r2, r2
 8002350:	440b      	add	r3, r1
 8002352:	761a      	strb	r2, [r3, #24]
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	e000e100 	.word	0xe000e100
 8002364:	e000ed00 	.word	0xe000ed00

08002368 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002368:	b480      	push	{r7}
 800236a:	b089      	sub	sp, #36	; 0x24
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f003 0307 	and.w	r3, r3, #7
 800237a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	f1c3 0307 	rsb	r3, r3, #7
 8002382:	2b03      	cmp	r3, #3
 8002384:	bf28      	it	cs
 8002386:	2303      	movcs	r3, #3
 8002388:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	3303      	adds	r3, #3
 800238e:	2b06      	cmp	r3, #6
 8002390:	d902      	bls.n	8002398 <NVIC_EncodePriority+0x30>
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	3b04      	subs	r3, #4
 8002396:	e000      	b.n	800239a <NVIC_EncodePriority+0x32>
 8002398:	2300      	movs	r3, #0
 800239a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800239c:	f04f 32ff 	mov.w	r2, #4294967295
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	43da      	mvns	r2, r3
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	401a      	ands	r2, r3
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023b0:	f04f 31ff 	mov.w	r1, #4294967295
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ba:	43d9      	mvns	r1, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c0:	4313      	orrs	r3, r2
         );
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3724      	adds	r7, #36	; 0x24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
	...

080023d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	3b01      	subs	r3, #1
 80023dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023e0:	d301      	bcc.n	80023e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023e2:	2301      	movs	r3, #1
 80023e4:	e00f      	b.n	8002406 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023e6:	4a0a      	ldr	r2, [pc, #40]	; (8002410 <SysTick_Config+0x40>)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3b01      	subs	r3, #1
 80023ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023ee:	2107      	movs	r1, #7
 80023f0:	f04f 30ff 	mov.w	r0, #4294967295
 80023f4:	f7ff ff8e 	bl	8002314 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023f8:	4b05      	ldr	r3, [pc, #20]	; (8002410 <SysTick_Config+0x40>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023fe:	4b04      	ldr	r3, [pc, #16]	; (8002410 <SysTick_Config+0x40>)
 8002400:	2207      	movs	r2, #7
 8002402:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	e000e010 	.word	0xe000e010

08002414 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f7ff ff29 	bl	8002274 <__NVIC_SetPriorityGrouping>
}
 8002422:	bf00      	nop
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b086      	sub	sp, #24
 800242e:	af00      	add	r7, sp, #0
 8002430:	4603      	mov	r3, r0
 8002432:	60b9      	str	r1, [r7, #8]
 8002434:	607a      	str	r2, [r7, #4]
 8002436:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002438:	f7ff ff40 	bl	80022bc <__NVIC_GetPriorityGrouping>
 800243c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	68b9      	ldr	r1, [r7, #8]
 8002442:	6978      	ldr	r0, [r7, #20]
 8002444:	f7ff ff90 	bl	8002368 <NVIC_EncodePriority>
 8002448:	4602      	mov	r2, r0
 800244a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800244e:	4611      	mov	r1, r2
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff ff5f 	bl	8002314 <__NVIC_SetPriority>
}
 8002456:	bf00      	nop
 8002458:	3718      	adds	r7, #24
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800245e:	b580      	push	{r7, lr}
 8002460:	b082      	sub	sp, #8
 8002462:	af00      	add	r7, sp, #0
 8002464:	4603      	mov	r3, r0
 8002466:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff ff33 	bl	80022d8 <__NVIC_EnableIRQ>
}
 8002472:	bf00      	nop
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b082      	sub	sp, #8
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f7ff ffa4 	bl	80023d0 <SysTick_Config>
 8002488:	4603      	mov	r3, r0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
	...

08002494 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002494:	b480      	push	{r7}
 8002496:	b087      	sub	sp, #28
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 800249e:	2300      	movs	r3, #0
 80024a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80024a2:	e158      	b.n	8002756 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	2101      	movs	r1, #1
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	fa01 f303 	lsl.w	r3, r1, r3
 80024b0:	4013      	ands	r3, r2
 80024b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f000 814a 	beq.w	8002750 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f003 0303 	and.w	r3, r3, #3
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d005      	beq.n	80024d4 <HAL_GPIO_Init+0x40>
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f003 0303 	and.w	r3, r3, #3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d130      	bne.n	8002536 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	2203      	movs	r2, #3
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	43db      	mvns	r3, r3
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	4013      	ands	r3, r2
 80024ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	68da      	ldr	r2, [r3, #12]
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800250a:	2201      	movs	r2, #1
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	43db      	mvns	r3, r3
 8002514:	693a      	ldr	r2, [r7, #16]
 8002516:	4013      	ands	r3, r2
 8002518:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	091b      	lsrs	r3, r3, #4
 8002520:	f003 0201 	and.w	r2, r3, #1
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	4313      	orrs	r3, r2
 800252e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f003 0303 	and.w	r3, r3, #3
 800253e:	2b03      	cmp	r3, #3
 8002540:	d017      	beq.n	8002572 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	2203      	movs	r2, #3
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	43db      	mvns	r3, r3
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	4013      	ands	r3, r2
 8002558:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	689a      	ldr	r2, [r3, #8]
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	fa02 f303 	lsl.w	r3, r2, r3
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	4313      	orrs	r3, r2
 800256a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f003 0303 	and.w	r3, r3, #3
 800257a:	2b02      	cmp	r3, #2
 800257c:	d123      	bne.n	80025c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	08da      	lsrs	r2, r3, #3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	3208      	adds	r2, #8
 8002586:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800258a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	f003 0307 	and.w	r3, r3, #7
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	220f      	movs	r2, #15
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	43db      	mvns	r3, r3
 800259c:	693a      	ldr	r2, [r7, #16]
 800259e:	4013      	ands	r3, r2
 80025a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	691a      	ldr	r2, [r3, #16]
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	f003 0307 	and.w	r3, r3, #7
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	08da      	lsrs	r2, r3, #3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	3208      	adds	r2, #8
 80025c0:	6939      	ldr	r1, [r7, #16]
 80025c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	2203      	movs	r2, #3
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	43db      	mvns	r3, r3
 80025d8:	693a      	ldr	r2, [r7, #16]
 80025da:	4013      	ands	r3, r2
 80025dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f003 0203 	and.w	r2, r3, #3
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002602:	2b00      	cmp	r3, #0
 8002604:	f000 80a4 	beq.w	8002750 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8002608:	4a5a      	ldr	r2, [pc, #360]	; (8002774 <HAL_GPIO_Init+0x2e0>)
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	089b      	lsrs	r3, r3, #2
 800260e:	3318      	adds	r3, #24
 8002610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002614:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	f003 0303 	and.w	r3, r3, #3
 800261c:	00db      	lsls	r3, r3, #3
 800261e:	220f      	movs	r2, #15
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	43db      	mvns	r3, r3
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	4013      	ands	r3, r2
 800262a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4a52      	ldr	r2, [pc, #328]	; (8002778 <HAL_GPIO_Init+0x2e4>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d025      	beq.n	8002680 <HAL_GPIO_Init+0x1ec>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4a51      	ldr	r2, [pc, #324]	; (800277c <HAL_GPIO_Init+0x2e8>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d01f      	beq.n	800267c <HAL_GPIO_Init+0x1e8>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	4a50      	ldr	r2, [pc, #320]	; (8002780 <HAL_GPIO_Init+0x2ec>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d019      	beq.n	8002678 <HAL_GPIO_Init+0x1e4>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4a4f      	ldr	r2, [pc, #316]	; (8002784 <HAL_GPIO_Init+0x2f0>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d013      	beq.n	8002674 <HAL_GPIO_Init+0x1e0>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4a4e      	ldr	r2, [pc, #312]	; (8002788 <HAL_GPIO_Init+0x2f4>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d00d      	beq.n	8002670 <HAL_GPIO_Init+0x1dc>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4a4d      	ldr	r2, [pc, #308]	; (800278c <HAL_GPIO_Init+0x2f8>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d007      	beq.n	800266c <HAL_GPIO_Init+0x1d8>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a4c      	ldr	r2, [pc, #304]	; (8002790 <HAL_GPIO_Init+0x2fc>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d101      	bne.n	8002668 <HAL_GPIO_Init+0x1d4>
 8002664:	2306      	movs	r3, #6
 8002666:	e00c      	b.n	8002682 <HAL_GPIO_Init+0x1ee>
 8002668:	2307      	movs	r3, #7
 800266a:	e00a      	b.n	8002682 <HAL_GPIO_Init+0x1ee>
 800266c:	2305      	movs	r3, #5
 800266e:	e008      	b.n	8002682 <HAL_GPIO_Init+0x1ee>
 8002670:	2304      	movs	r3, #4
 8002672:	e006      	b.n	8002682 <HAL_GPIO_Init+0x1ee>
 8002674:	2303      	movs	r3, #3
 8002676:	e004      	b.n	8002682 <HAL_GPIO_Init+0x1ee>
 8002678:	2302      	movs	r3, #2
 800267a:	e002      	b.n	8002682 <HAL_GPIO_Init+0x1ee>
 800267c:	2301      	movs	r3, #1
 800267e:	e000      	b.n	8002682 <HAL_GPIO_Init+0x1ee>
 8002680:	2300      	movs	r3, #0
 8002682:	697a      	ldr	r2, [r7, #20]
 8002684:	f002 0203 	and.w	r2, r2, #3
 8002688:	00d2      	lsls	r2, r2, #3
 800268a:	4093      	lsls	r3, r2
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	4313      	orrs	r3, r2
 8002690:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8002692:	4938      	ldr	r1, [pc, #224]	; (8002774 <HAL_GPIO_Init+0x2e0>)
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	089b      	lsrs	r3, r3, #2
 8002698:	3318      	adds	r3, #24
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026a0:	4b34      	ldr	r3, [pc, #208]	; (8002774 <HAL_GPIO_Init+0x2e0>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	43db      	mvns	r3, r3
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	4013      	ands	r3, r2
 80026ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d003      	beq.n	80026c4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026c4:	4a2b      	ldr	r2, [pc, #172]	; (8002774 <HAL_GPIO_Init+0x2e0>)
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80026ca:	4b2a      	ldr	r3, [pc, #168]	; (8002774 <HAL_GPIO_Init+0x2e0>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	43db      	mvns	r3, r3
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	4013      	ands	r3, r2
 80026d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d003      	beq.n	80026ee <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80026ee:	4a21      	ldr	r2, [pc, #132]	; (8002774 <HAL_GPIO_Init+0x2e0>)
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80026f4:	4b1f      	ldr	r3, [pc, #124]	; (8002774 <HAL_GPIO_Init+0x2e0>)
 80026f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	43db      	mvns	r3, r3
 8002700:	693a      	ldr	r2, [r7, #16]
 8002702:	4013      	ands	r3, r2
 8002704:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d003      	beq.n	800271a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	4313      	orrs	r3, r2
 8002718:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800271a:	4a16      	ldr	r2, [pc, #88]	; (8002774 <HAL_GPIO_Init+0x2e0>)
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 8002722:	4b14      	ldr	r3, [pc, #80]	; (8002774 <HAL_GPIO_Init+0x2e0>)
 8002724:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002728:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	43db      	mvns	r3, r3
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	4013      	ands	r3, r2
 8002732:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d003      	beq.n	8002748 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	4313      	orrs	r3, r2
 8002746:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002748:	4a0a      	ldr	r2, [pc, #40]	; (8002774 <HAL_GPIO_Init+0x2e0>)
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	3301      	adds	r3, #1
 8002754:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	fa22 f303 	lsr.w	r3, r2, r3
 8002760:	2b00      	cmp	r3, #0
 8002762:	f47f ae9f 	bne.w	80024a4 <HAL_GPIO_Init+0x10>
  }
}
 8002766:	bf00      	nop
 8002768:	bf00      	nop
 800276a:	371c      	adds	r7, #28
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	4002f400 	.word	0x4002f400
 8002778:	42020000 	.word	0x42020000
 800277c:	42020400 	.word	0x42020400
 8002780:	42020800 	.word	0x42020800
 8002784:	42020c00 	.word	0x42020c00
 8002788:	42021000 	.word	0x42021000
 800278c:	42021400 	.word	0x42021400
 8002790:	42021800 	.word	0x42021800

08002794 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	460b      	mov	r3, r1
 800279e:	807b      	strh	r3, [r7, #2]
 80027a0:	4613      	mov	r3, r2
 80027a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027a4:	787b      	ldrb	r3, [r7, #1]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d003      	beq.n	80027b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027aa:	887a      	ldrh	r2, [r7, #2]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027b0:	e002      	b.n	80027b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027b2:	887a      	ldrh	r2, [r7, #2]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027b8:	bf00      	nop
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e0c0      	b.n	8002958 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d106      	bne.n	80027f0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f7fe fb8a 	bl	8000f04 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2203      	movs	r2, #3
 80027f4:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f003 fbf3 	bl	8005fe8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002802:	2300      	movs	r3, #0
 8002804:	73fb      	strb	r3, [r7, #15]
 8002806:	e03e      	b.n	8002886 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002808:	7bfa      	ldrb	r2, [r7, #15]
 800280a:	6879      	ldr	r1, [r7, #4]
 800280c:	4613      	mov	r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	4413      	add	r3, r2
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	440b      	add	r3, r1
 8002816:	3311      	adds	r3, #17
 8002818:	2201      	movs	r2, #1
 800281a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800281c:	7bfa      	ldrb	r2, [r7, #15]
 800281e:	6879      	ldr	r1, [r7, #4]
 8002820:	4613      	mov	r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	4413      	add	r3, r2
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	440b      	add	r3, r1
 800282a:	3310      	adds	r3, #16
 800282c:	7bfa      	ldrb	r2, [r7, #15]
 800282e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002830:	7bfa      	ldrb	r2, [r7, #15]
 8002832:	6879      	ldr	r1, [r7, #4]
 8002834:	4613      	mov	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4413      	add	r3, r2
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	440b      	add	r3, r1
 800283e:	3313      	adds	r3, #19
 8002840:	2200      	movs	r2, #0
 8002842:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002844:	7bfa      	ldrb	r2, [r7, #15]
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	4613      	mov	r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	4413      	add	r3, r2
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	440b      	add	r3, r1
 8002852:	3320      	adds	r3, #32
 8002854:	2200      	movs	r2, #0
 8002856:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002858:	7bfa      	ldrb	r2, [r7, #15]
 800285a:	6879      	ldr	r1, [r7, #4]
 800285c:	4613      	mov	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4413      	add	r3, r2
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	440b      	add	r3, r1
 8002866:	3324      	adds	r3, #36	; 0x24
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800286c:	7bfb      	ldrb	r3, [r7, #15]
 800286e:	6879      	ldr	r1, [r7, #4]
 8002870:	1c5a      	adds	r2, r3, #1
 8002872:	4613      	mov	r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	4413      	add	r3, r2
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	440b      	add	r3, r1
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002880:	7bfb      	ldrb	r3, [r7, #15]
 8002882:	3301      	adds	r3, #1
 8002884:	73fb      	strb	r3, [r7, #15]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	791b      	ldrb	r3, [r3, #4]
 800288a:	7bfa      	ldrb	r2, [r7, #15]
 800288c:	429a      	cmp	r2, r3
 800288e:	d3bb      	bcc.n	8002808 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002890:	2300      	movs	r3, #0
 8002892:	73fb      	strb	r3, [r7, #15]
 8002894:	e044      	b.n	8002920 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002896:	7bfa      	ldrb	r2, [r7, #15]
 8002898:	6879      	ldr	r1, [r7, #4]
 800289a:	4613      	mov	r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	4413      	add	r3, r2
 80028a0:	00db      	lsls	r3, r3, #3
 80028a2:	440b      	add	r3, r1
 80028a4:	f203 1351 	addw	r3, r3, #337	; 0x151
 80028a8:	2200      	movs	r2, #0
 80028aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80028ac:	7bfa      	ldrb	r2, [r7, #15]
 80028ae:	6879      	ldr	r1, [r7, #4]
 80028b0:	4613      	mov	r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	4413      	add	r3, r2
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	440b      	add	r3, r1
 80028ba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80028be:	7bfa      	ldrb	r2, [r7, #15]
 80028c0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80028c2:	7bfa      	ldrb	r2, [r7, #15]
 80028c4:	6879      	ldr	r1, [r7, #4]
 80028c6:	4613      	mov	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	4413      	add	r3, r2
 80028cc:	00db      	lsls	r3, r3, #3
 80028ce:	440b      	add	r3, r1
 80028d0:	f203 1353 	addw	r3, r3, #339	; 0x153
 80028d4:	2200      	movs	r2, #0
 80028d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80028d8:	7bfa      	ldrb	r2, [r7, #15]
 80028da:	6879      	ldr	r1, [r7, #4]
 80028dc:	4613      	mov	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	4413      	add	r3, r2
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	440b      	add	r3, r1
 80028e6:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80028ea:	2200      	movs	r2, #0
 80028ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80028ee:	7bfa      	ldrb	r2, [r7, #15]
 80028f0:	6879      	ldr	r1, [r7, #4]
 80028f2:	4613      	mov	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	4413      	add	r3, r2
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	440b      	add	r3, r1
 80028fc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002904:	7bfa      	ldrb	r2, [r7, #15]
 8002906:	6879      	ldr	r1, [r7, #4]
 8002908:	4613      	mov	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	4413      	add	r3, r2
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	440b      	add	r3, r1
 8002912:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002916:	2200      	movs	r2, #0
 8002918:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800291a:	7bfb      	ldrb	r3, [r7, #15]
 800291c:	3301      	adds	r3, #1
 800291e:	73fb      	strb	r3, [r7, #15]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	791b      	ldrb	r3, [r3, #4]
 8002924:	7bfa      	ldrb	r2, [r7, #15]
 8002926:	429a      	cmp	r2, r3
 8002928:	d3b5      	bcc.n	8002896 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6818      	ldr	r0, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	3304      	adds	r3, #4
 8002932:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002936:	f003 fb72 	bl	800601e <USB_DevInit>

  hpcd->USB_Address = 0U;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	7a9b      	ldrb	r3, [r3, #10]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d102      	bne.n	8002956 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f000 f805 	bl	8002960 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	3710      	adds	r7, #16
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002960:	b480      	push	{r7}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2201      	movs	r2, #1
 8002972:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002984:	b29b      	uxth	r3, r3
 8002986:	f043 0301 	orr.w	r3, r3, #1
 800298a:	b29a      	uxth	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002998:	b29b      	uxth	r3, r3
 800299a:	f043 0302 	orr.w	r3, r3, #2
 800299e:	b29a      	uxth	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3714      	adds	r7, #20
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029b8:	4b05      	ldr	r3, [pc, #20]	; (80029d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a04      	ldr	r2, [pc, #16]	; (80029d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80029be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029c2:	6013      	str	r3, [r2, #0]
}
 80029c4:	bf00      	nop
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	40007000 	.word	0x40007000

080029d4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80029d8:	4b04      	ldr	r3, [pc, #16]	; (80029ec <HAL_PWREx_GetVoltageRange+0x18>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	40007000 	.word	0x40007000

080029f0 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 80029f8:	4b27      	ldr	r3, [pc, #156]	; (8002a98 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a00:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8002a02:	f000 f861 	bl	8002ac8 <HAL_PWREx_SMPS_GetEffectiveMode>
 8002a06:	4603      	mov	r3, r0
 8002a08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a0c:	d101      	bne.n	8002a12 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e03e      	b.n	8002a90 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8002a12:	4b21      	ldr	r3, [pc, #132]	; (8002a98 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a1e:	d101      	bne.n	8002a24 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e035      	b.n	8002a90 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8002a24:	68ba      	ldr	r2, [r7, #8]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d101      	bne.n	8002a30 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	e02f      	b.n	8002a90 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002a30:	4b19      	ldr	r3, [pc, #100]	; (8002a98 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8002a38:	4917      	ldr	r1, [pc, #92]	; (8002a98 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8002a40:	4b16      	ldr	r3, [pc, #88]	; (8002a9c <HAL_PWREx_ControlVoltageScaling+0xac>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	095b      	lsrs	r3, r3, #5
 8002a46:	4a16      	ldr	r2, [pc, #88]	; (8002aa0 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8002a48:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4c:	09db      	lsrs	r3, r3, #7
 8002a4e:	2232      	movs	r2, #50	; 0x32
 8002a50:	fb02 f303 	mul.w	r3, r2, r3
 8002a54:	4a13      	ldr	r2, [pc, #76]	; (8002aa4 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8002a56:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5a:	08db      	lsrs	r3, r3, #3
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a60:	e002      	b.n	8002a68 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	3b01      	subs	r3, #1
 8002a66:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a68:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002a6a:	695b      	ldr	r3, [r3, #20]
 8002a6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a74:	d102      	bne.n	8002a7c <HAL_PWREx_ControlVoltageScaling+0x8c>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d1f2      	bne.n	8002a62 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a7c:	4b06      	ldr	r3, [pc, #24]	; (8002a98 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002a7e:	695b      	ldr	r3, [r3, #20]
 8002a80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a88:	d101      	bne.n	8002a8e <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e000      	b.n	8002a90 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3710      	adds	r7, #16
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	40007000 	.word	0x40007000
 8002a9c:	20000008 	.word	0x20000008
 8002aa0:	0a7c5ac5 	.word	0x0a7c5ac5
 8002aa4:	cccccccd 	.word	0xcccccccd

08002aa8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002aac:	4b05      	ldr	r3, [pc, #20]	; (8002ac4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	4a04      	ldr	r2, [pc, #16]	; (8002ac4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002ab2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ab6:	6053      	str	r3, [r2, #4]
}
 8002ab8:	bf00      	nop
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	40007000 	.word	0x40007000

08002ac8 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8002ace:	4b0f      	ldr	r3, [pc, #60]	; (8002b0c <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8002ade:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ae2:	607b      	str	r3, [r7, #4]
 8002ae4:	e00a      	b.n	8002afc <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d103      	bne.n	8002af8 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8002af0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002af4:	607b      	str	r3, [r7, #4]
 8002af6:	e001      	b.n	8002afc <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8002af8:	2300      	movs	r3, #0
 8002afa:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8002afc:	687b      	ldr	r3, [r7, #4]
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	40007000 	.word	0x40007000

08002b10 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b088      	sub	sp, #32
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d102      	bne.n	8002b24 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	f000 bcc2 	b.w	80034a8 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b24:	4b99      	ldr	r3, [pc, #612]	; (8002d8c <HAL_RCC_OscConfig+0x27c>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f003 030c 	and.w	r3, r3, #12
 8002b2c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b2e:	4b97      	ldr	r3, [pc, #604]	; (8002d8c <HAL_RCC_OscConfig+0x27c>)
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	f003 0303 	and.w	r3, r3, #3
 8002b36:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0310 	and.w	r3, r3, #16
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	f000 80e9 	beq.w	8002d18 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d006      	beq.n	8002b5a <HAL_RCC_OscConfig+0x4a>
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	2b0c      	cmp	r3, #12
 8002b50:	f040 8083 	bne.w	8002c5a <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d17f      	bne.n	8002c5a <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b5a:	4b8c      	ldr	r3, [pc, #560]	; (8002d8c <HAL_RCC_OscConfig+0x27c>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d006      	beq.n	8002b74 <HAL_RCC_OscConfig+0x64>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	69db      	ldr	r3, [r3, #28]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d102      	bne.n	8002b74 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	f000 bc9a 	b.w	80034a8 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b78:	4b84      	ldr	r3, [pc, #528]	; (8002d8c <HAL_RCC_OscConfig+0x27c>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0308 	and.w	r3, r3, #8
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d004      	beq.n	8002b8e <HAL_RCC_OscConfig+0x7e>
 8002b84:	4b81      	ldr	r3, [pc, #516]	; (8002d8c <HAL_RCC_OscConfig+0x27c>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b8c:	e005      	b.n	8002b9a <HAL_RCC_OscConfig+0x8a>
 8002b8e:	4b7f      	ldr	r3, [pc, #508]	; (8002d8c <HAL_RCC_OscConfig+0x27c>)
 8002b90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b94:	091b      	lsrs	r3, r3, #4
 8002b96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d224      	bcs.n	8002be8 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f000 fe9c 	bl	80038e0 <RCC_SetFlashLatencyFromMSIRange>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d002      	beq.n	8002bb4 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	f000 bc7a 	b.w	80034a8 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bb4:	4b75      	ldr	r3, [pc, #468]	; (8002d8c <HAL_RCC_OscConfig+0x27c>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a74      	ldr	r2, [pc, #464]	; (8002d8c <HAL_RCC_OscConfig+0x27c>)
 8002bba:	f043 0308 	orr.w	r3, r3, #8
 8002bbe:	6013      	str	r3, [r2, #0]
 8002bc0:	4b72      	ldr	r3, [pc, #456]	; (8002d8c <HAL_RCC_OscConfig+0x27c>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bcc:	496f      	ldr	r1, [pc, #444]	; (8002d8c <HAL_RCC_OscConfig+0x27c>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bd2:	4b6e      	ldr	r3, [pc, #440]	; (8002d8c <HAL_RCC_OscConfig+0x27c>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	021b      	lsls	r3, r3, #8
 8002be0:	496a      	ldr	r1, [pc, #424]	; (8002d8c <HAL_RCC_OscConfig+0x27c>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	604b      	str	r3, [r1, #4]
 8002be6:	e026      	b.n	8002c36 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002be8:	4b68      	ldr	r3, [pc, #416]	; (8002d8c <HAL_RCC_OscConfig+0x27c>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a67      	ldr	r2, [pc, #412]	; (8002d8c <HAL_RCC_OscConfig+0x27c>)
 8002bee:	f043 0308 	orr.w	r3, r3, #8
 8002bf2:	6013      	str	r3, [r2, #0]
 8002bf4:	4b65      	ldr	r3, [pc, #404]	; (8002d8c <HAL_RCC_OscConfig+0x27c>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c00:	4962      	ldr	r1, [pc, #392]	; (8002d8c <HAL_RCC_OscConfig+0x27c>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c06:	4b61      	ldr	r3, [pc, #388]	; (8002d8c <HAL_RCC_OscConfig+0x27c>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a1b      	ldr	r3, [r3, #32]
 8002c12:	021b      	lsls	r3, r3, #8
 8002c14:	495d      	ldr	r1, [pc, #372]	; (8002d8c <HAL_RCC_OscConfig+0x27c>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d10a      	bne.n	8002c36 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c24:	4618      	mov	r0, r3
 8002c26:	f000 fe5b 	bl	80038e0 <RCC_SetFlashLatencyFromMSIRange>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d002      	beq.n	8002c36 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	f000 bc39 	b.w	80034a8 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002c36:	f000 fe17 	bl	8003868 <HAL_RCC_GetHCLKFreq>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	4a54      	ldr	r2, [pc, #336]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002c3e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002c40:	4b54      	ldr	r3, [pc, #336]	; (8002d94 <HAL_RCC_OscConfig+0x284>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7fe faf5 	bl	8001234 <HAL_InitTick>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8002c4e:	7bfb      	ldrb	r3, [r7, #15]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d060      	beq.n	8002d16 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8002c54:	7bfb      	ldrb	r3, [r7, #15]
 8002c56:	f000 bc27 	b.w	80034a8 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	69db      	ldr	r3, [r3, #28]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d039      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002c62:	4b4a      	ldr	r3, [pc, #296]	; (8002d8c <HAL_RCC_OscConfig+0x27c>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a49      	ldr	r2, [pc, #292]	; (8002d8c <HAL_RCC_OscConfig+0x27c>)
 8002c68:	f043 0301 	orr.w	r3, r3, #1
 8002c6c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c6e:	f7fe fb31 	bl	80012d4 <HAL_GetTick>
 8002c72:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c74:	e00f      	b.n	8002c96 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c76:	f7fe fb2d 	bl	80012d4 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d908      	bls.n	8002c96 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c84:	4b41      	ldr	r3, [pc, #260]	; (8002d8c <HAL_RCC_OscConfig+0x27c>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d102      	bne.n	8002c96 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	f000 bc09 	b.w	80034a8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c96:	4b3d      	ldr	r3, [pc, #244]	; (8002d8c <HAL_RCC_OscConfig+0x27c>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d0e9      	beq.n	8002c76 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ca2:	4b3a      	ldr	r3, [pc, #232]	; (8002d8c <HAL_RCC_OscConfig+0x27c>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a39      	ldr	r2, [pc, #228]	; (8002d8c <HAL_RCC_OscConfig+0x27c>)
 8002ca8:	f043 0308 	orr.w	r3, r3, #8
 8002cac:	6013      	str	r3, [r2, #0]
 8002cae:	4b37      	ldr	r3, [pc, #220]	; (8002d8c <HAL_RCC_OscConfig+0x27c>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cba:	4934      	ldr	r1, [pc, #208]	; (8002d8c <HAL_RCC_OscConfig+0x27c>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cc0:	4b32      	ldr	r3, [pc, #200]	; (8002d8c <HAL_RCC_OscConfig+0x27c>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a1b      	ldr	r3, [r3, #32]
 8002ccc:	021b      	lsls	r3, r3, #8
 8002cce:	492f      	ldr	r1, [pc, #188]	; (8002d8c <HAL_RCC_OscConfig+0x27c>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	604b      	str	r3, [r1, #4]
 8002cd4:	e020      	b.n	8002d18 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002cd6:	4b2d      	ldr	r3, [pc, #180]	; (8002d8c <HAL_RCC_OscConfig+0x27c>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a2c      	ldr	r2, [pc, #176]	; (8002d8c <HAL_RCC_OscConfig+0x27c>)
 8002cdc:	f023 0301 	bic.w	r3, r3, #1
 8002ce0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ce2:	f7fe faf7 	bl	80012d4 <HAL_GetTick>
 8002ce6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ce8:	e00e      	b.n	8002d08 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002cea:	f7fe faf3 	bl	80012d4 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d907      	bls.n	8002d08 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002cf8:	4b24      	ldr	r3, [pc, #144]	; (8002d8c <HAL_RCC_OscConfig+0x27c>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d001      	beq.n	8002d08 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e3cf      	b.n	80034a8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d08:	4b20      	ldr	r3, [pc, #128]	; (8002d8c <HAL_RCC_OscConfig+0x27c>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1ea      	bne.n	8002cea <HAL_RCC_OscConfig+0x1da>
 8002d14:	e000      	b.n	8002d18 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d16:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d07e      	beq.n	8002e22 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	2b08      	cmp	r3, #8
 8002d28:	d005      	beq.n	8002d36 <HAL_RCC_OscConfig+0x226>
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	2b0c      	cmp	r3, #12
 8002d2e:	d10e      	bne.n	8002d4e <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	2b03      	cmp	r3, #3
 8002d34:	d10b      	bne.n	8002d4e <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d36:	4b15      	ldr	r3, [pc, #84]	; (8002d8c <HAL_RCC_OscConfig+0x27c>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d06e      	beq.n	8002e20 <HAL_RCC_OscConfig+0x310>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d16a      	bne.n	8002e20 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e3ac      	b.n	80034a8 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d56:	d106      	bne.n	8002d66 <HAL_RCC_OscConfig+0x256>
 8002d58:	4b0c      	ldr	r3, [pc, #48]	; (8002d8c <HAL_RCC_OscConfig+0x27c>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a0b      	ldr	r2, [pc, #44]	; (8002d8c <HAL_RCC_OscConfig+0x27c>)
 8002d5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d62:	6013      	str	r3, [r2, #0]
 8002d64:	e024      	b.n	8002db0 <HAL_RCC_OscConfig+0x2a0>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d6e:	d113      	bne.n	8002d98 <HAL_RCC_OscConfig+0x288>
 8002d70:	4b06      	ldr	r3, [pc, #24]	; (8002d8c <HAL_RCC_OscConfig+0x27c>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a05      	ldr	r2, [pc, #20]	; (8002d8c <HAL_RCC_OscConfig+0x27c>)
 8002d76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d7a:	6013      	str	r3, [r2, #0]
 8002d7c:	4b03      	ldr	r3, [pc, #12]	; (8002d8c <HAL_RCC_OscConfig+0x27c>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a02      	ldr	r2, [pc, #8]	; (8002d8c <HAL_RCC_OscConfig+0x27c>)
 8002d82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d86:	6013      	str	r3, [r2, #0]
 8002d88:	e012      	b.n	8002db0 <HAL_RCC_OscConfig+0x2a0>
 8002d8a:	bf00      	nop
 8002d8c:	40021000 	.word	0x40021000
 8002d90:	20000008 	.word	0x20000008
 8002d94:	2000000c 	.word	0x2000000c
 8002d98:	4b8b      	ldr	r3, [pc, #556]	; (8002fc8 <HAL_RCC_OscConfig+0x4b8>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a8a      	ldr	r2, [pc, #552]	; (8002fc8 <HAL_RCC_OscConfig+0x4b8>)
 8002d9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002da2:	6013      	str	r3, [r2, #0]
 8002da4:	4b88      	ldr	r3, [pc, #544]	; (8002fc8 <HAL_RCC_OscConfig+0x4b8>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a87      	ldr	r2, [pc, #540]	; (8002fc8 <HAL_RCC_OscConfig+0x4b8>)
 8002daa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d019      	beq.n	8002dec <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db8:	f7fe fa8c 	bl	80012d4 <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dbe:	e00e      	b.n	8002dde <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dc0:	f7fe fa88 	bl	80012d4 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b64      	cmp	r3, #100	; 0x64
 8002dcc:	d907      	bls.n	8002dde <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dce:	4b7e      	ldr	r3, [pc, #504]	; (8002fc8 <HAL_RCC_OscConfig+0x4b8>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e364      	b.n	80034a8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dde:	4b7a      	ldr	r3, [pc, #488]	; (8002fc8 <HAL_RCC_OscConfig+0x4b8>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d0ea      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x2b0>
 8002dea:	e01a      	b.n	8002e22 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dec:	f7fe fa72 	bl	80012d4 <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002df2:	e00e      	b.n	8002e12 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002df4:	f7fe fa6e 	bl	80012d4 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b64      	cmp	r3, #100	; 0x64
 8002e00:	d907      	bls.n	8002e12 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e02:	4b71      	ldr	r3, [pc, #452]	; (8002fc8 <HAL_RCC_OscConfig+0x4b8>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e34a      	b.n	80034a8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e12:	4b6d      	ldr	r3, [pc, #436]	; (8002fc8 <HAL_RCC_OscConfig+0x4b8>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1ea      	bne.n	8002df4 <HAL_RCC_OscConfig+0x2e4>
 8002e1e:	e000      	b.n	8002e22 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d06c      	beq.n	8002f08 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	2b04      	cmp	r3, #4
 8002e32:	d005      	beq.n	8002e40 <HAL_RCC_OscConfig+0x330>
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	2b0c      	cmp	r3, #12
 8002e38:	d119      	bne.n	8002e6e <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d116      	bne.n	8002e6e <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e40:	4b61      	ldr	r3, [pc, #388]	; (8002fc8 <HAL_RCC_OscConfig+0x4b8>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d005      	beq.n	8002e58 <HAL_RCC_OscConfig+0x348>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d101      	bne.n	8002e58 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e327      	b.n	80034a8 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e58:	4b5b      	ldr	r3, [pc, #364]	; (8002fc8 <HAL_RCC_OscConfig+0x4b8>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	691b      	ldr	r3, [r3, #16]
 8002e64:	061b      	lsls	r3, r3, #24
 8002e66:	4958      	ldr	r1, [pc, #352]	; (8002fc8 <HAL_RCC_OscConfig+0x4b8>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e6c:	e04c      	b.n	8002f08 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d029      	beq.n	8002eca <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e76:	4b54      	ldr	r3, [pc, #336]	; (8002fc8 <HAL_RCC_OscConfig+0x4b8>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a53      	ldr	r2, [pc, #332]	; (8002fc8 <HAL_RCC_OscConfig+0x4b8>)
 8002e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e82:	f7fe fa27 	bl	80012d4 <HAL_GetTick>
 8002e86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e88:	e00e      	b.n	8002ea8 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e8a:	f7fe fa23 	bl	80012d4 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d907      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e98:	4b4b      	ldr	r3, [pc, #300]	; (8002fc8 <HAL_RCC_OscConfig+0x4b8>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d101      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e2ff      	b.n	80034a8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ea8:	4b47      	ldr	r3, [pc, #284]	; (8002fc8 <HAL_RCC_OscConfig+0x4b8>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d0ea      	beq.n	8002e8a <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eb4:	4b44      	ldr	r3, [pc, #272]	; (8002fc8 <HAL_RCC_OscConfig+0x4b8>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	061b      	lsls	r3, r3, #24
 8002ec2:	4941      	ldr	r1, [pc, #260]	; (8002fc8 <HAL_RCC_OscConfig+0x4b8>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	604b      	str	r3, [r1, #4]
 8002ec8:	e01e      	b.n	8002f08 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eca:	4b3f      	ldr	r3, [pc, #252]	; (8002fc8 <HAL_RCC_OscConfig+0x4b8>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a3e      	ldr	r2, [pc, #248]	; (8002fc8 <HAL_RCC_OscConfig+0x4b8>)
 8002ed0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ed4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed6:	f7fe f9fd 	bl	80012d4 <HAL_GetTick>
 8002eda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002edc:	e00e      	b.n	8002efc <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ede:	f7fe f9f9 	bl	80012d4 <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d907      	bls.n	8002efc <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002eec:	4b36      	ldr	r3, [pc, #216]	; (8002fc8 <HAL_RCC_OscConfig+0x4b8>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e2d5      	b.n	80034a8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002efc:	4b32      	ldr	r3, [pc, #200]	; (8002fc8 <HAL_RCC_OscConfig+0x4b8>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1ea      	bne.n	8002ede <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0308 	and.w	r3, r3, #8
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d062      	beq.n	8002fda <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	695b      	ldr	r3, [r3, #20]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d038      	beq.n	8002f8e <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d108      	bne.n	8002f36 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8002f24:	4b28      	ldr	r3, [pc, #160]	; (8002fc8 <HAL_RCC_OscConfig+0x4b8>)
 8002f26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f2a:	4a27      	ldr	r2, [pc, #156]	; (8002fc8 <HAL_RCC_OscConfig+0x4b8>)
 8002f2c:	f023 0310 	bic.w	r3, r3, #16
 8002f30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002f34:	e007      	b.n	8002f46 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8002f36:	4b24      	ldr	r3, [pc, #144]	; (8002fc8 <HAL_RCC_OscConfig+0x4b8>)
 8002f38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f3c:	4a22      	ldr	r2, [pc, #136]	; (8002fc8 <HAL_RCC_OscConfig+0x4b8>)
 8002f3e:	f043 0310 	orr.w	r3, r3, #16
 8002f42:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f46:	4b20      	ldr	r3, [pc, #128]	; (8002fc8 <HAL_RCC_OscConfig+0x4b8>)
 8002f48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f4c:	4a1e      	ldr	r2, [pc, #120]	; (8002fc8 <HAL_RCC_OscConfig+0x4b8>)
 8002f4e:	f043 0301 	orr.w	r3, r3, #1
 8002f52:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f56:	f7fe f9bd 	bl	80012d4 <HAL_GetTick>
 8002f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f5c:	e00f      	b.n	8002f7e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f5e:	f7fe f9b9 	bl	80012d4 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b07      	cmp	r3, #7
 8002f6a:	d908      	bls.n	8002f7e <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f6c:	4b16      	ldr	r3, [pc, #88]	; (8002fc8 <HAL_RCC_OscConfig+0x4b8>)
 8002f6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d101      	bne.n	8002f7e <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e294      	b.n	80034a8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f7e:	4b12      	ldr	r3, [pc, #72]	; (8002fc8 <HAL_RCC_OscConfig+0x4b8>)
 8002f80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d0e8      	beq.n	8002f5e <HAL_RCC_OscConfig+0x44e>
 8002f8c:	e025      	b.n	8002fda <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f8e:	4b0e      	ldr	r3, [pc, #56]	; (8002fc8 <HAL_RCC_OscConfig+0x4b8>)
 8002f90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f94:	4a0c      	ldr	r2, [pc, #48]	; (8002fc8 <HAL_RCC_OscConfig+0x4b8>)
 8002f96:	f023 0301 	bic.w	r3, r3, #1
 8002f9a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f9e:	f7fe f999 	bl	80012d4 <HAL_GetTick>
 8002fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fa4:	e012      	b.n	8002fcc <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fa6:	f7fe f995 	bl	80012d4 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b07      	cmp	r3, #7
 8002fb2:	d90b      	bls.n	8002fcc <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fb4:	4b04      	ldr	r3, [pc, #16]	; (8002fc8 <HAL_RCC_OscConfig+0x4b8>)
 8002fb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d004      	beq.n	8002fcc <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e270      	b.n	80034a8 <HAL_RCC_OscConfig+0x998>
 8002fc6:	bf00      	nop
 8002fc8:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fcc:	4ba8      	ldr	r3, [pc, #672]	; (8003270 <HAL_RCC_OscConfig+0x760>)
 8002fce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1e5      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0304 	and.w	r3, r3, #4
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f000 812d 	beq.w	8003242 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002fec:	4ba0      	ldr	r3, [pc, #640]	; (8003270 <HAL_RCC_OscConfig+0x760>)
 8002fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d10d      	bne.n	8003014 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ff8:	4b9d      	ldr	r3, [pc, #628]	; (8003270 <HAL_RCC_OscConfig+0x760>)
 8002ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ffc:	4a9c      	ldr	r2, [pc, #624]	; (8003270 <HAL_RCC_OscConfig+0x760>)
 8002ffe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003002:	6593      	str	r3, [r2, #88]	; 0x58
 8003004:	4b9a      	ldr	r3, [pc, #616]	; (8003270 <HAL_RCC_OscConfig+0x760>)
 8003006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800300c:	60bb      	str	r3, [r7, #8]
 800300e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003010:	2301      	movs	r3, #1
 8003012:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003014:	4b97      	ldr	r3, [pc, #604]	; (8003274 <HAL_RCC_OscConfig+0x764>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800301c:	2b00      	cmp	r3, #0
 800301e:	d11e      	bne.n	800305e <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003020:	4b94      	ldr	r3, [pc, #592]	; (8003274 <HAL_RCC_OscConfig+0x764>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a93      	ldr	r2, [pc, #588]	; (8003274 <HAL_RCC_OscConfig+0x764>)
 8003026:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800302a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800302c:	f7fe f952 	bl	80012d4 <HAL_GetTick>
 8003030:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003032:	e00e      	b.n	8003052 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003034:	f7fe f94e 	bl	80012d4 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b02      	cmp	r3, #2
 8003040:	d907      	bls.n	8003052 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003042:	4b8c      	ldr	r3, [pc, #560]	; (8003274 <HAL_RCC_OscConfig+0x764>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e22a      	b.n	80034a8 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003052:	4b88      	ldr	r3, [pc, #544]	; (8003274 <HAL_RCC_OscConfig+0x764>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800305a:	2b00      	cmp	r3, #0
 800305c:	d0ea      	beq.n	8003034 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b00      	cmp	r3, #0
 8003068:	d01f      	beq.n	80030aa <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f003 0304 	and.w	r3, r3, #4
 8003072:	2b00      	cmp	r3, #0
 8003074:	d010      	beq.n	8003098 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003076:	4b7e      	ldr	r3, [pc, #504]	; (8003270 <HAL_RCC_OscConfig+0x760>)
 8003078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800307c:	4a7c      	ldr	r2, [pc, #496]	; (8003270 <HAL_RCC_OscConfig+0x760>)
 800307e:	f043 0304 	orr.w	r3, r3, #4
 8003082:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003086:	4b7a      	ldr	r3, [pc, #488]	; (8003270 <HAL_RCC_OscConfig+0x760>)
 8003088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800308c:	4a78      	ldr	r2, [pc, #480]	; (8003270 <HAL_RCC_OscConfig+0x760>)
 800308e:	f043 0301 	orr.w	r3, r3, #1
 8003092:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003096:	e018      	b.n	80030ca <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003098:	4b75      	ldr	r3, [pc, #468]	; (8003270 <HAL_RCC_OscConfig+0x760>)
 800309a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800309e:	4a74      	ldr	r2, [pc, #464]	; (8003270 <HAL_RCC_OscConfig+0x760>)
 80030a0:	f043 0301 	orr.w	r3, r3, #1
 80030a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030a8:	e00f      	b.n	80030ca <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80030aa:	4b71      	ldr	r3, [pc, #452]	; (8003270 <HAL_RCC_OscConfig+0x760>)
 80030ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b0:	4a6f      	ldr	r2, [pc, #444]	; (8003270 <HAL_RCC_OscConfig+0x760>)
 80030b2:	f023 0301 	bic.w	r3, r3, #1
 80030b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80030ba:	4b6d      	ldr	r3, [pc, #436]	; (8003270 <HAL_RCC_OscConfig+0x760>)
 80030bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c0:	4a6b      	ldr	r2, [pc, #428]	; (8003270 <HAL_RCC_OscConfig+0x760>)
 80030c2:	f023 0304 	bic.w	r3, r3, #4
 80030c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d068      	beq.n	80031a4 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d2:	f7fe f8ff 	bl	80012d4 <HAL_GetTick>
 80030d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030d8:	e011      	b.n	80030fe <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030da:	f7fe f8fb 	bl	80012d4 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d908      	bls.n	80030fe <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030ec:	4b60      	ldr	r3, [pc, #384]	; (8003270 <HAL_RCC_OscConfig+0x760>)
 80030ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e1d4      	b.n	80034a8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030fe:	4b5c      	ldr	r3, [pc, #368]	; (8003270 <HAL_RCC_OscConfig+0x760>)
 8003100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d0e6      	beq.n	80030da <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003114:	2b00      	cmp	r3, #0
 8003116:	d022      	beq.n	800315e <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003118:	4b55      	ldr	r3, [pc, #340]	; (8003270 <HAL_RCC_OscConfig+0x760>)
 800311a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311e:	4a54      	ldr	r2, [pc, #336]	; (8003270 <HAL_RCC_OscConfig+0x760>)
 8003120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003124:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003128:	e011      	b.n	800314e <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800312a:	f7fe f8d3 	bl	80012d4 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	f241 3288 	movw	r2, #5000	; 0x1388
 8003138:	4293      	cmp	r3, r2
 800313a:	d908      	bls.n	800314e <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800313c:	4b4c      	ldr	r3, [pc, #304]	; (8003270 <HAL_RCC_OscConfig+0x760>)
 800313e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003142:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e1ac      	b.n	80034a8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800314e:	4b48      	ldr	r3, [pc, #288]	; (8003270 <HAL_RCC_OscConfig+0x760>)
 8003150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003154:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003158:	2b00      	cmp	r3, #0
 800315a:	d0e6      	beq.n	800312a <HAL_RCC_OscConfig+0x61a>
 800315c:	e068      	b.n	8003230 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800315e:	4b44      	ldr	r3, [pc, #272]	; (8003270 <HAL_RCC_OscConfig+0x760>)
 8003160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003164:	4a42      	ldr	r2, [pc, #264]	; (8003270 <HAL_RCC_OscConfig+0x760>)
 8003166:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800316a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800316e:	e011      	b.n	8003194 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003170:	f7fe f8b0 	bl	80012d4 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	f241 3288 	movw	r2, #5000	; 0x1388
 800317e:	4293      	cmp	r3, r2
 8003180:	d908      	bls.n	8003194 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003182:	4b3b      	ldr	r3, [pc, #236]	; (8003270 <HAL_RCC_OscConfig+0x760>)
 8003184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003188:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800318c:	2b00      	cmp	r3, #0
 800318e:	d001      	beq.n	8003194 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e189      	b.n	80034a8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003194:	4b36      	ldr	r3, [pc, #216]	; (8003270 <HAL_RCC_OscConfig+0x760>)
 8003196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800319a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1e6      	bne.n	8003170 <HAL_RCC_OscConfig+0x660>
 80031a2:	e045      	b.n	8003230 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a4:	f7fe f896 	bl	80012d4 <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031aa:	e011      	b.n	80031d0 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ac:	f7fe f892 	bl	80012d4 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d908      	bls.n	80031d0 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031be:	4b2c      	ldr	r3, [pc, #176]	; (8003270 <HAL_RCC_OscConfig+0x760>)
 80031c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e16b      	b.n	80034a8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031d0:	4b27      	ldr	r3, [pc, #156]	; (8003270 <HAL_RCC_OscConfig+0x760>)
 80031d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1e6      	bne.n	80031ac <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80031de:	4b24      	ldr	r3, [pc, #144]	; (8003270 <HAL_RCC_OscConfig+0x760>)
 80031e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d021      	beq.n	8003230 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80031ec:	4b20      	ldr	r3, [pc, #128]	; (8003270 <HAL_RCC_OscConfig+0x760>)
 80031ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f2:	4a1f      	ldr	r2, [pc, #124]	; (8003270 <HAL_RCC_OscConfig+0x760>)
 80031f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80031fc:	e011      	b.n	8003222 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031fe:	f7fe f869 	bl	80012d4 <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	f241 3288 	movw	r2, #5000	; 0x1388
 800320c:	4293      	cmp	r3, r2
 800320e:	d908      	bls.n	8003222 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003210:	4b17      	ldr	r3, [pc, #92]	; (8003270 <HAL_RCC_OscConfig+0x760>)
 8003212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003216:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e142      	b.n	80034a8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003222:	4b13      	ldr	r3, [pc, #76]	; (8003270 <HAL_RCC_OscConfig+0x760>)
 8003224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003228:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1e6      	bne.n	80031fe <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003230:	7ffb      	ldrb	r3, [r7, #31]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d105      	bne.n	8003242 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003236:	4b0e      	ldr	r3, [pc, #56]	; (8003270 <HAL_RCC_OscConfig+0x760>)
 8003238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800323a:	4a0d      	ldr	r2, [pc, #52]	; (8003270 <HAL_RCC_OscConfig+0x760>)
 800323c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003240:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0320 	and.w	r3, r3, #32
 800324a:	2b00      	cmp	r3, #0
 800324c:	d04f      	beq.n	80032ee <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003252:	2b00      	cmp	r3, #0
 8003254:	d028      	beq.n	80032a8 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003256:	4b06      	ldr	r3, [pc, #24]	; (8003270 <HAL_RCC_OscConfig+0x760>)
 8003258:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800325c:	4a04      	ldr	r2, [pc, #16]	; (8003270 <HAL_RCC_OscConfig+0x760>)
 800325e:	f043 0301 	orr.w	r3, r3, #1
 8003262:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003266:	f7fe f835 	bl	80012d4 <HAL_GetTick>
 800326a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800326c:	e014      	b.n	8003298 <HAL_RCC_OscConfig+0x788>
 800326e:	bf00      	nop
 8003270:	40021000 	.word	0x40021000
 8003274:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003278:	f7fe f82c 	bl	80012d4 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b02      	cmp	r3, #2
 8003284:	d908      	bls.n	8003298 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003286:	4b8a      	ldr	r3, [pc, #552]	; (80034b0 <HAL_RCC_OscConfig+0x9a0>)
 8003288:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d101      	bne.n	8003298 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e107      	b.n	80034a8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003298:	4b85      	ldr	r3, [pc, #532]	; (80034b0 <HAL_RCC_OscConfig+0x9a0>)
 800329a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d0e8      	beq.n	8003278 <HAL_RCC_OscConfig+0x768>
 80032a6:	e022      	b.n	80032ee <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80032a8:	4b81      	ldr	r3, [pc, #516]	; (80034b0 <HAL_RCC_OscConfig+0x9a0>)
 80032aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032ae:	4a80      	ldr	r2, [pc, #512]	; (80034b0 <HAL_RCC_OscConfig+0x9a0>)
 80032b0:	f023 0301 	bic.w	r3, r3, #1
 80032b4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b8:	f7fe f80c 	bl	80012d4 <HAL_GetTick>
 80032bc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032be:	e00f      	b.n	80032e0 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032c0:	f7fe f808 	bl	80012d4 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d908      	bls.n	80032e0 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032ce:	4b78      	ldr	r3, [pc, #480]	; (80034b0 <HAL_RCC_OscConfig+0x9a0>)
 80032d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e0e3      	b.n	80034a8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032e0:	4b73      	ldr	r3, [pc, #460]	; (80034b0 <HAL_RCC_OscConfig+0x9a0>)
 80032e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1e8      	bne.n	80032c0 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f000 80d7 	beq.w	80034a6 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032f8:	4b6d      	ldr	r3, [pc, #436]	; (80034b0 <HAL_RCC_OscConfig+0x9a0>)
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f003 030c 	and.w	r3, r3, #12
 8003300:	2b0c      	cmp	r3, #12
 8003302:	f000 8091 	beq.w	8003428 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330a:	2b02      	cmp	r3, #2
 800330c:	d166      	bne.n	80033dc <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800330e:	4b68      	ldr	r3, [pc, #416]	; (80034b0 <HAL_RCC_OscConfig+0x9a0>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a67      	ldr	r2, [pc, #412]	; (80034b0 <HAL_RCC_OscConfig+0x9a0>)
 8003314:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003318:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800331a:	f7fd ffdb 	bl	80012d4 <HAL_GetTick>
 800331e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003320:	e00e      	b.n	8003340 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003322:	f7fd ffd7 	bl	80012d4 <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	2b02      	cmp	r3, #2
 800332e:	d907      	bls.n	8003340 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003330:	4b5f      	ldr	r3, [pc, #380]	; (80034b0 <HAL_RCC_OscConfig+0x9a0>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d001      	beq.n	8003340 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e0b3      	b.n	80034a8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003340:	4b5b      	ldr	r3, [pc, #364]	; (80034b0 <HAL_RCC_OscConfig+0x9a0>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d1ea      	bne.n	8003322 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800334c:	4b58      	ldr	r3, [pc, #352]	; (80034b0 <HAL_RCC_OscConfig+0x9a0>)
 800334e:	68da      	ldr	r2, [r3, #12]
 8003350:	4b58      	ldr	r3, [pc, #352]	; (80034b4 <HAL_RCC_OscConfig+0x9a4>)
 8003352:	4013      	ands	r3, r2
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800335c:	3a01      	subs	r2, #1
 800335e:	0112      	lsls	r2, r2, #4
 8003360:	4311      	orrs	r1, r2
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003366:	0212      	lsls	r2, r2, #8
 8003368:	4311      	orrs	r1, r2
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800336e:	0852      	lsrs	r2, r2, #1
 8003370:	3a01      	subs	r2, #1
 8003372:	0552      	lsls	r2, r2, #21
 8003374:	4311      	orrs	r1, r2
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800337a:	0852      	lsrs	r2, r2, #1
 800337c:	3a01      	subs	r2, #1
 800337e:	0652      	lsls	r2, r2, #25
 8003380:	4311      	orrs	r1, r2
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003386:	06d2      	lsls	r2, r2, #27
 8003388:	430a      	orrs	r2, r1
 800338a:	4949      	ldr	r1, [pc, #292]	; (80034b0 <HAL_RCC_OscConfig+0x9a0>)
 800338c:	4313      	orrs	r3, r2
 800338e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003390:	4b47      	ldr	r3, [pc, #284]	; (80034b0 <HAL_RCC_OscConfig+0x9a0>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a46      	ldr	r2, [pc, #280]	; (80034b0 <HAL_RCC_OscConfig+0x9a0>)
 8003396:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800339a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800339c:	4b44      	ldr	r3, [pc, #272]	; (80034b0 <HAL_RCC_OscConfig+0x9a0>)
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	4a43      	ldr	r2, [pc, #268]	; (80034b0 <HAL_RCC_OscConfig+0x9a0>)
 80033a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033a6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a8:	f7fd ff94 	bl	80012d4 <HAL_GetTick>
 80033ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033ae:	e00e      	b.n	80033ce <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033b0:	f7fd ff90 	bl	80012d4 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d907      	bls.n	80033ce <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033be:	4b3c      	ldr	r3, [pc, #240]	; (80034b0 <HAL_RCC_OscConfig+0x9a0>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e06c      	b.n	80034a8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033ce:	4b38      	ldr	r3, [pc, #224]	; (80034b0 <HAL_RCC_OscConfig+0x9a0>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d0ea      	beq.n	80033b0 <HAL_RCC_OscConfig+0x8a0>
 80033da:	e064      	b.n	80034a6 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033dc:	4b34      	ldr	r3, [pc, #208]	; (80034b0 <HAL_RCC_OscConfig+0x9a0>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a33      	ldr	r2, [pc, #204]	; (80034b0 <HAL_RCC_OscConfig+0x9a0>)
 80033e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e8:	f7fd ff74 	bl	80012d4 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033ee:	e00e      	b.n	800340e <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033f0:	f7fd ff70 	bl	80012d4 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d907      	bls.n	800340e <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033fe:	4b2c      	ldr	r3, [pc, #176]	; (80034b0 <HAL_RCC_OscConfig+0x9a0>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e04c      	b.n	80034a8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800340e:	4b28      	ldr	r3, [pc, #160]	; (80034b0 <HAL_RCC_OscConfig+0x9a0>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1ea      	bne.n	80033f0 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800341a:	4b25      	ldr	r3, [pc, #148]	; (80034b0 <HAL_RCC_OscConfig+0x9a0>)
 800341c:	68da      	ldr	r2, [r3, #12]
 800341e:	4924      	ldr	r1, [pc, #144]	; (80034b0 <HAL_RCC_OscConfig+0x9a0>)
 8003420:	4b25      	ldr	r3, [pc, #148]	; (80034b8 <HAL_RCC_OscConfig+0x9a8>)
 8003422:	4013      	ands	r3, r2
 8003424:	60cb      	str	r3, [r1, #12]
 8003426:	e03e      	b.n	80034a6 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342c:	2b01      	cmp	r3, #1
 800342e:	d101      	bne.n	8003434 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e039      	b.n	80034a8 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8003434:	4b1e      	ldr	r3, [pc, #120]	; (80034b0 <HAL_RCC_OscConfig+0x9a0>)
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	f003 0203 	and.w	r2, r3, #3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003444:	429a      	cmp	r2, r3
 8003446:	d12c      	bne.n	80034a2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003452:	3b01      	subs	r3, #1
 8003454:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003456:	429a      	cmp	r2, r3
 8003458:	d123      	bne.n	80034a2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003464:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003466:	429a      	cmp	r2, r3
 8003468:	d11b      	bne.n	80034a2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003474:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003476:	429a      	cmp	r2, r3
 8003478:	d113      	bne.n	80034a2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003484:	085b      	lsrs	r3, r3, #1
 8003486:	3b01      	subs	r3, #1
 8003488:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800348a:	429a      	cmp	r2, r3
 800348c:	d109      	bne.n	80034a2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003498:	085b      	lsrs	r3, r3, #1
 800349a:	3b01      	subs	r3, #1
 800349c:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800349e:	429a      	cmp	r2, r3
 80034a0:	d001      	beq.n	80034a6 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e000      	b.n	80034a8 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3720      	adds	r7, #32
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	40021000 	.word	0x40021000
 80034b4:	019f800c 	.word	0x019f800c
 80034b8:	feeefffc 	.word	0xfeeefffc

080034bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b086      	sub	sp, #24
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80034c6:	2300      	movs	r3, #0
 80034c8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d101      	bne.n	80034d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e11c      	b.n	800370e <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034d4:	4b90      	ldr	r3, [pc, #576]	; (8003718 <HAL_RCC_ClockConfig+0x25c>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 030f 	and.w	r3, r3, #15
 80034dc:	683a      	ldr	r2, [r7, #0]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d910      	bls.n	8003504 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034e2:	4b8d      	ldr	r3, [pc, #564]	; (8003718 <HAL_RCC_ClockConfig+0x25c>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f023 020f 	bic.w	r2, r3, #15
 80034ea:	498b      	ldr	r1, [pc, #556]	; (8003718 <HAL_RCC_ClockConfig+0x25c>)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034f2:	4b89      	ldr	r3, [pc, #548]	; (8003718 <HAL_RCC_ClockConfig+0x25c>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 030f 	and.w	r3, r3, #15
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d001      	beq.n	8003504 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e104      	b.n	800370e <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d010      	beq.n	8003532 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689a      	ldr	r2, [r3, #8]
 8003514:	4b81      	ldr	r3, [pc, #516]	; (800371c <HAL_RCC_ClockConfig+0x260>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800351c:	429a      	cmp	r2, r3
 800351e:	d908      	bls.n	8003532 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003520:	4b7e      	ldr	r3, [pc, #504]	; (800371c <HAL_RCC_ClockConfig+0x260>)
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	497b      	ldr	r1, [pc, #492]	; (800371c <HAL_RCC_ClockConfig+0x260>)
 800352e:	4313      	orrs	r3, r2
 8003530:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	2b00      	cmp	r3, #0
 800353c:	f000 8085 	beq.w	800364a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	2b03      	cmp	r3, #3
 8003546:	d11f      	bne.n	8003588 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003548:	4b74      	ldr	r3, [pc, #464]	; (800371c <HAL_RCC_ClockConfig+0x260>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d101      	bne.n	8003558 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e0da      	b.n	800370e <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003558:	f000 fa26 	bl	80039a8 <RCC_GetSysClockFreqFromPLLSource>
 800355c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	4a6f      	ldr	r2, [pc, #444]	; (8003720 <HAL_RCC_ClockConfig+0x264>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d947      	bls.n	80035f6 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003566:	4b6d      	ldr	r3, [pc, #436]	; (800371c <HAL_RCC_ClockConfig+0x260>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d141      	bne.n	80035f6 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003572:	4b6a      	ldr	r3, [pc, #424]	; (800371c <HAL_RCC_ClockConfig+0x260>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800357a:	4a68      	ldr	r2, [pc, #416]	; (800371c <HAL_RCC_ClockConfig+0x260>)
 800357c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003580:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003582:	2380      	movs	r3, #128	; 0x80
 8003584:	617b      	str	r3, [r7, #20]
 8003586:	e036      	b.n	80035f6 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	2b02      	cmp	r3, #2
 800358e:	d107      	bne.n	80035a0 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003590:	4b62      	ldr	r3, [pc, #392]	; (800371c <HAL_RCC_ClockConfig+0x260>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d115      	bne.n	80035c8 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e0b6      	b.n	800370e <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d107      	bne.n	80035b8 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035a8:	4b5c      	ldr	r3, [pc, #368]	; (800371c <HAL_RCC_ClockConfig+0x260>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0302 	and.w	r3, r3, #2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d109      	bne.n	80035c8 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e0aa      	b.n	800370e <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035b8:	4b58      	ldr	r3, [pc, #352]	; (800371c <HAL_RCC_ClockConfig+0x260>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d101      	bne.n	80035c8 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e0a2      	b.n	800370e <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80035c8:	f000 f8b0 	bl	800372c <HAL_RCC_GetSysClockFreq>
 80035cc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	4a53      	ldr	r2, [pc, #332]	; (8003720 <HAL_RCC_ClockConfig+0x264>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d90f      	bls.n	80035f6 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80035d6:	4b51      	ldr	r3, [pc, #324]	; (800371c <HAL_RCC_ClockConfig+0x260>)
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d109      	bne.n	80035f6 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80035e2:	4b4e      	ldr	r3, [pc, #312]	; (800371c <HAL_RCC_ClockConfig+0x260>)
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035ea:	4a4c      	ldr	r2, [pc, #304]	; (800371c <HAL_RCC_ClockConfig+0x260>)
 80035ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035f0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80035f2:	2380      	movs	r3, #128	; 0x80
 80035f4:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035f6:	4b49      	ldr	r3, [pc, #292]	; (800371c <HAL_RCC_ClockConfig+0x260>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f023 0203 	bic.w	r2, r3, #3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	4946      	ldr	r1, [pc, #280]	; (800371c <HAL_RCC_ClockConfig+0x260>)
 8003604:	4313      	orrs	r3, r2
 8003606:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003608:	f7fd fe64 	bl	80012d4 <HAL_GetTick>
 800360c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800360e:	e013      	b.n	8003638 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003610:	f7fd fe60 	bl	80012d4 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	f241 3288 	movw	r2, #5000	; 0x1388
 800361e:	4293      	cmp	r3, r2
 8003620:	d90a      	bls.n	8003638 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003622:	4b3e      	ldr	r3, [pc, #248]	; (800371c <HAL_RCC_ClockConfig+0x260>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f003 020c 	and.w	r2, r3, #12
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	429a      	cmp	r2, r3
 8003632:	d001      	beq.n	8003638 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e06a      	b.n	800370e <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003638:	4b38      	ldr	r3, [pc, #224]	; (800371c <HAL_RCC_ClockConfig+0x260>)
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f003 020c 	and.w	r2, r3, #12
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	429a      	cmp	r2, r3
 8003648:	d1e2      	bne.n	8003610 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	2b80      	cmp	r3, #128	; 0x80
 800364e:	d105      	bne.n	800365c <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003650:	4b32      	ldr	r3, [pc, #200]	; (800371c <HAL_RCC_ClockConfig+0x260>)
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	4a31      	ldr	r2, [pc, #196]	; (800371c <HAL_RCC_ClockConfig+0x260>)
 8003656:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800365a:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0302 	and.w	r3, r3, #2
 8003664:	2b00      	cmp	r3, #0
 8003666:	d010      	beq.n	800368a <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	689a      	ldr	r2, [r3, #8]
 800366c:	4b2b      	ldr	r3, [pc, #172]	; (800371c <HAL_RCC_ClockConfig+0x260>)
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003674:	429a      	cmp	r2, r3
 8003676:	d208      	bcs.n	800368a <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003678:	4b28      	ldr	r3, [pc, #160]	; (800371c <HAL_RCC_ClockConfig+0x260>)
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	4925      	ldr	r1, [pc, #148]	; (800371c <HAL_RCC_ClockConfig+0x260>)
 8003686:	4313      	orrs	r3, r2
 8003688:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800368a:	4b23      	ldr	r3, [pc, #140]	; (8003718 <HAL_RCC_ClockConfig+0x25c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 030f 	and.w	r3, r3, #15
 8003692:	683a      	ldr	r2, [r7, #0]
 8003694:	429a      	cmp	r2, r3
 8003696:	d210      	bcs.n	80036ba <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003698:	4b1f      	ldr	r3, [pc, #124]	; (8003718 <HAL_RCC_ClockConfig+0x25c>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f023 020f 	bic.w	r2, r3, #15
 80036a0:	491d      	ldr	r1, [pc, #116]	; (8003718 <HAL_RCC_ClockConfig+0x25c>)
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036a8:	4b1b      	ldr	r3, [pc, #108]	; (8003718 <HAL_RCC_ClockConfig+0x25c>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 030f 	and.w	r3, r3, #15
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d001      	beq.n	80036ba <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e029      	b.n	800370e <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0304 	and.w	r3, r3, #4
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d008      	beq.n	80036d8 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036c6:	4b15      	ldr	r3, [pc, #84]	; (800371c <HAL_RCC_ClockConfig+0x260>)
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	4912      	ldr	r1, [pc, #72]	; (800371c <HAL_RCC_ClockConfig+0x260>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0308 	and.w	r3, r3, #8
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d009      	beq.n	80036f8 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036e4:	4b0d      	ldr	r3, [pc, #52]	; (800371c <HAL_RCC_ClockConfig+0x260>)
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	00db      	lsls	r3, r3, #3
 80036f2:	490a      	ldr	r1, [pc, #40]	; (800371c <HAL_RCC_ClockConfig+0x260>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80036f8:	f000 f8b6 	bl	8003868 <HAL_RCC_GetHCLKFreq>
 80036fc:	4603      	mov	r3, r0
 80036fe:	4a09      	ldr	r2, [pc, #36]	; (8003724 <HAL_RCC_ClockConfig+0x268>)
 8003700:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003702:	4b09      	ldr	r3, [pc, #36]	; (8003728 <HAL_RCC_ClockConfig+0x26c>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4618      	mov	r0, r3
 8003708:	f7fd fd94 	bl	8001234 <HAL_InitTick>
 800370c:	4603      	mov	r3, r0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3718      	adds	r7, #24
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	40022000 	.word	0x40022000
 800371c:	40021000 	.word	0x40021000
 8003720:	04c4b400 	.word	0x04c4b400
 8003724:	20000008 	.word	0x20000008
 8003728:	2000000c 	.word	0x2000000c

0800372c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800372c:	b480      	push	{r7}
 800372e:	b089      	sub	sp, #36	; 0x24
 8003730:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003732:	2300      	movs	r3, #0
 8003734:	61fb      	str	r3, [r7, #28]
 8003736:	2300      	movs	r3, #0
 8003738:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800373a:	4b47      	ldr	r3, [pc, #284]	; (8003858 <HAL_RCC_GetSysClockFreq+0x12c>)
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f003 030c 	and.w	r3, r3, #12
 8003742:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003744:	4b44      	ldr	r3, [pc, #272]	; (8003858 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	f003 0303 	and.w	r3, r3, #3
 800374c:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d005      	beq.n	8003760 <HAL_RCC_GetSysClockFreq+0x34>
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	2b0c      	cmp	r3, #12
 8003758:	d121      	bne.n	800379e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2b01      	cmp	r3, #1
 800375e:	d11e      	bne.n	800379e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003760:	4b3d      	ldr	r3, [pc, #244]	; (8003858 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0308 	and.w	r3, r3, #8
 8003768:	2b00      	cmp	r3, #0
 800376a:	d107      	bne.n	800377c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800376c:	4b3a      	ldr	r3, [pc, #232]	; (8003858 <HAL_RCC_GetSysClockFreq+0x12c>)
 800376e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003772:	0a1b      	lsrs	r3, r3, #8
 8003774:	f003 030f 	and.w	r3, r3, #15
 8003778:	61fb      	str	r3, [r7, #28]
 800377a:	e005      	b.n	8003788 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800377c:	4b36      	ldr	r3, [pc, #216]	; (8003858 <HAL_RCC_GetSysClockFreq+0x12c>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	091b      	lsrs	r3, r3, #4
 8003782:	f003 030f 	and.w	r3, r3, #15
 8003786:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8003788:	4a34      	ldr	r2, [pc, #208]	; (800385c <HAL_RCC_GetSysClockFreq+0x130>)
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003790:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d10d      	bne.n	80037b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800379c:	e00a      	b.n	80037b4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	2b04      	cmp	r3, #4
 80037a2:	d102      	bne.n	80037aa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80037a4:	4b2e      	ldr	r3, [pc, #184]	; (8003860 <HAL_RCC_GetSysClockFreq+0x134>)
 80037a6:	61bb      	str	r3, [r7, #24]
 80037a8:	e004      	b.n	80037b4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	2b08      	cmp	r3, #8
 80037ae:	d101      	bne.n	80037b4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80037b0:	4b2c      	ldr	r3, [pc, #176]	; (8003864 <HAL_RCC_GetSysClockFreq+0x138>)
 80037b2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	2b0c      	cmp	r3, #12
 80037b8:	d146      	bne.n	8003848 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80037ba:	4b27      	ldr	r3, [pc, #156]	; (8003858 <HAL_RCC_GetSysClockFreq+0x12c>)
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	f003 0303 	and.w	r3, r3, #3
 80037c2:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037c4:	4b24      	ldr	r3, [pc, #144]	; (8003858 <HAL_RCC_GetSysClockFreq+0x12c>)
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	091b      	lsrs	r3, r3, #4
 80037ca:	f003 030f 	and.w	r3, r3, #15
 80037ce:	3301      	adds	r3, #1
 80037d0:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d003      	beq.n	80037e0 <HAL_RCC_GetSysClockFreq+0xb4>
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	2b03      	cmp	r3, #3
 80037dc:	d00d      	beq.n	80037fa <HAL_RCC_GetSysClockFreq+0xce>
 80037de:	e019      	b.n	8003814 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80037e0:	4a1f      	ldr	r2, [pc, #124]	; (8003860 <HAL_RCC_GetSysClockFreq+0x134>)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e8:	4a1b      	ldr	r2, [pc, #108]	; (8003858 <HAL_RCC_GetSysClockFreq+0x12c>)
 80037ea:	68d2      	ldr	r2, [r2, #12]
 80037ec:	0a12      	lsrs	r2, r2, #8
 80037ee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80037f2:	fb02 f303 	mul.w	r3, r2, r3
 80037f6:	617b      	str	r3, [r7, #20]
        break;
 80037f8:	e019      	b.n	800382e <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80037fa:	4a1a      	ldr	r2, [pc, #104]	; (8003864 <HAL_RCC_GetSysClockFreq+0x138>)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003802:	4a15      	ldr	r2, [pc, #84]	; (8003858 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003804:	68d2      	ldr	r2, [r2, #12]
 8003806:	0a12      	lsrs	r2, r2, #8
 8003808:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800380c:	fb02 f303 	mul.w	r3, r2, r3
 8003810:	617b      	str	r3, [r7, #20]
        break;
 8003812:	e00c      	b.n	800382e <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003814:	69fa      	ldr	r2, [r7, #28]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	fbb2 f3f3 	udiv	r3, r2, r3
 800381c:	4a0e      	ldr	r2, [pc, #56]	; (8003858 <HAL_RCC_GetSysClockFreq+0x12c>)
 800381e:	68d2      	ldr	r2, [r2, #12]
 8003820:	0a12      	lsrs	r2, r2, #8
 8003822:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003826:	fb02 f303 	mul.w	r3, r2, r3
 800382a:	617b      	str	r3, [r7, #20]
        break;
 800382c:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 800382e:	4b0a      	ldr	r3, [pc, #40]	; (8003858 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	0e5b      	lsrs	r3, r3, #25
 8003834:	f003 0303 	and.w	r3, r3, #3
 8003838:	3301      	adds	r3, #1
 800383a:	005b      	lsls	r3, r3, #1
 800383c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	fbb2 f3f3 	udiv	r3, r2, r3
 8003846:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003848:	69bb      	ldr	r3, [r7, #24]
}
 800384a:	4618      	mov	r0, r3
 800384c:	3724      	adds	r7, #36	; 0x24
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	40021000 	.word	0x40021000
 800385c:	080060e4 	.word	0x080060e4
 8003860:	00f42400 	.word	0x00f42400
 8003864:	007a1200 	.word	0x007a1200

08003868 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 800386c:	f7ff ff5e 	bl	800372c <HAL_RCC_GetSysClockFreq>
 8003870:	4602      	mov	r2, r0
 8003872:	4b05      	ldr	r3, [pc, #20]	; (8003888 <HAL_RCC_GetHCLKFreq+0x20>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	091b      	lsrs	r3, r3, #4
 8003878:	f003 030f 	and.w	r3, r3, #15
 800387c:	4903      	ldr	r1, [pc, #12]	; (800388c <HAL_RCC_GetHCLKFreq+0x24>)
 800387e:	5ccb      	ldrb	r3, [r1, r3]
 8003880:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003884:	4618      	mov	r0, r3
 8003886:	bd80      	pop	{r7, pc}
 8003888:	40021000 	.word	0x40021000
 800388c:	080060cc 	.word	0x080060cc

08003890 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003894:	f7ff ffe8 	bl	8003868 <HAL_RCC_GetHCLKFreq>
 8003898:	4602      	mov	r2, r0
 800389a:	4b05      	ldr	r3, [pc, #20]	; (80038b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	0a1b      	lsrs	r3, r3, #8
 80038a0:	f003 0307 	and.w	r3, r3, #7
 80038a4:	4903      	ldr	r1, [pc, #12]	; (80038b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038a6:	5ccb      	ldrb	r3, [r1, r3]
 80038a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	40021000 	.word	0x40021000
 80038b4:	080060dc 	.word	0x080060dc

080038b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80038bc:	f7ff ffd4 	bl	8003868 <HAL_RCC_GetHCLKFreq>
 80038c0:	4602      	mov	r2, r0
 80038c2:	4b05      	ldr	r3, [pc, #20]	; (80038d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	0adb      	lsrs	r3, r3, #11
 80038c8:	f003 0307 	and.w	r3, r3, #7
 80038cc:	4903      	ldr	r1, [pc, #12]	; (80038dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80038ce:	5ccb      	ldrb	r3, [r1, r3]
 80038d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	40021000 	.word	0x40021000
 80038dc:	080060dc 	.word	0x080060dc

080038e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80038e8:	2300      	movs	r3, #0
 80038ea:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80038ec:	4b2c      	ldr	r3, [pc, #176]	; (80039a0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80038ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d003      	beq.n	8003900 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80038f8:	f7ff f86c 	bl	80029d4 <HAL_PWREx_GetVoltageRange>
 80038fc:	6138      	str	r0, [r7, #16]
 80038fe:	e014      	b.n	800392a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003900:	4b27      	ldr	r3, [pc, #156]	; (80039a0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003904:	4a26      	ldr	r2, [pc, #152]	; (80039a0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003906:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800390a:	6593      	str	r3, [r2, #88]	; 0x58
 800390c:	4b24      	ldr	r3, [pc, #144]	; (80039a0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800390e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003914:	60fb      	str	r3, [r7, #12]
 8003916:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003918:	f7ff f85c 	bl	80029d4 <HAL_PWREx_GetVoltageRange>
 800391c:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 800391e:	4b20      	ldr	r3, [pc, #128]	; (80039a0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003922:	4a1f      	ldr	r2, [pc, #124]	; (80039a0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003924:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003928:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d003      	beq.n	8003938 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003936:	d10b      	bne.n	8003950 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b80      	cmp	r3, #128	; 0x80
 800393c:	d919      	bls.n	8003972 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2ba0      	cmp	r3, #160	; 0xa0
 8003942:	d902      	bls.n	800394a <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003944:	2302      	movs	r3, #2
 8003946:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8003948:	e013      	b.n	8003972 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800394a:	2301      	movs	r3, #1
 800394c:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 800394e:	e010      	b.n	8003972 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2b80      	cmp	r3, #128	; 0x80
 8003954:	d902      	bls.n	800395c <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003956:	2303      	movs	r3, #3
 8003958:	617b      	str	r3, [r7, #20]
 800395a:	e00a      	b.n	8003972 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2b80      	cmp	r3, #128	; 0x80
 8003960:	d102      	bne.n	8003968 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003962:	2302      	movs	r3, #2
 8003964:	617b      	str	r3, [r7, #20]
 8003966:	e004      	b.n	8003972 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b70      	cmp	r3, #112	; 0x70
 800396c:	d101      	bne.n	8003972 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800396e:	2301      	movs	r3, #1
 8003970:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003972:	4b0c      	ldr	r3, [pc, #48]	; (80039a4 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f023 020f 	bic.w	r2, r3, #15
 800397a:	490a      	ldr	r1, [pc, #40]	; (80039a4 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	4313      	orrs	r3, r2
 8003980:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8003982:	4b08      	ldr	r3, [pc, #32]	; (80039a4 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 030f 	and.w	r3, r3, #15
 800398a:	697a      	ldr	r2, [r7, #20]
 800398c:	429a      	cmp	r2, r3
 800398e:	d001      	beq.n	8003994 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e000      	b.n	8003996 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3718      	adds	r7, #24
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	40021000 	.word	0x40021000
 80039a4:	40022000 	.word	0x40022000

080039a8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b087      	sub	sp, #28
 80039ac:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80039ae:	4b31      	ldr	r3, [pc, #196]	; (8003a74 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	f003 0303 	and.w	r3, r3, #3
 80039b6:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039b8:	4b2e      	ldr	r3, [pc, #184]	; (8003a74 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	091b      	lsrs	r3, r3, #4
 80039be:	f003 030f 	and.w	r3, r3, #15
 80039c2:	3301      	adds	r3, #1
 80039c4:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2b03      	cmp	r3, #3
 80039ca:	d015      	beq.n	80039f8 <RCC_GetSysClockFreqFromPLLSource+0x50>
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2b03      	cmp	r3, #3
 80039d0:	d839      	bhi.n	8003a46 <RCC_GetSysClockFreqFromPLLSource+0x9e>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d01c      	beq.n	8003a12 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d133      	bne.n	8003a46 <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039de:	4a26      	ldr	r2, [pc, #152]	; (8003a78 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e6:	4a23      	ldr	r2, [pc, #140]	; (8003a74 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80039e8:	68d2      	ldr	r2, [r2, #12]
 80039ea:	0a12      	lsrs	r2, r2, #8
 80039ec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80039f0:	fb02 f303 	mul.w	r3, r2, r3
 80039f4:	613b      	str	r3, [r7, #16]
      break;
 80039f6:	e029      	b.n	8003a4c <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039f8:	4a20      	ldr	r2, [pc, #128]	; (8003a7c <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a00:	4a1c      	ldr	r2, [pc, #112]	; (8003a74 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003a02:	68d2      	ldr	r2, [r2, #12]
 8003a04:	0a12      	lsrs	r2, r2, #8
 8003a06:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a0a:	fb02 f303 	mul.w	r3, r2, r3
 8003a0e:	613b      	str	r3, [r7, #16]
      break;
 8003a10:	e01c      	b.n	8003a4c <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a12:	4b18      	ldr	r3, [pc, #96]	; (8003a74 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0308 	and.w	r3, r3, #8
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d107      	bne.n	8003a2e <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a1e:	4b15      	ldr	r3, [pc, #84]	; (8003a74 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003a20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a24:	0a1b      	lsrs	r3, r3, #8
 8003a26:	f003 030f 	and.w	r3, r3, #15
 8003a2a:	617b      	str	r3, [r7, #20]
 8003a2c:	e005      	b.n	8003a3a <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a2e:	4b11      	ldr	r3, [pc, #68]	; (8003a74 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	091b      	lsrs	r3, r3, #4
 8003a34:	f003 030f 	and.w	r3, r3, #15
 8003a38:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8003a3a:	4a11      	ldr	r2, [pc, #68]	; (8003a80 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a42:	613b      	str	r3, [r7, #16]
        break;
 8003a44:	e002      	b.n	8003a4c <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8003a46:	2300      	movs	r3, #0
 8003a48:	613b      	str	r3, [r7, #16]
      break;
 8003a4a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8003a4c:	4b09      	ldr	r3, [pc, #36]	; (8003a74 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	0e5b      	lsrs	r3, r3, #25
 8003a52:	f003 0303 	and.w	r3, r3, #3
 8003a56:	3301      	adds	r3, #1
 8003a58:	005b      	lsls	r3, r3, #1
 8003a5a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a64:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003a66:	683b      	ldr	r3, [r7, #0]
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	371c      	adds	r7, #28
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr
 8003a74:	40021000 	.word	0x40021000
 8003a78:	00f42400 	.word	0x00f42400
 8003a7c:	007a1200 	.word	0x007a1200
 8003a80:	080060e4 	.word	0x080060e4

08003a84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b088      	sub	sp, #32
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a90:	2300      	movs	r3, #0
 8003a92:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d040      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003aa4:	2b80      	cmp	r3, #128	; 0x80
 8003aa6:	d02a      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003aa8:	2b80      	cmp	r3, #128	; 0x80
 8003aaa:	d825      	bhi.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003aac:	2b60      	cmp	r3, #96	; 0x60
 8003aae:	d026      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003ab0:	2b60      	cmp	r3, #96	; 0x60
 8003ab2:	d821      	bhi.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003ab4:	2b40      	cmp	r3, #64	; 0x40
 8003ab6:	d006      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003ab8:	2b40      	cmp	r3, #64	; 0x40
 8003aba:	d81d      	bhi.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d009      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003ac0:	2b20      	cmp	r3, #32
 8003ac2:	d010      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003ac4:	e018      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ac6:	4b8f      	ldr	r3, [pc, #572]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	4a8e      	ldr	r2, [pc, #568]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ad0:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003ad2:	e015      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	3304      	adds	r3, #4
 8003ad8:	2100      	movs	r1, #0
 8003ada:	4618      	mov	r0, r3
 8003adc:	f000 fb56 	bl	800418c <RCCEx_PLLSAI1_Config>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003ae4:	e00c      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	3320      	adds	r3, #32
 8003aea:	2100      	movs	r1, #0
 8003aec:	4618      	mov	r0, r3
 8003aee:	f000 fc33 	bl	8004358 <RCCEx_PLLSAI2_Config>
 8003af2:	4603      	mov	r3, r0
 8003af4:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003af6:	e003      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	77fb      	strb	r3, [r7, #31]
        break;
 8003afc:	e000      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8003afe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b00:	7ffb      	ldrb	r3, [r7, #31]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d10b      	bne.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b06:	4b7f      	ldr	r3, [pc, #508]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b0c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b14:	497b      	ldr	r1, [pc, #492]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003b1c:	e001      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b1e:	7ffb      	ldrb	r3, [r7, #31]
 8003b20:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d047      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b36:	d030      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003b38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b3c:	d82a      	bhi.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003b3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b42:	d02a      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003b44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b48:	d824      	bhi.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003b4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b4e:	d008      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003b50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b54:	d81e      	bhi.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00a      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003b5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b5e:	d010      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003b60:	e018      	b.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b62:	4b68      	ldr	r3, [pc, #416]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	4a67      	ldr	r2, [pc, #412]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b6c:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003b6e:	e015      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	3304      	adds	r3, #4
 8003b74:	2100      	movs	r1, #0
 8003b76:	4618      	mov	r0, r3
 8003b78:	f000 fb08 	bl	800418c <RCCEx_PLLSAI1_Config>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003b80:	e00c      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	3320      	adds	r3, #32
 8003b86:	2100      	movs	r1, #0
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f000 fbe5 	bl	8004358 <RCCEx_PLLSAI2_Config>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003b92:	e003      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	77fb      	strb	r3, [r7, #31]
        break;
 8003b98:	e000      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8003b9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b9c:	7ffb      	ldrb	r3, [r7, #31]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d10b      	bne.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003ba2:	4b58      	ldr	r3, [pc, #352]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ba4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ba8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb0:	4954      	ldr	r1, [pc, #336]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003bb8:	e001      	b.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bba:	7ffb      	ldrb	r3, [r7, #31]
 8003bbc:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	f000 80ab 	beq.w	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bd0:	4b4c      	ldr	r3, [pc, #304]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d10d      	bne.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bdc:	4b49      	ldr	r3, [pc, #292]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be0:	4a48      	ldr	r2, [pc, #288]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003be2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003be6:	6593      	str	r3, [r2, #88]	; 0x58
 8003be8:	4b46      	ldr	r3, [pc, #280]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bf0:	60fb      	str	r3, [r7, #12]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bf8:	4b43      	ldr	r3, [pc, #268]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a42      	ldr	r2, [pc, #264]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003bfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c02:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c04:	f7fd fb66 	bl	80012d4 <HAL_GetTick>
 8003c08:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c0a:	e00f      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c0c:	f7fd fb62 	bl	80012d4 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d908      	bls.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c1a:	4b3b      	ldr	r3, [pc, #236]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d109      	bne.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8003c2a:	e006      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c2c:	4b36      	ldr	r3, [pc, #216]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d0e9      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x188>
 8003c38:	e000      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8003c3a:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8003c3c:	7ffb      	ldrb	r3, [r7, #31]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d164      	bne.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c42:	4b30      	ldr	r3, [pc, #192]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c4c:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d01f      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c5a:	69ba      	ldr	r2, [r7, #24]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d019      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c60:	4b28      	ldr	r3, [pc, #160]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c6a:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c6c:	4b25      	ldr	r3, [pc, #148]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c72:	4a24      	ldr	r2, [pc, #144]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c7c:	4b21      	ldr	r3, [pc, #132]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c82:	4a20      	ldr	r2, [pc, #128]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c8c:	4a1d      	ldr	r2, [pc, #116]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d01f      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c9e:	f7fd fb19 	bl	80012d4 <HAL_GetTick>
 8003ca2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ca4:	e012      	b.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ca6:	f7fd fb15 	bl	80012d4 <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d909      	bls.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cb8:	4b12      	ldr	r3, [pc, #72]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d10a      	bne.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8003cca:	e007      	b.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ccc:	4b0d      	ldr	r3, [pc, #52]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d0e5      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8003cda:	e000      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8003cdc:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8003cde:	7ffb      	ldrb	r3, [r7, #31]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d10c      	bne.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ce4:	4b07      	ldr	r3, [pc, #28]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cf4:	4903      	ldr	r1, [pc, #12]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003cfc:	e008      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003cfe:	7ffb      	ldrb	r3, [r7, #31]
 8003d00:	77bb      	strb	r3, [r7, #30]
 8003d02:	e005      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8003d04:	40021000 	.word	0x40021000
 8003d08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d0c:	7ffb      	ldrb	r3, [r7, #31]
 8003d0e:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d10:	7dfb      	ldrb	r3, [r7, #23]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d105      	bne.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d16:	4b9c      	ldr	r3, [pc, #624]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d1a:	4a9b      	ldr	r2, [pc, #620]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d20:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00a      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d2e:	4b96      	ldr	r3, [pc, #600]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d34:	f023 0203 	bic.w	r2, r3, #3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d3c:	4992      	ldr	r1, [pc, #584]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0302 	and.w	r3, r3, #2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00a      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d50:	4b8d      	ldr	r3, [pc, #564]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d56:	f023 020c 	bic.w	r2, r3, #12
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5e:	498a      	ldr	r1, [pc, #552]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0304 	and.w	r3, r3, #4
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00a      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d72:	4b85      	ldr	r3, [pc, #532]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d78:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d80:	4981      	ldr	r1, [pc, #516]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0308 	and.w	r3, r3, #8
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00a      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d94:	4b7c      	ldr	r3, [pc, #496]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d9a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da2:	4979      	ldr	r1, [pc, #484]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0310 	and.w	r3, r3, #16
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00a      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003db6:	4b74      	ldr	r3, [pc, #464]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc4:	4970      	ldr	r1, [pc, #448]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0320 	and.w	r3, r3, #32
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d00a      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003dd8:	4b6b      	ldr	r3, [pc, #428]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dde:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003de6:	4968      	ldr	r1, [pc, #416]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00a      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003dfa:	4b63      	ldr	r3, [pc, #396]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e00:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e08:	495f      	ldr	r1, [pc, #380]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d00a      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e1c:	4b5a      	ldr	r3, [pc, #360]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e2a:	4957      	ldr	r1, [pc, #348]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00a      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003e3e:	4b52      	ldr	r3, [pc, #328]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e44:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e4c:	494e      	ldr	r1, [pc, #312]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d031      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e68:	d00e      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8003e6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e6e:	d814      	bhi.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d015      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003e74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e78:	d10f      	bne.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e7a:	4b43      	ldr	r3, [pc, #268]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	4a42      	ldr	r2, [pc, #264]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e84:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003e86:	e00c      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	3304      	adds	r3, #4
 8003e8c:	2100      	movs	r1, #0
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f000 f97c 	bl	800418c <RCCEx_PLLSAI1_Config>
 8003e94:	4603      	mov	r3, r0
 8003e96:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003e98:	e003      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	77fb      	strb	r3, [r7, #31]
        break;
 8003e9e:	e000      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8003ea0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ea2:	7ffb      	ldrb	r3, [r7, #31]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d10b      	bne.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003ea8:	4b37      	ldr	r3, [pc, #220]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eae:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003eb6:	4934      	ldr	r1, [pc, #208]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003ebe:	e001      	b.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec0:	7ffb      	ldrb	r3, [r7, #31]
 8003ec2:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d00a      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ed0:	4b2d      	ldr	r3, [pc, #180]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ede:	492a      	ldr	r1, [pc, #168]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00a      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ef2:	4b25      	ldr	r3, [pc, #148]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f00:	4921      	ldr	r1, [pc, #132]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00a      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f14:	4b1c      	ldr	r3, [pc, #112]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f1a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f22:	4919      	ldr	r1, [pc, #100]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00a      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f36:	4b14      	ldr	r3, [pc, #80]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f38:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f3c:	f023 0203 	bic.w	r2, r3, #3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f44:	4910      	ldr	r1, [pc, #64]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d02b      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f58:	4b0b      	ldr	r3, [pc, #44]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f5e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f66:	4908      	ldr	r1, [pc, #32]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f76:	d109      	bne.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f78:	4b03      	ldr	r3, [pc, #12]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	4a02      	ldr	r2, [pc, #8]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f82:	60d3      	str	r3, [r2, #12]
 8003f84:	e014      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003f86:	bf00      	nop
 8003f88:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f94:	d10c      	bne.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	3304      	adds	r3, #4
 8003f9a:	2101      	movs	r1, #1
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f000 f8f5 	bl	800418c <RCCEx_PLLSAI1_Config>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8003fa6:	7ffb      	ldrb	r3, [r7, #31]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d001      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8003fac:	7ffb      	ldrb	r3, [r7, #31]
 8003fae:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d04a      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fc4:	d108      	bne.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8003fc6:	4b70      	ldr	r3, [pc, #448]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003fc8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003fcc:	4a6e      	ldr	r2, [pc, #440]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003fce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fd2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003fd6:	e012      	b.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003fd8:	4b6b      	ldr	r3, [pc, #428]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fde:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fe6:	4968      	ldr	r1, [pc, #416]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003fee:	4b66      	ldr	r3, [pc, #408]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003ff0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ff4:	4a64      	ldr	r2, [pc, #400]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003ff6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ffa:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004002:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004006:	d10d      	bne.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	3304      	adds	r3, #4
 800400c:	2101      	movs	r1, #1
 800400e:	4618      	mov	r0, r3
 8004010:	f000 f8bc 	bl	800418c <RCCEx_PLLSAI1_Config>
 8004014:	4603      	mov	r3, r0
 8004016:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004018:	7ffb      	ldrb	r3, [r7, #31]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d019      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 800401e:	7ffb      	ldrb	r3, [r7, #31]
 8004020:	77bb      	strb	r3, [r7, #30]
 8004022:	e016      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004028:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800402c:	d106      	bne.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800402e:	4b56      	ldr	r3, [pc, #344]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	4a55      	ldr	r2, [pc, #340]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004034:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004038:	60d3      	str	r3, [r2, #12]
 800403a:	e00a      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004040:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004044:	d105      	bne.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004046:	4b50      	ldr	r3, [pc, #320]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	4a4f      	ldr	r2, [pc, #316]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800404c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004050:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d028      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800405e:	4b4a      	ldr	r3, [pc, #296]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004064:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800406c:	4946      	ldr	r1, [pc, #280]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800406e:	4313      	orrs	r3, r2
 8004070:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004078:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800407c:	d106      	bne.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800407e:	4b42      	ldr	r3, [pc, #264]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	4a41      	ldr	r2, [pc, #260]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004084:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004088:	60d3      	str	r3, [r2, #12]
 800408a:	e011      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004090:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004094:	d10c      	bne.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	3304      	adds	r3, #4
 800409a:	2101      	movs	r1, #1
 800409c:	4618      	mov	r0, r3
 800409e:	f000 f875 	bl	800418c <RCCEx_PLLSAI1_Config>
 80040a2:	4603      	mov	r3, r0
 80040a4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80040a6:	7ffb      	ldrb	r3, [r7, #31]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d001      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 80040ac:	7ffb      	ldrb	r3, [r7, #31]
 80040ae:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d01e      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040bc:	4b32      	ldr	r3, [pc, #200]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80040be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040cc:	492e      	ldr	r1, [pc, #184]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040de:	d10c      	bne.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	3304      	adds	r3, #4
 80040e4:	2102      	movs	r1, #2
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 f850 	bl	800418c <RCCEx_PLLSAI1_Config>
 80040ec:	4603      	mov	r3, r0
 80040ee:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80040f0:	7ffb      	ldrb	r3, [r7, #31]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d001      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 80040f6:	7ffb      	ldrb	r3, [r7, #31]
 80040f8:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00b      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004106:	4b20      	ldr	r3, [pc, #128]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004108:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800410c:	f023 0204 	bic.w	r2, r3, #4
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004116:	491c      	ldr	r1, [pc, #112]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004118:	4313      	orrs	r3, r2
 800411a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00b      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800412a:	4b17      	ldr	r3, [pc, #92]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800412c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004130:	f023 0218 	bic.w	r2, r3, #24
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800413a:	4913      	ldr	r1, [pc, #76]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800413c:	4313      	orrs	r3, r2
 800413e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d017      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800414e:	4b0e      	ldr	r3, [pc, #56]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004150:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004154:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800415e:	490a      	ldr	r1, [pc, #40]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004160:	4313      	orrs	r3, r2
 8004162:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800416c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004170:	d105      	bne.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004172:	4b05      	ldr	r3, [pc, #20]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	4a04      	ldr	r2, [pc, #16]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004178:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800417c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800417e:	7fbb      	ldrb	r3, [r7, #30]
}
 8004180:	4618      	mov	r0, r3
 8004182:	3720      	adds	r7, #32
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	40021000 	.word	0x40021000

0800418c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004196:	2300      	movs	r3, #0
 8004198:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2b03      	cmp	r3, #3
 80041a0:	d018      	beq.n	80041d4 <RCCEx_PLLSAI1_Config+0x48>
 80041a2:	2b03      	cmp	r3, #3
 80041a4:	d81f      	bhi.n	80041e6 <RCCEx_PLLSAI1_Config+0x5a>
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d002      	beq.n	80041b0 <RCCEx_PLLSAI1_Config+0x24>
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d009      	beq.n	80041c2 <RCCEx_PLLSAI1_Config+0x36>
 80041ae:	e01a      	b.n	80041e6 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80041b0:	4b65      	ldr	r3, [pc, #404]	; (8004348 <RCCEx_PLLSAI1_Config+0x1bc>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0302 	and.w	r3, r3, #2
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d117      	bne.n	80041ec <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041c0:	e014      	b.n	80041ec <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80041c2:	4b61      	ldr	r3, [pc, #388]	; (8004348 <RCCEx_PLLSAI1_Config+0x1bc>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d110      	bne.n	80041f0 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041d2:	e00d      	b.n	80041f0 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80041d4:	4b5c      	ldr	r3, [pc, #368]	; (8004348 <RCCEx_PLLSAI1_Config+0x1bc>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d109      	bne.n	80041f4 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041e4:	e006      	b.n	80041f4 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	73fb      	strb	r3, [r7, #15]
      break;
 80041ea:	e004      	b.n	80041f6 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80041ec:	bf00      	nop
 80041ee:	e002      	b.n	80041f6 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80041f0:	bf00      	nop
 80041f2:	e000      	b.n	80041f6 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80041f4:	bf00      	nop
  }

  if (status == HAL_OK)
 80041f6:	7bfb      	ldrb	r3, [r7, #15]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	f040 809f 	bne.w	800433c <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80041fe:	4b52      	ldr	r3, [pc, #328]	; (8004348 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a51      	ldr	r2, [pc, #324]	; (8004348 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004204:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004208:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800420a:	f7fd f863 	bl	80012d4 <HAL_GetTick>
 800420e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004210:	e00f      	b.n	8004232 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004212:	f7fd f85f 	bl	80012d4 <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	2b02      	cmp	r3, #2
 800421e:	d908      	bls.n	8004232 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004220:	4b49      	ldr	r3, [pc, #292]	; (8004348 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d009      	beq.n	8004240 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004230:	e006      	b.n	8004240 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004232:	4b45      	ldr	r3, [pc, #276]	; (8004348 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1e9      	bne.n	8004212 <RCCEx_PLLSAI1_Config+0x86>
 800423e:	e000      	b.n	8004242 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8004240:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8004242:	7bfb      	ldrb	r3, [r7, #15]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d179      	bne.n	800433c <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d116      	bne.n	800427c <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800424e:	4b3e      	ldr	r3, [pc, #248]	; (8004348 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004250:	691a      	ldr	r2, [r3, #16]
 8004252:	4b3e      	ldr	r3, [pc, #248]	; (800434c <RCCEx_PLLSAI1_Config+0x1c0>)
 8004254:	4013      	ands	r3, r2
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	6892      	ldr	r2, [r2, #8]
 800425a:	0211      	lsls	r1, r2, #8
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	68d2      	ldr	r2, [r2, #12]
 8004260:	06d2      	lsls	r2, r2, #27
 8004262:	4311      	orrs	r1, r2
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	6852      	ldr	r2, [r2, #4]
 8004268:	3a01      	subs	r2, #1
 800426a:	0112      	lsls	r2, r2, #4
 800426c:	4311      	orrs	r1, r2
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	6812      	ldr	r2, [r2, #0]
 8004272:	430a      	orrs	r2, r1
 8004274:	4934      	ldr	r1, [pc, #208]	; (8004348 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004276:	4313      	orrs	r3, r2
 8004278:	610b      	str	r3, [r1, #16]
 800427a:	e033      	b.n	80042e4 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d118      	bne.n	80042b4 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004282:	4b31      	ldr	r3, [pc, #196]	; (8004348 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004284:	691a      	ldr	r2, [r3, #16]
 8004286:	4b32      	ldr	r3, [pc, #200]	; (8004350 <RCCEx_PLLSAI1_Config+0x1c4>)
 8004288:	4013      	ands	r3, r2
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	6892      	ldr	r2, [r2, #8]
 800428e:	0211      	lsls	r1, r2, #8
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	6912      	ldr	r2, [r2, #16]
 8004294:	0852      	lsrs	r2, r2, #1
 8004296:	3a01      	subs	r2, #1
 8004298:	0552      	lsls	r2, r2, #21
 800429a:	4311      	orrs	r1, r2
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	6852      	ldr	r2, [r2, #4]
 80042a0:	3a01      	subs	r2, #1
 80042a2:	0112      	lsls	r2, r2, #4
 80042a4:	4311      	orrs	r1, r2
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	6812      	ldr	r2, [r2, #0]
 80042aa:	430a      	orrs	r2, r1
 80042ac:	4926      	ldr	r1, [pc, #152]	; (8004348 <RCCEx_PLLSAI1_Config+0x1bc>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	610b      	str	r3, [r1, #16]
 80042b2:	e017      	b.n	80042e4 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042b4:	4b24      	ldr	r3, [pc, #144]	; (8004348 <RCCEx_PLLSAI1_Config+0x1bc>)
 80042b6:	691a      	ldr	r2, [r3, #16]
 80042b8:	4b26      	ldr	r3, [pc, #152]	; (8004354 <RCCEx_PLLSAI1_Config+0x1c8>)
 80042ba:	4013      	ands	r3, r2
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	6892      	ldr	r2, [r2, #8]
 80042c0:	0211      	lsls	r1, r2, #8
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	6952      	ldr	r2, [r2, #20]
 80042c6:	0852      	lsrs	r2, r2, #1
 80042c8:	3a01      	subs	r2, #1
 80042ca:	0652      	lsls	r2, r2, #25
 80042cc:	4311      	orrs	r1, r2
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	6852      	ldr	r2, [r2, #4]
 80042d2:	3a01      	subs	r2, #1
 80042d4:	0112      	lsls	r2, r2, #4
 80042d6:	4311      	orrs	r1, r2
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	6812      	ldr	r2, [r2, #0]
 80042dc:	430a      	orrs	r2, r1
 80042de:	491a      	ldr	r1, [pc, #104]	; (8004348 <RCCEx_PLLSAI1_Config+0x1bc>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80042e4:	4b18      	ldr	r3, [pc, #96]	; (8004348 <RCCEx_PLLSAI1_Config+0x1bc>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a17      	ldr	r2, [pc, #92]	; (8004348 <RCCEx_PLLSAI1_Config+0x1bc>)
 80042ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80042ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042f0:	f7fc fff0 	bl	80012d4 <HAL_GetTick>
 80042f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042f6:	e00f      	b.n	8004318 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042f8:	f7fc ffec 	bl	80012d4 <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	2b02      	cmp	r3, #2
 8004304:	d908      	bls.n	8004318 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004306:	4b10      	ldr	r3, [pc, #64]	; (8004348 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d109      	bne.n	8004326 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8004316:	e006      	b.n	8004326 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004318:	4b0b      	ldr	r3, [pc, #44]	; (8004348 <RCCEx_PLLSAI1_Config+0x1bc>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d0e9      	beq.n	80042f8 <RCCEx_PLLSAI1_Config+0x16c>
 8004324:	e000      	b.n	8004328 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8004326:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8004328:	7bfb      	ldrb	r3, [r7, #15]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d106      	bne.n	800433c <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 800432e:	4b06      	ldr	r3, [pc, #24]	; (8004348 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004330:	691a      	ldr	r2, [r3, #16]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	4904      	ldr	r1, [pc, #16]	; (8004348 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004338:	4313      	orrs	r3, r2
 800433a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800433c:	7bfb      	ldrb	r3, [r7, #15]
}
 800433e:	4618      	mov	r0, r3
 8004340:	3710      	adds	r7, #16
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	40021000 	.word	0x40021000
 800434c:	07ff800c 	.word	0x07ff800c
 8004350:	ff9f800c 	.word	0xff9f800c
 8004354:	f9ff800c 	.word	0xf9ff800c

08004358 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004362:	2300      	movs	r3, #0
 8004364:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2b03      	cmp	r3, #3
 800436c:	d018      	beq.n	80043a0 <RCCEx_PLLSAI2_Config+0x48>
 800436e:	2b03      	cmp	r3, #3
 8004370:	d81f      	bhi.n	80043b2 <RCCEx_PLLSAI2_Config+0x5a>
 8004372:	2b01      	cmp	r3, #1
 8004374:	d002      	beq.n	800437c <RCCEx_PLLSAI2_Config+0x24>
 8004376:	2b02      	cmp	r3, #2
 8004378:	d009      	beq.n	800438e <RCCEx_PLLSAI2_Config+0x36>
 800437a:	e01a      	b.n	80043b2 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800437c:	4b4a      	ldr	r3, [pc, #296]	; (80044a8 <RCCEx_PLLSAI2_Config+0x150>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	2b00      	cmp	r3, #0
 8004386:	d117      	bne.n	80043b8 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800438c:	e014      	b.n	80043b8 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800438e:	4b46      	ldr	r3, [pc, #280]	; (80044a8 <RCCEx_PLLSAI2_Config+0x150>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004396:	2b00      	cmp	r3, #0
 8004398:	d110      	bne.n	80043bc <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800439e:	e00d      	b.n	80043bc <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80043a0:	4b41      	ldr	r3, [pc, #260]	; (80044a8 <RCCEx_PLLSAI2_Config+0x150>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d109      	bne.n	80043c0 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043b0:	e006      	b.n	80043c0 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	73fb      	strb	r3, [r7, #15]
      break;
 80043b6:	e004      	b.n	80043c2 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80043b8:	bf00      	nop
 80043ba:	e002      	b.n	80043c2 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80043bc:	bf00      	nop
 80043be:	e000      	b.n	80043c2 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80043c0:	bf00      	nop
  }

  if (status == HAL_OK)
 80043c2:	7bfb      	ldrb	r3, [r7, #15]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d169      	bne.n	800449c <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80043c8:	4b37      	ldr	r3, [pc, #220]	; (80044a8 <RCCEx_PLLSAI2_Config+0x150>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a36      	ldr	r2, [pc, #216]	; (80044a8 <RCCEx_PLLSAI2_Config+0x150>)
 80043ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043d4:	f7fc ff7e 	bl	80012d4 <HAL_GetTick>
 80043d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80043da:	e00f      	b.n	80043fc <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80043dc:	f7fc ff7a 	bl	80012d4 <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d908      	bls.n	80043fc <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80043ea:	4b2f      	ldr	r3, [pc, #188]	; (80044a8 <RCCEx_PLLSAI2_Config+0x150>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d009      	beq.n	800440a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80043fa:	e006      	b.n	800440a <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80043fc:	4b2a      	ldr	r3, [pc, #168]	; (80044a8 <RCCEx_PLLSAI2_Config+0x150>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d1e9      	bne.n	80043dc <RCCEx_PLLSAI2_Config+0x84>
 8004408:	e000      	b.n	800440c <RCCEx_PLLSAI2_Config+0xb4>
        break;
 800440a:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 800440c:	7bfb      	ldrb	r3, [r7, #15]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d144      	bne.n	800449c <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d115      	bne.n	8004444 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004418:	4b23      	ldr	r3, [pc, #140]	; (80044a8 <RCCEx_PLLSAI2_Config+0x150>)
 800441a:	695a      	ldr	r2, [r3, #20]
 800441c:	4b23      	ldr	r3, [pc, #140]	; (80044ac <RCCEx_PLLSAI2_Config+0x154>)
 800441e:	4013      	ands	r3, r2
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	6892      	ldr	r2, [r2, #8]
 8004424:	0211      	lsls	r1, r2, #8
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	68d2      	ldr	r2, [r2, #12]
 800442a:	06d2      	lsls	r2, r2, #27
 800442c:	4311      	orrs	r1, r2
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	6852      	ldr	r2, [r2, #4]
 8004432:	3a01      	subs	r2, #1
 8004434:	0112      	lsls	r2, r2, #4
 8004436:	4311      	orrs	r1, r2
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	6812      	ldr	r2, [r2, #0]
 800443c:	430a      	orrs	r2, r1
 800443e:	491a      	ldr	r1, [pc, #104]	; (80044a8 <RCCEx_PLLSAI2_Config+0x150>)
 8004440:	4313      	orrs	r3, r2
 8004442:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004444:	4b18      	ldr	r3, [pc, #96]	; (80044a8 <RCCEx_PLLSAI2_Config+0x150>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a17      	ldr	r2, [pc, #92]	; (80044a8 <RCCEx_PLLSAI2_Config+0x150>)
 800444a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800444e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004450:	f7fc ff40 	bl	80012d4 <HAL_GetTick>
 8004454:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004456:	e00f      	b.n	8004478 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004458:	f7fc ff3c 	bl	80012d4 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b02      	cmp	r3, #2
 8004464:	d908      	bls.n	8004478 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004466:	4b10      	ldr	r3, [pc, #64]	; (80044a8 <RCCEx_PLLSAI2_Config+0x150>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d109      	bne.n	8004486 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8004476:	e006      	b.n	8004486 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004478:	4b0b      	ldr	r3, [pc, #44]	; (80044a8 <RCCEx_PLLSAI2_Config+0x150>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d0e9      	beq.n	8004458 <RCCEx_PLLSAI2_Config+0x100>
 8004484:	e000      	b.n	8004488 <RCCEx_PLLSAI2_Config+0x130>
          break;
 8004486:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8004488:	7bfb      	ldrb	r3, [r7, #15]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d106      	bne.n	800449c <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 800448e:	4b06      	ldr	r3, [pc, #24]	; (80044a8 <RCCEx_PLLSAI2_Config+0x150>)
 8004490:	695a      	ldr	r2, [r3, #20]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	4904      	ldr	r1, [pc, #16]	; (80044a8 <RCCEx_PLLSAI2_Config+0x150>)
 8004498:	4313      	orrs	r3, r2
 800449a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800449c:	7bfb      	ldrb	r3, [r7, #15]
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	40021000 	.word	0x40021000
 80044ac:	07ff800c 	.word	0x07ff800c

080044b0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d066      	beq.n	8004590 <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d106      	bne.n	80044dc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f7fc fcb2 	bl	8000e40 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2202      	movs	r2, #2
 80044e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	f003 0310 	and.w	r3, r3, #16
 80044ee:	2b10      	cmp	r3, #16
 80044f0:	d045      	beq.n	800457e <HAL_RTC_Init+0xce>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80044f2:	4b2a      	ldr	r3, [pc, #168]	; (800459c <HAL_RTC_Init+0xec>)
 80044f4:	22ca      	movs	r2, #202	; 0xca
 80044f6:	625a      	str	r2, [r3, #36]	; 0x24
 80044f8:	4b28      	ldr	r3, [pc, #160]	; (800459c <HAL_RTC_Init+0xec>)
 80044fa:	2253      	movs	r2, #83	; 0x53
 80044fc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 f872 	bl	80045e8 <RTC_EnterInitMode>
 8004504:	4603      	mov	r3, r0
 8004506:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004508:	7bfb      	ldrb	r3, [r7, #15]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d121      	bne.n	8004552 <HAL_RTC_Init+0xa2>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800450e:	4b23      	ldr	r3, [pc, #140]	; (800459c <HAL_RTC_Init+0xec>)
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	4a22      	ldr	r2, [pc, #136]	; (800459c <HAL_RTC_Init+0xec>)
 8004514:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8004518:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800451c:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800451e:	4b1f      	ldr	r3, [pc, #124]	; (800459c <HAL_RTC_Init+0xec>)
 8004520:	699a      	ldr	r2, [r3, #24]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6859      	ldr	r1, [r3, #4]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	4319      	orrs	r1, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	430b      	orrs	r3, r1
 8004532:	491a      	ldr	r1, [pc, #104]	; (800459c <HAL_RTC_Init+0xec>)
 8004534:	4313      	orrs	r3, r2
 8004536:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	68da      	ldr	r2, [r3, #12]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	041b      	lsls	r3, r3, #16
 8004542:	4916      	ldr	r1, [pc, #88]	; (800459c <HAL_RTC_Init+0xec>)
 8004544:	4313      	orrs	r3, r2
 8004546:	610b      	str	r3, [r1, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 f881 	bl	8004650 <RTC_ExitInitMode>
 800454e:	4603      	mov	r3, r0
 8004550:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8004552:	7bfb      	ldrb	r3, [r7, #15]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d10e      	bne.n	8004576 <HAL_RTC_Init+0xc6>
      {
        MODIFY_REG(RTC->CR, \
 8004558:	4b10      	ldr	r3, [pc, #64]	; (800459c <HAL_RTC_Init+0xec>)
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a19      	ldr	r1, [r3, #32]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	69db      	ldr	r3, [r3, #28]
 8004568:	4319      	orrs	r1, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	430b      	orrs	r3, r1
 8004570:	490a      	ldr	r1, [pc, #40]	; (800459c <HAL_RTC_Init+0xec>)
 8004572:	4313      	orrs	r3, r2
 8004574:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }


    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004576:	4b09      	ldr	r3, [pc, #36]	; (800459c <HAL_RTC_Init+0xec>)
 8004578:	22ff      	movs	r2, #255	; 0xff
 800457a:	625a      	str	r2, [r3, #36]	; 0x24
 800457c:	e001      	b.n	8004582 <HAL_RTC_Init+0xd2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800457e:	2300      	movs	r3, #0
 8004580:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004582:	7bfb      	ldrb	r3, [r7, #15]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d103      	bne.n	8004590 <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8004590:	7bfb      	ldrb	r3, [r7, #15]
}
 8004592:	4618      	mov	r0, r3
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	40002800 	.word	0x40002800

080045a0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  WRITE_REG(RTC->ICSR, ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK)));
 80045a8:	4b0d      	ldr	r3, [pc, #52]	; (80045e0 <HAL_RTC_WaitForSynchro+0x40>)
 80045aa:	4a0e      	ldr	r2, [pc, #56]	; (80045e4 <HAL_RTC_WaitForSynchro+0x44>)
 80045ac:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80045ae:	f7fc fe91 	bl	80012d4 <HAL_GetTick>
 80045b2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80045b4:	e009      	b.n	80045ca <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80045b6:	f7fc fe8d 	bl	80012d4 <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045c4:	d901      	bls.n	80045ca <HAL_RTC_WaitForSynchro+0x2a>
    {
      return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e006      	b.n	80045d8 <HAL_RTC_WaitForSynchro+0x38>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80045ca:	4b05      	ldr	r3, [pc, #20]	; (80045e0 <HAL_RTC_WaitForSynchro+0x40>)
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	f003 0320 	and.w	r3, r3, #32
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d0ef      	beq.n	80045b6 <HAL_RTC_WaitForSynchro+0x16>
    }
  }

  return HAL_OK;
 80045d6:	2300      	movs	r3, #0
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3710      	adds	r7, #16
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	40002800 	.word	0x40002800
 80045e4:	0001005c 	.word	0x0001005c

080045e8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045f0:	2300      	movs	r3, #0
 80045f2:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80045f4:	4b15      	ldr	r3, [pc, #84]	; (800464c <RTC_EnterInitMode+0x64>)
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d120      	bne.n	8004642 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004600:	4b12      	ldr	r3, [pc, #72]	; (800464c <RTC_EnterInitMode+0x64>)
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	4a11      	ldr	r2, [pc, #68]	; (800464c <RTC_EnterInitMode+0x64>)
 8004606:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800460a:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800460c:	f7fc fe62 	bl	80012d4 <HAL_GetTick>
 8004610:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004612:	e00d      	b.n	8004630 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004614:	f7fc fe5e 	bl	80012d4 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004622:	d905      	bls.n	8004630 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2203      	movs	r2, #3
 800462c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004630:	4b06      	ldr	r3, [pc, #24]	; (800464c <RTC_EnterInitMode+0x64>)
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004638:	2b00      	cmp	r3, #0
 800463a:	d102      	bne.n	8004642 <RTC_EnterInitMode+0x5a>
 800463c:	7bfb      	ldrb	r3, [r7, #15]
 800463e:	2b03      	cmp	r3, #3
 8004640:	d1e8      	bne.n	8004614 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8004642:	7bfb      	ldrb	r3, [r7, #15]
}
 8004644:	4618      	mov	r0, r3
 8004646:	3710      	adds	r7, #16
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	40002800 	.word	0x40002800

08004650 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004658:	2300      	movs	r3, #0
 800465a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800465c:	4b1a      	ldr	r3, [pc, #104]	; (80046c8 <RTC_ExitInitMode+0x78>)
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	4a19      	ldr	r2, [pc, #100]	; (80046c8 <RTC_ExitInitMode+0x78>)
 8004662:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004666:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004668:	4b17      	ldr	r3, [pc, #92]	; (80046c8 <RTC_ExitInitMode+0x78>)
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	f003 0320 	and.w	r3, r3, #32
 8004670:	2b00      	cmp	r3, #0
 8004672:	d10c      	bne.n	800468e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f7ff ff93 	bl	80045a0 <HAL_RTC_WaitForSynchro>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d01e      	beq.n	80046be <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2203      	movs	r2, #3
 8004684:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	73fb      	strb	r3, [r7, #15]
 800468c:	e017      	b.n	80046be <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800468e:	4b0e      	ldr	r3, [pc, #56]	; (80046c8 <RTC_ExitInitMode+0x78>)
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	4a0d      	ldr	r2, [pc, #52]	; (80046c8 <RTC_ExitInitMode+0x78>)
 8004694:	f023 0320 	bic.w	r3, r3, #32
 8004698:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f7ff ff80 	bl	80045a0 <HAL_RTC_WaitForSynchro>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d005      	beq.n	80046b2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2203      	movs	r2, #3
 80046aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80046b2:	4b05      	ldr	r3, [pc, #20]	; (80046c8 <RTC_ExitInitMode+0x78>)
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	4a04      	ldr	r2, [pc, #16]	; (80046c8 <RTC_ExitInitMode+0x78>)
 80046b8:	f043 0320 	orr.w	r3, r3, #32
 80046bc:	6193      	str	r3, [r2, #24]
  }

  return status;
 80046be:	7bfb      	ldrb	r3, [r7, #15]
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3710      	adds	r7, #16
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	40002800 	.word	0x40002800

080046cc <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	490f      	ldr	r1, [pc, #60]	; (800471c <HAL_RTCEx_PrivilegeModeSet+0x50>)
 80046e0:	4313      	orrs	r3, r2
 80046e2:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	689a      	ldr	r2, [r3, #8]
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	490c      	ldr	r1, [pc, #48]	; (8004720 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80046ee:	4313      	orrs	r3, r2
 80046f0:	624b      	str	r3, [r1, #36]	; 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 80046f2:	4b0b      	ldr	r3, [pc, #44]	; (8004720 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	6919      	ldr	r1, [r3, #16]
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	041b      	lsls	r3, r3, #16
 8004704:	430b      	orrs	r3, r1
 8004706:	4906      	ldr	r1, [pc, #24]	; (8004720 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8004708:	4313      	orrs	r3, r2
 800470a:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	370c      	adds	r7, #12
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	40002800 	.word	0x40002800
 8004720:	40003400 	.word	0x40003400

08004724 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d101      	bne.n	8004736 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e049      	b.n	80047ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d106      	bne.n	8004750 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f7fc fbb6 	bl	8000ebc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2202      	movs	r2, #2
 8004754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	3304      	adds	r3, #4
 8004760:	4619      	mov	r1, r3
 8004762:	4610      	mov	r0, r2
 8004764:	f000 fa2e 	bl	8004bc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3708      	adds	r7, #8
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047d2:	b580      	push	{r7, lr}
 80047d4:	b084      	sub	sp, #16
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d020      	beq.n	8004836 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f003 0302 	and.w	r3, r3, #2
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d01b      	beq.n	8004836 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f06f 0202 	mvn.w	r2, #2
 8004806:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	f003 0303 	and.w	r3, r3, #3
 8004818:	2b00      	cmp	r3, #0
 800481a:	d003      	beq.n	8004824 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f000 f9b2 	bl	8004b86 <HAL_TIM_IC_CaptureCallback>
 8004822:	e005      	b.n	8004830 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f000 f9a4 	bl	8004b72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 f9b5 	bl	8004b9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	f003 0304 	and.w	r3, r3, #4
 800483c:	2b00      	cmp	r3, #0
 800483e:	d020      	beq.n	8004882 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f003 0304 	and.w	r3, r3, #4
 8004846:	2b00      	cmp	r3, #0
 8004848:	d01b      	beq.n	8004882 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f06f 0204 	mvn.w	r2, #4
 8004852:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2202      	movs	r2, #2
 8004858:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004864:	2b00      	cmp	r3, #0
 8004866:	d003      	beq.n	8004870 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f000 f98c 	bl	8004b86 <HAL_TIM_IC_CaptureCallback>
 800486e:	e005      	b.n	800487c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f000 f97e 	bl	8004b72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 f98f 	bl	8004b9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	f003 0308 	and.w	r3, r3, #8
 8004888:	2b00      	cmp	r3, #0
 800488a:	d020      	beq.n	80048ce <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f003 0308 	and.w	r3, r3, #8
 8004892:	2b00      	cmp	r3, #0
 8004894:	d01b      	beq.n	80048ce <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f06f 0208 	mvn.w	r2, #8
 800489e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2204      	movs	r2, #4
 80048a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	69db      	ldr	r3, [r3, #28]
 80048ac:	f003 0303 	and.w	r3, r3, #3
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d003      	beq.n	80048bc <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f000 f966 	bl	8004b86 <HAL_TIM_IC_CaptureCallback>
 80048ba:	e005      	b.n	80048c8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 f958 	bl	8004b72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 f969 	bl	8004b9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	f003 0310 	and.w	r3, r3, #16
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d020      	beq.n	800491a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f003 0310 	and.w	r3, r3, #16
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d01b      	beq.n	800491a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f06f 0210 	mvn.w	r2, #16
 80048ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2208      	movs	r2, #8
 80048f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	69db      	ldr	r3, [r3, #28]
 80048f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d003      	beq.n	8004908 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f000 f940 	bl	8004b86 <HAL_TIM_IC_CaptureCallback>
 8004906:	e005      	b.n	8004914 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f000 f932 	bl	8004b72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 f943 	bl	8004b9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	f003 0301 	and.w	r3, r3, #1
 8004920:	2b00      	cmp	r3, #0
 8004922:	d00c      	beq.n	800493e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b00      	cmp	r3, #0
 800492c:	d007      	beq.n	800493e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f06f 0201 	mvn.w	r2, #1
 8004936:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f7fb fe51 	bl	80005e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004944:	2b00      	cmp	r3, #0
 8004946:	d104      	bne.n	8004952 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00c      	beq.n	800496c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004958:	2b00      	cmp	r3, #0
 800495a:	d007      	beq.n	800496c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8004964:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 fb00 	bl	8004f6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004972:	2b00      	cmp	r3, #0
 8004974:	d00c      	beq.n	8004990 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800497c:	2b00      	cmp	r3, #0
 800497e:	d007      	beq.n	8004990 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 faf8 	bl	8004f80 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00c      	beq.n	80049b4 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d007      	beq.n	80049b4 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80049ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 f8fd 	bl	8004bae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	f003 0320 	and.w	r3, r3, #32
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00c      	beq.n	80049d8 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f003 0320 	and.w	r3, r3, #32
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d007      	beq.n	80049d8 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f06f 0220 	mvn.w	r2, #32
 80049d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 fac0 	bl	8004f58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049d8:	bf00      	nop
 80049da:	3710      	adds	r7, #16
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049ea:	2300      	movs	r3, #0
 80049ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d101      	bne.n	80049fc <HAL_TIM_ConfigClockSource+0x1c>
 80049f8:	2302      	movs	r3, #2
 80049fa:	e0b6      	b.n	8004b6a <HAL_TIM_ConfigClockSource+0x18a>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2202      	movs	r2, #2
 8004a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004a1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68ba      	ldr	r2, [r7, #8]
 8004a2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a38:	d03e      	beq.n	8004ab8 <HAL_TIM_ConfigClockSource+0xd8>
 8004a3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a3e:	f200 8087 	bhi.w	8004b50 <HAL_TIM_ConfigClockSource+0x170>
 8004a42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a46:	f000 8086 	beq.w	8004b56 <HAL_TIM_ConfigClockSource+0x176>
 8004a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a4e:	d87f      	bhi.n	8004b50 <HAL_TIM_ConfigClockSource+0x170>
 8004a50:	2b70      	cmp	r3, #112	; 0x70
 8004a52:	d01a      	beq.n	8004a8a <HAL_TIM_ConfigClockSource+0xaa>
 8004a54:	2b70      	cmp	r3, #112	; 0x70
 8004a56:	d87b      	bhi.n	8004b50 <HAL_TIM_ConfigClockSource+0x170>
 8004a58:	2b60      	cmp	r3, #96	; 0x60
 8004a5a:	d050      	beq.n	8004afe <HAL_TIM_ConfigClockSource+0x11e>
 8004a5c:	2b60      	cmp	r3, #96	; 0x60
 8004a5e:	d877      	bhi.n	8004b50 <HAL_TIM_ConfigClockSource+0x170>
 8004a60:	2b50      	cmp	r3, #80	; 0x50
 8004a62:	d03c      	beq.n	8004ade <HAL_TIM_ConfigClockSource+0xfe>
 8004a64:	2b50      	cmp	r3, #80	; 0x50
 8004a66:	d873      	bhi.n	8004b50 <HAL_TIM_ConfigClockSource+0x170>
 8004a68:	2b40      	cmp	r3, #64	; 0x40
 8004a6a:	d058      	beq.n	8004b1e <HAL_TIM_ConfigClockSource+0x13e>
 8004a6c:	2b40      	cmp	r3, #64	; 0x40
 8004a6e:	d86f      	bhi.n	8004b50 <HAL_TIM_ConfigClockSource+0x170>
 8004a70:	2b30      	cmp	r3, #48	; 0x30
 8004a72:	d064      	beq.n	8004b3e <HAL_TIM_ConfigClockSource+0x15e>
 8004a74:	2b30      	cmp	r3, #48	; 0x30
 8004a76:	d86b      	bhi.n	8004b50 <HAL_TIM_ConfigClockSource+0x170>
 8004a78:	2b20      	cmp	r3, #32
 8004a7a:	d060      	beq.n	8004b3e <HAL_TIM_ConfigClockSource+0x15e>
 8004a7c:	2b20      	cmp	r3, #32
 8004a7e:	d867      	bhi.n	8004b50 <HAL_TIM_ConfigClockSource+0x170>
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d05c      	beq.n	8004b3e <HAL_TIM_ConfigClockSource+0x15e>
 8004a84:	2b10      	cmp	r3, #16
 8004a86:	d05a      	beq.n	8004b3e <HAL_TIM_ConfigClockSource+0x15e>
 8004a88:	e062      	b.n	8004b50 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6818      	ldr	r0, [r3, #0]
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	6899      	ldr	r1, [r3, #8]
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	685a      	ldr	r2, [r3, #4]
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	f000 f9b5 	bl	8004e08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004aac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68ba      	ldr	r2, [r7, #8]
 8004ab4:	609a      	str	r2, [r3, #8]
      break;
 8004ab6:	e04f      	b.n	8004b58 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6818      	ldr	r0, [r3, #0]
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	6899      	ldr	r1, [r3, #8]
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	685a      	ldr	r2, [r3, #4]
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	f000 f99e 	bl	8004e08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	689a      	ldr	r2, [r3, #8]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ada:	609a      	str	r2, [r3, #8]
      break;
 8004adc:	e03c      	b.n	8004b58 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6818      	ldr	r0, [r3, #0]
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	6859      	ldr	r1, [r3, #4]
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	461a      	mov	r2, r3
 8004aec:	f000 f910 	bl	8004d10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2150      	movs	r1, #80	; 0x50
 8004af6:	4618      	mov	r0, r3
 8004af8:	f000 f969 	bl	8004dce <TIM_ITRx_SetConfig>
      break;
 8004afc:	e02c      	b.n	8004b58 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6818      	ldr	r0, [r3, #0]
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	6859      	ldr	r1, [r3, #4]
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	f000 f92f 	bl	8004d6e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2160      	movs	r1, #96	; 0x60
 8004b16:	4618      	mov	r0, r3
 8004b18:	f000 f959 	bl	8004dce <TIM_ITRx_SetConfig>
      break;
 8004b1c:	e01c      	b.n	8004b58 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6818      	ldr	r0, [r3, #0]
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	6859      	ldr	r1, [r3, #4]
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	f000 f8f0 	bl	8004d10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2140      	movs	r1, #64	; 0x40
 8004b36:	4618      	mov	r0, r3
 8004b38:	f000 f949 	bl	8004dce <TIM_ITRx_SetConfig>
      break;
 8004b3c:	e00c      	b.n	8004b58 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4619      	mov	r1, r3
 8004b48:	4610      	mov	r0, r2
 8004b4a:	f000 f940 	bl	8004dce <TIM_ITRx_SetConfig>
      break;
 8004b4e:	e003      	b.n	8004b58 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	73fb      	strb	r3, [r7, #15]
      break;
 8004b54:	e000      	b.n	8004b58 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004b56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3710      	adds	r7, #16
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}

08004b72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b72:	b480      	push	{r7}
 8004b74:	b083      	sub	sp, #12
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b7a:	bf00      	nop
 8004b7c:	370c      	adds	r7, #12
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr

08004b86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b86:	b480      	push	{r7}
 8004b88:	b083      	sub	sp, #12
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b8e:	bf00      	nop
 8004b90:	370c      	adds	r7, #12
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr

08004b9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b083      	sub	sp, #12
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ba2:	bf00      	nop
 8004ba4:	370c      	adds	r7, #12
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr

08004bae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004bae:	b480      	push	{r7}
 8004bb0:	b083      	sub	sp, #12
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004bb6:	bf00      	nop
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
	...

08004bc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a46      	ldr	r2, [pc, #280]	; (8004cf0 <TIM_Base_SetConfig+0x12c>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d013      	beq.n	8004c04 <TIM_Base_SetConfig+0x40>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004be2:	d00f      	beq.n	8004c04 <TIM_Base_SetConfig+0x40>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a43      	ldr	r2, [pc, #268]	; (8004cf4 <TIM_Base_SetConfig+0x130>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d00b      	beq.n	8004c04 <TIM_Base_SetConfig+0x40>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a42      	ldr	r2, [pc, #264]	; (8004cf8 <TIM_Base_SetConfig+0x134>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d007      	beq.n	8004c04 <TIM_Base_SetConfig+0x40>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a41      	ldr	r2, [pc, #260]	; (8004cfc <TIM_Base_SetConfig+0x138>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d003      	beq.n	8004c04 <TIM_Base_SetConfig+0x40>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a40      	ldr	r2, [pc, #256]	; (8004d00 <TIM_Base_SetConfig+0x13c>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d108      	bne.n	8004c16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a35      	ldr	r2, [pc, #212]	; (8004cf0 <TIM_Base_SetConfig+0x12c>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d01f      	beq.n	8004c5e <TIM_Base_SetConfig+0x9a>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c24:	d01b      	beq.n	8004c5e <TIM_Base_SetConfig+0x9a>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a32      	ldr	r2, [pc, #200]	; (8004cf4 <TIM_Base_SetConfig+0x130>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d017      	beq.n	8004c5e <TIM_Base_SetConfig+0x9a>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a31      	ldr	r2, [pc, #196]	; (8004cf8 <TIM_Base_SetConfig+0x134>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d013      	beq.n	8004c5e <TIM_Base_SetConfig+0x9a>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a30      	ldr	r2, [pc, #192]	; (8004cfc <TIM_Base_SetConfig+0x138>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d00f      	beq.n	8004c5e <TIM_Base_SetConfig+0x9a>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a2f      	ldr	r2, [pc, #188]	; (8004d00 <TIM_Base_SetConfig+0x13c>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d00b      	beq.n	8004c5e <TIM_Base_SetConfig+0x9a>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a2e      	ldr	r2, [pc, #184]	; (8004d04 <TIM_Base_SetConfig+0x140>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d007      	beq.n	8004c5e <TIM_Base_SetConfig+0x9a>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a2d      	ldr	r2, [pc, #180]	; (8004d08 <TIM_Base_SetConfig+0x144>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d003      	beq.n	8004c5e <TIM_Base_SetConfig+0x9a>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a2c      	ldr	r2, [pc, #176]	; (8004d0c <TIM_Base_SetConfig+0x148>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d108      	bne.n	8004c70 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	689a      	ldr	r2, [r3, #8]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a16      	ldr	r2, [pc, #88]	; (8004cf0 <TIM_Base_SetConfig+0x12c>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d00f      	beq.n	8004cbc <TIM_Base_SetConfig+0xf8>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a18      	ldr	r2, [pc, #96]	; (8004d00 <TIM_Base_SetConfig+0x13c>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d00b      	beq.n	8004cbc <TIM_Base_SetConfig+0xf8>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a17      	ldr	r2, [pc, #92]	; (8004d04 <TIM_Base_SetConfig+0x140>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d007      	beq.n	8004cbc <TIM_Base_SetConfig+0xf8>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a16      	ldr	r2, [pc, #88]	; (8004d08 <TIM_Base_SetConfig+0x144>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d003      	beq.n	8004cbc <TIM_Base_SetConfig+0xf8>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a15      	ldr	r2, [pc, #84]	; (8004d0c <TIM_Base_SetConfig+0x148>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d103      	bne.n	8004cc4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	691a      	ldr	r2, [r3, #16]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d105      	bne.n	8004ce2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	f023 0201 	bic.w	r2, r3, #1
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	611a      	str	r2, [r3, #16]
  }
}
 8004ce2:	bf00      	nop
 8004ce4:	3714      	adds	r7, #20
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	40012c00 	.word	0x40012c00
 8004cf4:	40000400 	.word	0x40000400
 8004cf8:	40000800 	.word	0x40000800
 8004cfc:	40000c00 	.word	0x40000c00
 8004d00:	40013400 	.word	0x40013400
 8004d04:	40014000 	.word	0x40014000
 8004d08:	40014400 	.word	0x40014400
 8004d0c:	40014800 	.word	0x40014800

08004d10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b087      	sub	sp, #28
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6a1b      	ldr	r3, [r3, #32]
 8004d20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6a1b      	ldr	r3, [r3, #32]
 8004d26:	f023 0201 	bic.w	r2, r3, #1
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	011b      	lsls	r3, r3, #4
 8004d40:	693a      	ldr	r2, [r7, #16]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	f023 030a 	bic.w	r3, r3, #10
 8004d4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	693a      	ldr	r2, [r7, #16]
 8004d5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	621a      	str	r2, [r3, #32]
}
 8004d62:	bf00      	nop
 8004d64:	371c      	adds	r7, #28
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr

08004d6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b087      	sub	sp, #28
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	60f8      	str	r0, [r7, #12]
 8004d76:	60b9      	str	r1, [r7, #8]
 8004d78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6a1b      	ldr	r3, [r3, #32]
 8004d84:	f023 0210 	bic.w	r2, r3, #16
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	699b      	ldr	r3, [r3, #24]
 8004d90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	031b      	lsls	r3, r3, #12
 8004d9e:	693a      	ldr	r2, [r7, #16]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004daa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	011b      	lsls	r3, r3, #4
 8004db0:	697a      	ldr	r2, [r7, #20]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	693a      	ldr	r2, [r7, #16]
 8004dba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	697a      	ldr	r2, [r7, #20]
 8004dc0:	621a      	str	r2, [r3, #32]
}
 8004dc2:	bf00      	nop
 8004dc4:	371c      	adds	r7, #28
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr

08004dce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004dce:	b480      	push	{r7}
 8004dd0:	b085      	sub	sp, #20
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
 8004dd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004de4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004de8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004dea:	683a      	ldr	r2, [r7, #0]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	f043 0307 	orr.w	r3, r3, #7
 8004df4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	609a      	str	r2, [r3, #8]
}
 8004dfc:	bf00      	nop
 8004dfe:	3714      	adds	r7, #20
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b087      	sub	sp, #28
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	607a      	str	r2, [r7, #4]
 8004e14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	021a      	lsls	r2, r3, #8
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	431a      	orrs	r2, r3
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	697a      	ldr	r2, [r7, #20]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	697a      	ldr	r2, [r7, #20]
 8004e3a:	609a      	str	r2, [r3, #8]
}
 8004e3c:	bf00      	nop
 8004e3e:	371c      	adds	r7, #28
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b085      	sub	sp, #20
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d101      	bne.n	8004e60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e5c:	2302      	movs	r3, #2
 8004e5e:	e068      	b.n	8004f32 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2202      	movs	r2, #2
 8004e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a2e      	ldr	r2, [pc, #184]	; (8004f40 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d004      	beq.n	8004e94 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a2d      	ldr	r2, [pc, #180]	; (8004f44 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d108      	bne.n	8004ea6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004e9a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a1e      	ldr	r2, [pc, #120]	; (8004f40 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d01d      	beq.n	8004f06 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ed2:	d018      	beq.n	8004f06 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a1b      	ldr	r2, [pc, #108]	; (8004f48 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d013      	beq.n	8004f06 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a1a      	ldr	r2, [pc, #104]	; (8004f4c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d00e      	beq.n	8004f06 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a18      	ldr	r2, [pc, #96]	; (8004f50 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d009      	beq.n	8004f06 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a13      	ldr	r2, [pc, #76]	; (8004f44 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d004      	beq.n	8004f06 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a14      	ldr	r2, [pc, #80]	; (8004f54 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d10c      	bne.n	8004f20 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	68ba      	ldr	r2, [r7, #8]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68ba      	ldr	r2, [r7, #8]
 8004f1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3714      	adds	r7, #20
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	40012c00 	.word	0x40012c00
 8004f44:	40013400 	.word	0x40013400
 8004f48:	40000400 	.word	0x40000400
 8004f4c:	40000800 	.word	0x40000800
 8004f50:	40000c00 	.word	0x40000c00
 8004f54:	40014000 	.word	0x40014000

08004f58 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f74:	bf00      	nop
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d101      	bne.n	8004fa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e042      	b.n	800502c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d106      	bne.n	8004fbe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f7fb fee1 	bl	8000d80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2224      	movs	r2, #36	; 0x24
 8004fc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f022 0201 	bic.w	r2, r2, #1
 8004fd4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d002      	beq.n	8004fe4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 fb28 	bl	8005634 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f000 f825 	bl	8005034 <UART_SetConfig>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d101      	bne.n	8004ff4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e01b      	b.n	800502c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	685a      	ldr	r2, [r3, #4]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005002:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	689a      	ldr	r2, [r3, #8]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005012:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f042 0201 	orr.w	r2, r2, #1
 8005022:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 fba7 	bl	8005778 <UART_CheckIdleState>
 800502a:	4603      	mov	r3, r0
}
 800502c:	4618      	mov	r0, r3
 800502e:	3708      	adds	r7, #8
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005034:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005038:	b08c      	sub	sp, #48	; 0x30
 800503a:	af00      	add	r7, sp, #0
 800503c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800503e:	2300      	movs	r3, #0
 8005040:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	689a      	ldr	r2, [r3, #8]
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	431a      	orrs	r2, r3
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	431a      	orrs	r2, r3
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	69db      	ldr	r3, [r3, #28]
 8005058:	4313      	orrs	r3, r2
 800505a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	4baa      	ldr	r3, [pc, #680]	; (800530c <UART_SetConfig+0x2d8>)
 8005064:	4013      	ands	r3, r2
 8005066:	697a      	ldr	r2, [r7, #20]
 8005068:	6812      	ldr	r2, [r2, #0]
 800506a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800506c:	430b      	orrs	r3, r1
 800506e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	68da      	ldr	r2, [r3, #12]
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	430a      	orrs	r2, r1
 8005084:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	699b      	ldr	r3, [r3, #24]
 800508a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a9f      	ldr	r2, [pc, #636]	; (8005310 <UART_SetConfig+0x2dc>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d004      	beq.n	80050a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	6a1b      	ldr	r3, [r3, #32]
 800509a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800509c:	4313      	orrs	r3, r2
 800509e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80050aa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	6812      	ldr	r2, [r2, #0]
 80050b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050b4:	430b      	orrs	r3, r1
 80050b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050be:	f023 010f 	bic.w	r1, r3, #15
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	430a      	orrs	r2, r1
 80050cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a90      	ldr	r2, [pc, #576]	; (8005314 <UART_SetConfig+0x2e0>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d125      	bne.n	8005124 <UART_SetConfig+0xf0>
 80050d8:	4b8f      	ldr	r3, [pc, #572]	; (8005318 <UART_SetConfig+0x2e4>)
 80050da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050de:	f003 0303 	and.w	r3, r3, #3
 80050e2:	2b03      	cmp	r3, #3
 80050e4:	d81a      	bhi.n	800511c <UART_SetConfig+0xe8>
 80050e6:	a201      	add	r2, pc, #4	; (adr r2, 80050ec <UART_SetConfig+0xb8>)
 80050e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ec:	080050fd 	.word	0x080050fd
 80050f0:	0800510d 	.word	0x0800510d
 80050f4:	08005105 	.word	0x08005105
 80050f8:	08005115 	.word	0x08005115
 80050fc:	2301      	movs	r3, #1
 80050fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005102:	e116      	b.n	8005332 <UART_SetConfig+0x2fe>
 8005104:	2302      	movs	r3, #2
 8005106:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800510a:	e112      	b.n	8005332 <UART_SetConfig+0x2fe>
 800510c:	2304      	movs	r3, #4
 800510e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005112:	e10e      	b.n	8005332 <UART_SetConfig+0x2fe>
 8005114:	2308      	movs	r3, #8
 8005116:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800511a:	e10a      	b.n	8005332 <UART_SetConfig+0x2fe>
 800511c:	2310      	movs	r3, #16
 800511e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005122:	e106      	b.n	8005332 <UART_SetConfig+0x2fe>
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a7c      	ldr	r2, [pc, #496]	; (800531c <UART_SetConfig+0x2e8>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d138      	bne.n	80051a0 <UART_SetConfig+0x16c>
 800512e:	4b7a      	ldr	r3, [pc, #488]	; (8005318 <UART_SetConfig+0x2e4>)
 8005130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005134:	f003 030c 	and.w	r3, r3, #12
 8005138:	2b0c      	cmp	r3, #12
 800513a:	d82d      	bhi.n	8005198 <UART_SetConfig+0x164>
 800513c:	a201      	add	r2, pc, #4	; (adr r2, 8005144 <UART_SetConfig+0x110>)
 800513e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005142:	bf00      	nop
 8005144:	08005179 	.word	0x08005179
 8005148:	08005199 	.word	0x08005199
 800514c:	08005199 	.word	0x08005199
 8005150:	08005199 	.word	0x08005199
 8005154:	08005189 	.word	0x08005189
 8005158:	08005199 	.word	0x08005199
 800515c:	08005199 	.word	0x08005199
 8005160:	08005199 	.word	0x08005199
 8005164:	08005181 	.word	0x08005181
 8005168:	08005199 	.word	0x08005199
 800516c:	08005199 	.word	0x08005199
 8005170:	08005199 	.word	0x08005199
 8005174:	08005191 	.word	0x08005191
 8005178:	2300      	movs	r3, #0
 800517a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800517e:	e0d8      	b.n	8005332 <UART_SetConfig+0x2fe>
 8005180:	2302      	movs	r3, #2
 8005182:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005186:	e0d4      	b.n	8005332 <UART_SetConfig+0x2fe>
 8005188:	2304      	movs	r3, #4
 800518a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800518e:	e0d0      	b.n	8005332 <UART_SetConfig+0x2fe>
 8005190:	2308      	movs	r3, #8
 8005192:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005196:	e0cc      	b.n	8005332 <UART_SetConfig+0x2fe>
 8005198:	2310      	movs	r3, #16
 800519a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800519e:	e0c8      	b.n	8005332 <UART_SetConfig+0x2fe>
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a5e      	ldr	r2, [pc, #376]	; (8005320 <UART_SetConfig+0x2ec>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d125      	bne.n	80051f6 <UART_SetConfig+0x1c2>
 80051aa:	4b5b      	ldr	r3, [pc, #364]	; (8005318 <UART_SetConfig+0x2e4>)
 80051ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80051b4:	2b30      	cmp	r3, #48	; 0x30
 80051b6:	d016      	beq.n	80051e6 <UART_SetConfig+0x1b2>
 80051b8:	2b30      	cmp	r3, #48	; 0x30
 80051ba:	d818      	bhi.n	80051ee <UART_SetConfig+0x1ba>
 80051bc:	2b20      	cmp	r3, #32
 80051be:	d00a      	beq.n	80051d6 <UART_SetConfig+0x1a2>
 80051c0:	2b20      	cmp	r3, #32
 80051c2:	d814      	bhi.n	80051ee <UART_SetConfig+0x1ba>
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d002      	beq.n	80051ce <UART_SetConfig+0x19a>
 80051c8:	2b10      	cmp	r3, #16
 80051ca:	d008      	beq.n	80051de <UART_SetConfig+0x1aa>
 80051cc:	e00f      	b.n	80051ee <UART_SetConfig+0x1ba>
 80051ce:	2300      	movs	r3, #0
 80051d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051d4:	e0ad      	b.n	8005332 <UART_SetConfig+0x2fe>
 80051d6:	2302      	movs	r3, #2
 80051d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051dc:	e0a9      	b.n	8005332 <UART_SetConfig+0x2fe>
 80051de:	2304      	movs	r3, #4
 80051e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051e4:	e0a5      	b.n	8005332 <UART_SetConfig+0x2fe>
 80051e6:	2308      	movs	r3, #8
 80051e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051ec:	e0a1      	b.n	8005332 <UART_SetConfig+0x2fe>
 80051ee:	2310      	movs	r3, #16
 80051f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051f4:	e09d      	b.n	8005332 <UART_SetConfig+0x2fe>
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a4a      	ldr	r2, [pc, #296]	; (8005324 <UART_SetConfig+0x2f0>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d125      	bne.n	800524c <UART_SetConfig+0x218>
 8005200:	4b45      	ldr	r3, [pc, #276]	; (8005318 <UART_SetConfig+0x2e4>)
 8005202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005206:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800520a:	2bc0      	cmp	r3, #192	; 0xc0
 800520c:	d016      	beq.n	800523c <UART_SetConfig+0x208>
 800520e:	2bc0      	cmp	r3, #192	; 0xc0
 8005210:	d818      	bhi.n	8005244 <UART_SetConfig+0x210>
 8005212:	2b80      	cmp	r3, #128	; 0x80
 8005214:	d00a      	beq.n	800522c <UART_SetConfig+0x1f8>
 8005216:	2b80      	cmp	r3, #128	; 0x80
 8005218:	d814      	bhi.n	8005244 <UART_SetConfig+0x210>
 800521a:	2b00      	cmp	r3, #0
 800521c:	d002      	beq.n	8005224 <UART_SetConfig+0x1f0>
 800521e:	2b40      	cmp	r3, #64	; 0x40
 8005220:	d008      	beq.n	8005234 <UART_SetConfig+0x200>
 8005222:	e00f      	b.n	8005244 <UART_SetConfig+0x210>
 8005224:	2300      	movs	r3, #0
 8005226:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800522a:	e082      	b.n	8005332 <UART_SetConfig+0x2fe>
 800522c:	2302      	movs	r3, #2
 800522e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005232:	e07e      	b.n	8005332 <UART_SetConfig+0x2fe>
 8005234:	2304      	movs	r3, #4
 8005236:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800523a:	e07a      	b.n	8005332 <UART_SetConfig+0x2fe>
 800523c:	2308      	movs	r3, #8
 800523e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005242:	e076      	b.n	8005332 <UART_SetConfig+0x2fe>
 8005244:	2310      	movs	r3, #16
 8005246:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800524a:	e072      	b.n	8005332 <UART_SetConfig+0x2fe>
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a35      	ldr	r2, [pc, #212]	; (8005328 <UART_SetConfig+0x2f4>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d12a      	bne.n	80052ac <UART_SetConfig+0x278>
 8005256:	4b30      	ldr	r3, [pc, #192]	; (8005318 <UART_SetConfig+0x2e4>)
 8005258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800525c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005260:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005264:	d01a      	beq.n	800529c <UART_SetConfig+0x268>
 8005266:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800526a:	d81b      	bhi.n	80052a4 <UART_SetConfig+0x270>
 800526c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005270:	d00c      	beq.n	800528c <UART_SetConfig+0x258>
 8005272:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005276:	d815      	bhi.n	80052a4 <UART_SetConfig+0x270>
 8005278:	2b00      	cmp	r3, #0
 800527a:	d003      	beq.n	8005284 <UART_SetConfig+0x250>
 800527c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005280:	d008      	beq.n	8005294 <UART_SetConfig+0x260>
 8005282:	e00f      	b.n	80052a4 <UART_SetConfig+0x270>
 8005284:	2300      	movs	r3, #0
 8005286:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800528a:	e052      	b.n	8005332 <UART_SetConfig+0x2fe>
 800528c:	2302      	movs	r3, #2
 800528e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005292:	e04e      	b.n	8005332 <UART_SetConfig+0x2fe>
 8005294:	2304      	movs	r3, #4
 8005296:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800529a:	e04a      	b.n	8005332 <UART_SetConfig+0x2fe>
 800529c:	2308      	movs	r3, #8
 800529e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052a2:	e046      	b.n	8005332 <UART_SetConfig+0x2fe>
 80052a4:	2310      	movs	r3, #16
 80052a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052aa:	e042      	b.n	8005332 <UART_SetConfig+0x2fe>
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a17      	ldr	r2, [pc, #92]	; (8005310 <UART_SetConfig+0x2dc>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d13a      	bne.n	800532c <UART_SetConfig+0x2f8>
 80052b6:	4b18      	ldr	r3, [pc, #96]	; (8005318 <UART_SetConfig+0x2e4>)
 80052b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80052c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052c4:	d01a      	beq.n	80052fc <UART_SetConfig+0x2c8>
 80052c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052ca:	d81b      	bhi.n	8005304 <UART_SetConfig+0x2d0>
 80052cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052d0:	d00c      	beq.n	80052ec <UART_SetConfig+0x2b8>
 80052d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052d6:	d815      	bhi.n	8005304 <UART_SetConfig+0x2d0>
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d003      	beq.n	80052e4 <UART_SetConfig+0x2b0>
 80052dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052e0:	d008      	beq.n	80052f4 <UART_SetConfig+0x2c0>
 80052e2:	e00f      	b.n	8005304 <UART_SetConfig+0x2d0>
 80052e4:	2300      	movs	r3, #0
 80052e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052ea:	e022      	b.n	8005332 <UART_SetConfig+0x2fe>
 80052ec:	2302      	movs	r3, #2
 80052ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052f2:	e01e      	b.n	8005332 <UART_SetConfig+0x2fe>
 80052f4:	2304      	movs	r3, #4
 80052f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052fa:	e01a      	b.n	8005332 <UART_SetConfig+0x2fe>
 80052fc:	2308      	movs	r3, #8
 80052fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005302:	e016      	b.n	8005332 <UART_SetConfig+0x2fe>
 8005304:	2310      	movs	r3, #16
 8005306:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800530a:	e012      	b.n	8005332 <UART_SetConfig+0x2fe>
 800530c:	cfff69f3 	.word	0xcfff69f3
 8005310:	40008000 	.word	0x40008000
 8005314:	40013800 	.word	0x40013800
 8005318:	40021000 	.word	0x40021000
 800531c:	40004400 	.word	0x40004400
 8005320:	40004800 	.word	0x40004800
 8005324:	40004c00 	.word	0x40004c00
 8005328:	40005000 	.word	0x40005000
 800532c:	2310      	movs	r3, #16
 800532e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4ab0      	ldr	r2, [pc, #704]	; (80055f8 <UART_SetConfig+0x5c4>)
 8005338:	4293      	cmp	r3, r2
 800533a:	f040 809b 	bne.w	8005474 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800533e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005342:	2b08      	cmp	r3, #8
 8005344:	d827      	bhi.n	8005396 <UART_SetConfig+0x362>
 8005346:	a201      	add	r2, pc, #4	; (adr r2, 800534c <UART_SetConfig+0x318>)
 8005348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800534c:	08005371 	.word	0x08005371
 8005350:	08005379 	.word	0x08005379
 8005354:	08005381 	.word	0x08005381
 8005358:	08005397 	.word	0x08005397
 800535c:	08005387 	.word	0x08005387
 8005360:	08005397 	.word	0x08005397
 8005364:	08005397 	.word	0x08005397
 8005368:	08005397 	.word	0x08005397
 800536c:	0800538f 	.word	0x0800538f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005370:	f7fe fa8e 	bl	8003890 <HAL_RCC_GetPCLK1Freq>
 8005374:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005376:	e014      	b.n	80053a2 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005378:	f7fe fa9e 	bl	80038b8 <HAL_RCC_GetPCLK2Freq>
 800537c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800537e:	e010      	b.n	80053a2 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005380:	4b9e      	ldr	r3, [pc, #632]	; (80055fc <UART_SetConfig+0x5c8>)
 8005382:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005384:	e00d      	b.n	80053a2 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005386:	f7fe f9d1 	bl	800372c <HAL_RCC_GetSysClockFreq>
 800538a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800538c:	e009      	b.n	80053a2 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800538e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005392:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005394:	e005      	b.n	80053a2 <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 8005396:	2300      	movs	r3, #0
 8005398:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80053a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80053a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	f000 8130 	beq.w	800560a <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ae:	4a94      	ldr	r2, [pc, #592]	; (8005600 <UART_SetConfig+0x5cc>)
 80053b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053b4:	461a      	mov	r2, r3
 80053b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80053bc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	685a      	ldr	r2, [r3, #4]
 80053c2:	4613      	mov	r3, r2
 80053c4:	005b      	lsls	r3, r3, #1
 80053c6:	4413      	add	r3, r2
 80053c8:	69ba      	ldr	r2, [r7, #24]
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d305      	bcc.n	80053da <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80053d4:	69ba      	ldr	r2, [r7, #24]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d903      	bls.n	80053e2 <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80053e0:	e113      	b.n	800560a <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e4:	2200      	movs	r2, #0
 80053e6:	60bb      	str	r3, [r7, #8]
 80053e8:	60fa      	str	r2, [r7, #12]
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ee:	4a84      	ldr	r2, [pc, #528]	; (8005600 <UART_SetConfig+0x5cc>)
 80053f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	2200      	movs	r2, #0
 80053f8:	603b      	str	r3, [r7, #0]
 80053fa:	607a      	str	r2, [r7, #4]
 80053fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005400:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005404:	f7fa ff16 	bl	8000234 <__aeabi_uldivmod>
 8005408:	4602      	mov	r2, r0
 800540a:	460b      	mov	r3, r1
 800540c:	4610      	mov	r0, r2
 800540e:	4619      	mov	r1, r3
 8005410:	f04f 0200 	mov.w	r2, #0
 8005414:	f04f 0300 	mov.w	r3, #0
 8005418:	020b      	lsls	r3, r1, #8
 800541a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800541e:	0202      	lsls	r2, r0, #8
 8005420:	6979      	ldr	r1, [r7, #20]
 8005422:	6849      	ldr	r1, [r1, #4]
 8005424:	0849      	lsrs	r1, r1, #1
 8005426:	2000      	movs	r0, #0
 8005428:	460c      	mov	r4, r1
 800542a:	4605      	mov	r5, r0
 800542c:	eb12 0804 	adds.w	r8, r2, r4
 8005430:	eb43 0905 	adc.w	r9, r3, r5
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	469a      	mov	sl, r3
 800543c:	4693      	mov	fp, r2
 800543e:	4652      	mov	r2, sl
 8005440:	465b      	mov	r3, fp
 8005442:	4640      	mov	r0, r8
 8005444:	4649      	mov	r1, r9
 8005446:	f7fa fef5 	bl	8000234 <__aeabi_uldivmod>
 800544a:	4602      	mov	r2, r0
 800544c:	460b      	mov	r3, r1
 800544e:	4613      	mov	r3, r2
 8005450:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005452:	6a3b      	ldr	r3, [r7, #32]
 8005454:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005458:	d308      	bcc.n	800546c <UART_SetConfig+0x438>
 800545a:	6a3b      	ldr	r3, [r7, #32]
 800545c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005460:	d204      	bcs.n	800546c <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	6a3a      	ldr	r2, [r7, #32]
 8005468:	60da      	str	r2, [r3, #12]
 800546a:	e0ce      	b.n	800560a <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005472:	e0ca      	b.n	800560a <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	69db      	ldr	r3, [r3, #28]
 8005478:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800547c:	d166      	bne.n	800554c <UART_SetConfig+0x518>
  {
    switch (clocksource)
 800547e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005482:	2b08      	cmp	r3, #8
 8005484:	d827      	bhi.n	80054d6 <UART_SetConfig+0x4a2>
 8005486:	a201      	add	r2, pc, #4	; (adr r2, 800548c <UART_SetConfig+0x458>)
 8005488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800548c:	080054b1 	.word	0x080054b1
 8005490:	080054b9 	.word	0x080054b9
 8005494:	080054c1 	.word	0x080054c1
 8005498:	080054d7 	.word	0x080054d7
 800549c:	080054c7 	.word	0x080054c7
 80054a0:	080054d7 	.word	0x080054d7
 80054a4:	080054d7 	.word	0x080054d7
 80054a8:	080054d7 	.word	0x080054d7
 80054ac:	080054cf 	.word	0x080054cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054b0:	f7fe f9ee 	bl	8003890 <HAL_RCC_GetPCLK1Freq>
 80054b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80054b6:	e014      	b.n	80054e2 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054b8:	f7fe f9fe 	bl	80038b8 <HAL_RCC_GetPCLK2Freq>
 80054bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80054be:	e010      	b.n	80054e2 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054c0:	4b4e      	ldr	r3, [pc, #312]	; (80055fc <UART_SetConfig+0x5c8>)
 80054c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80054c4:	e00d      	b.n	80054e2 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054c6:	f7fe f931 	bl	800372c <HAL_RCC_GetSysClockFreq>
 80054ca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80054cc:	e009      	b.n	80054e2 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80054d4:	e005      	b.n	80054e2 <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 80054d6:	2300      	movs	r3, #0
 80054d8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80054e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80054e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	f000 8090 	beq.w	800560a <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ee:	4a44      	ldr	r2, [pc, #272]	; (8005600 <UART_SetConfig+0x5cc>)
 80054f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054f4:	461a      	mov	r2, r3
 80054f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80054fc:	005a      	lsls	r2, r3, #1
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	085b      	lsrs	r3, r3, #1
 8005504:	441a      	add	r2, r3
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	fbb2 f3f3 	udiv	r3, r2, r3
 800550e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005510:	6a3b      	ldr	r3, [r7, #32]
 8005512:	2b0f      	cmp	r3, #15
 8005514:	d916      	bls.n	8005544 <UART_SetConfig+0x510>
 8005516:	6a3b      	ldr	r3, [r7, #32]
 8005518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800551c:	d212      	bcs.n	8005544 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800551e:	6a3b      	ldr	r3, [r7, #32]
 8005520:	b29b      	uxth	r3, r3
 8005522:	f023 030f 	bic.w	r3, r3, #15
 8005526:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005528:	6a3b      	ldr	r3, [r7, #32]
 800552a:	085b      	lsrs	r3, r3, #1
 800552c:	b29b      	uxth	r3, r3
 800552e:	f003 0307 	and.w	r3, r3, #7
 8005532:	b29a      	uxth	r2, r3
 8005534:	8bfb      	ldrh	r3, [r7, #30]
 8005536:	4313      	orrs	r3, r2
 8005538:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	8bfa      	ldrh	r2, [r7, #30]
 8005540:	60da      	str	r2, [r3, #12]
 8005542:	e062      	b.n	800560a <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800554a:	e05e      	b.n	800560a <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800554c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005550:	2b08      	cmp	r3, #8
 8005552:	d828      	bhi.n	80055a6 <UART_SetConfig+0x572>
 8005554:	a201      	add	r2, pc, #4	; (adr r2, 800555c <UART_SetConfig+0x528>)
 8005556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800555a:	bf00      	nop
 800555c:	08005581 	.word	0x08005581
 8005560:	08005589 	.word	0x08005589
 8005564:	08005591 	.word	0x08005591
 8005568:	080055a7 	.word	0x080055a7
 800556c:	08005597 	.word	0x08005597
 8005570:	080055a7 	.word	0x080055a7
 8005574:	080055a7 	.word	0x080055a7
 8005578:	080055a7 	.word	0x080055a7
 800557c:	0800559f 	.word	0x0800559f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005580:	f7fe f986 	bl	8003890 <HAL_RCC_GetPCLK1Freq>
 8005584:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005586:	e014      	b.n	80055b2 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005588:	f7fe f996 	bl	80038b8 <HAL_RCC_GetPCLK2Freq>
 800558c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800558e:	e010      	b.n	80055b2 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005590:	4b1a      	ldr	r3, [pc, #104]	; (80055fc <UART_SetConfig+0x5c8>)
 8005592:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005594:	e00d      	b.n	80055b2 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005596:	f7fe f8c9 	bl	800372c <HAL_RCC_GetSysClockFreq>
 800559a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800559c:	e009      	b.n	80055b2 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800559e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80055a4:	e005      	b.n	80055b2 <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 80055a6:	2300      	movs	r3, #0
 80055a8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80055b0:	bf00      	nop
    }

    if (pclk != 0U)
 80055b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d028      	beq.n	800560a <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055bc:	4a10      	ldr	r2, [pc, #64]	; (8005600 <UART_SetConfig+0x5cc>)
 80055be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055c2:	461a      	mov	r2, r3
 80055c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c6:	fbb3 f2f2 	udiv	r2, r3, r2
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	085b      	lsrs	r3, r3, #1
 80055d0:	441a      	add	r2, r3
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80055da:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055dc:	6a3b      	ldr	r3, [r7, #32]
 80055de:	2b0f      	cmp	r3, #15
 80055e0:	d910      	bls.n	8005604 <UART_SetConfig+0x5d0>
 80055e2:	6a3b      	ldr	r3, [r7, #32]
 80055e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055e8:	d20c      	bcs.n	8005604 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80055ea:	6a3b      	ldr	r3, [r7, #32]
 80055ec:	b29a      	uxth	r2, r3
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	60da      	str	r2, [r3, #12]
 80055f4:	e009      	b.n	800560a <UART_SetConfig+0x5d6>
 80055f6:	bf00      	nop
 80055f8:	40008000 	.word	0x40008000
 80055fc:	00f42400 	.word	0x00f42400
 8005600:	08006124 	.word	0x08006124
      }
      else
      {
        ret = HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	2201      	movs	r2, #1
 800560e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	2201      	movs	r2, #1
 8005616:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	2200      	movs	r2, #0
 800561e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	2200      	movs	r2, #0
 8005624:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005626:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800562a:	4618      	mov	r0, r3
 800562c:	3730      	adds	r7, #48	; 0x30
 800562e:	46bd      	mov	sp, r7
 8005630:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005634 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005640:	f003 0308 	and.w	r3, r3, #8
 8005644:	2b00      	cmp	r3, #0
 8005646:	d00a      	beq.n	800565e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	430a      	orrs	r2, r1
 800565c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005662:	f003 0301 	and.w	r3, r3, #1
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00a      	beq.n	8005680 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	430a      	orrs	r2, r1
 800567e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005684:	f003 0302 	and.w	r3, r3, #2
 8005688:	2b00      	cmp	r3, #0
 800568a:	d00a      	beq.n	80056a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	430a      	orrs	r2, r1
 80056a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a6:	f003 0304 	and.w	r3, r3, #4
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d00a      	beq.n	80056c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	430a      	orrs	r2, r1
 80056c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c8:	f003 0310 	and.w	r3, r3, #16
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d00a      	beq.n	80056e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	430a      	orrs	r2, r1
 80056e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ea:	f003 0320 	and.w	r3, r3, #32
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00a      	beq.n	8005708 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	430a      	orrs	r2, r1
 8005706:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800570c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005710:	2b00      	cmp	r3, #0
 8005712:	d01a      	beq.n	800574a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	430a      	orrs	r2, r1
 8005728:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800572e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005732:	d10a      	bne.n	800574a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	430a      	orrs	r2, r1
 8005748:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800574e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005752:	2b00      	cmp	r3, #0
 8005754:	d00a      	beq.n	800576c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	430a      	orrs	r2, r1
 800576a:	605a      	str	r2, [r3, #4]
  }
}
 800576c:	bf00      	nop
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b098      	sub	sp, #96	; 0x60
 800577c:	af02      	add	r7, sp, #8
 800577e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005788:	f7fb fda4 	bl	80012d4 <HAL_GetTick>
 800578c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 0308 	and.w	r3, r3, #8
 8005798:	2b08      	cmp	r3, #8
 800579a:	d12f      	bne.n	80057fc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800579c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80057a0:	9300      	str	r3, [sp, #0]
 80057a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057a4:	2200      	movs	r2, #0
 80057a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 f88e 	bl	80058cc <UART_WaitOnFlagUntilTimeout>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d022      	beq.n	80057fc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057be:	e853 3f00 	ldrex	r3, [r3]
 80057c2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80057c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057ca:	653b      	str	r3, [r7, #80]	; 0x50
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	461a      	mov	r2, r3
 80057d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057d4:	647b      	str	r3, [r7, #68]	; 0x44
 80057d6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80057da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057dc:	e841 2300 	strex	r3, r2, [r1]
 80057e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80057e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d1e6      	bne.n	80057b6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2220      	movs	r2, #32
 80057ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057f8:	2303      	movs	r3, #3
 80057fa:	e063      	b.n	80058c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0304 	and.w	r3, r3, #4
 8005806:	2b04      	cmp	r3, #4
 8005808:	d149      	bne.n	800589e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800580a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800580e:	9300      	str	r3, [sp, #0]
 8005810:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005812:	2200      	movs	r2, #0
 8005814:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f000 f857 	bl	80058cc <UART_WaitOnFlagUntilTimeout>
 800581e:	4603      	mov	r3, r0
 8005820:	2b00      	cmp	r3, #0
 8005822:	d03c      	beq.n	800589e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582c:	e853 3f00 	ldrex	r3, [r3]
 8005830:	623b      	str	r3, [r7, #32]
   return(result);
 8005832:	6a3b      	ldr	r3, [r7, #32]
 8005834:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005838:	64fb      	str	r3, [r7, #76]	; 0x4c
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	461a      	mov	r2, r3
 8005840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005842:	633b      	str	r3, [r7, #48]	; 0x30
 8005844:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005846:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005848:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800584a:	e841 2300 	strex	r3, r2, [r1]
 800584e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005852:	2b00      	cmp	r3, #0
 8005854:	d1e6      	bne.n	8005824 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	3308      	adds	r3, #8
 800585c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	e853 3f00 	ldrex	r3, [r3]
 8005864:	60fb      	str	r3, [r7, #12]
   return(result);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f023 0301 	bic.w	r3, r3, #1
 800586c:	64bb      	str	r3, [r7, #72]	; 0x48
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	3308      	adds	r3, #8
 8005874:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005876:	61fa      	str	r2, [r7, #28]
 8005878:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587a:	69b9      	ldr	r1, [r7, #24]
 800587c:	69fa      	ldr	r2, [r7, #28]
 800587e:	e841 2300 	strex	r3, r2, [r1]
 8005882:	617b      	str	r3, [r7, #20]
   return(result);
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d1e5      	bne.n	8005856 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2220      	movs	r2, #32
 800588e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800589a:	2303      	movs	r3, #3
 800589c:	e012      	b.n	80058c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2220      	movs	r2, #32
 80058a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2220      	movs	r2, #32
 80058aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80058c2:	2300      	movs	r3, #0
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3758      	adds	r7, #88	; 0x58
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}

080058cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	60f8      	str	r0, [r7, #12]
 80058d4:	60b9      	str	r1, [r7, #8]
 80058d6:	603b      	str	r3, [r7, #0]
 80058d8:	4613      	mov	r3, r2
 80058da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058dc:	e04f      	b.n	800597e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e4:	d04b      	beq.n	800597e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058e6:	f7fb fcf5 	bl	80012d4 <HAL_GetTick>
 80058ea:	4602      	mov	r2, r0
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	69ba      	ldr	r2, [r7, #24]
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d302      	bcc.n	80058fc <UART_WaitOnFlagUntilTimeout+0x30>
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d101      	bne.n	8005900 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80058fc:	2303      	movs	r3, #3
 80058fe:	e04e      	b.n	800599e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 0304 	and.w	r3, r3, #4
 800590a:	2b00      	cmp	r3, #0
 800590c:	d037      	beq.n	800597e <UART_WaitOnFlagUntilTimeout+0xb2>
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	2b80      	cmp	r3, #128	; 0x80
 8005912:	d034      	beq.n	800597e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	2b40      	cmp	r3, #64	; 0x40
 8005918:	d031      	beq.n	800597e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	69db      	ldr	r3, [r3, #28]
 8005920:	f003 0308 	and.w	r3, r3, #8
 8005924:	2b08      	cmp	r3, #8
 8005926:	d110      	bne.n	800594a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2208      	movs	r2, #8
 800592e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005930:	68f8      	ldr	r0, [r7, #12]
 8005932:	f000 f838 	bl	80059a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2208      	movs	r2, #8
 800593a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e029      	b.n	800599e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	69db      	ldr	r3, [r3, #28]
 8005950:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005954:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005958:	d111      	bne.n	800597e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005962:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005964:	68f8      	ldr	r0, [r7, #12]
 8005966:	f000 f81e 	bl	80059a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2220      	movs	r2, #32
 800596e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800597a:	2303      	movs	r3, #3
 800597c:	e00f      	b.n	800599e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	69da      	ldr	r2, [r3, #28]
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	4013      	ands	r3, r2
 8005988:	68ba      	ldr	r2, [r7, #8]
 800598a:	429a      	cmp	r2, r3
 800598c:	bf0c      	ite	eq
 800598e:	2301      	moveq	r3, #1
 8005990:	2300      	movne	r3, #0
 8005992:	b2db      	uxtb	r3, r3
 8005994:	461a      	mov	r2, r3
 8005996:	79fb      	ldrb	r3, [r7, #7]
 8005998:	429a      	cmp	r2, r3
 800599a:	d0a0      	beq.n	80058de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800599c:	2300      	movs	r3, #0
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3710      	adds	r7, #16
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}

080059a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059a6:	b480      	push	{r7}
 80059a8:	b095      	sub	sp, #84	; 0x54
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059b6:	e853 3f00 	ldrex	r3, [r3]
 80059ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80059bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	461a      	mov	r2, r3
 80059ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059cc:	643b      	str	r3, [r7, #64]	; 0x40
 80059ce:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80059d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80059d4:	e841 2300 	strex	r3, r2, [r1]
 80059d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80059da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d1e6      	bne.n	80059ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	3308      	adds	r3, #8
 80059e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e8:	6a3b      	ldr	r3, [r7, #32]
 80059ea:	e853 3f00 	ldrex	r3, [r3]
 80059ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059f6:	f023 0301 	bic.w	r3, r3, #1
 80059fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	3308      	adds	r3, #8
 8005a02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a04:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a0c:	e841 2300 	strex	r3, r2, [r1]
 8005a10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d1e3      	bne.n	80059e0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d118      	bne.n	8005a52 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	e853 3f00 	ldrex	r3, [r3]
 8005a2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	f023 0310 	bic.w	r3, r3, #16
 8005a34:	647b      	str	r3, [r7, #68]	; 0x44
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a3e:	61bb      	str	r3, [r7, #24]
 8005a40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a42:	6979      	ldr	r1, [r7, #20]
 8005a44:	69ba      	ldr	r2, [r7, #24]
 8005a46:	e841 2300 	strex	r3, r2, [r1]
 8005a4a:	613b      	str	r3, [r7, #16]
   return(result);
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d1e6      	bne.n	8005a20 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2220      	movs	r2, #32
 8005a56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005a66:	bf00      	nop
 8005a68:	3754      	adds	r7, #84	; 0x54
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr

08005a72 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005a72:	b480      	push	{r7}
 8005a74:	b085      	sub	sp, #20
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d101      	bne.n	8005a88 <HAL_UARTEx_DisableFifoMode+0x16>
 8005a84:	2302      	movs	r3, #2
 8005a86:	e027      	b.n	8005ad8 <HAL_UARTEx_DisableFifoMode+0x66>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2224      	movs	r2, #36	; 0x24
 8005a94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f022 0201 	bic.w	r2, r2, #1
 8005aae:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005ab6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	68fa      	ldr	r2, [r7, #12]
 8005ac4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2220      	movs	r2, #32
 8005aca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3714      	adds	r7, #20
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d101      	bne.n	8005afc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005af8:	2302      	movs	r3, #2
 8005afa:	e02d      	b.n	8005b58 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2224      	movs	r2, #36	; 0x24
 8005b08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f022 0201 	bic.w	r2, r2, #1
 8005b22:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	683a      	ldr	r2, [r7, #0]
 8005b34:	430a      	orrs	r2, r1
 8005b36:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f000 f84f 	bl	8005bdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2220      	movs	r2, #32
 8005b4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005b56:	2300      	movs	r3, #0
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3710      	adds	r7, #16
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d101      	bne.n	8005b78 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005b74:	2302      	movs	r3, #2
 8005b76:	e02d      	b.n	8005bd4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2224      	movs	r2, #36	; 0x24
 8005b84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f022 0201 	bic.w	r2, r2, #1
 8005b9e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	683a      	ldr	r2, [r7, #0]
 8005bb0:	430a      	orrs	r2, r1
 8005bb2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 f811 	bl	8005bdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2220      	movs	r2, #32
 8005bc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005bd2:	2300      	movs	r3, #0
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3710      	adds	r7, #16
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d108      	bne.n	8005bfe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005bfc:	e031      	b.n	8005c62 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005bfe:	2308      	movs	r3, #8
 8005c00:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005c02:	2308      	movs	r3, #8
 8005c04:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	0e5b      	lsrs	r3, r3, #25
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	f003 0307 	and.w	r3, r3, #7
 8005c14:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	0f5b      	lsrs	r3, r3, #29
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	f003 0307 	and.w	r3, r3, #7
 8005c24:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c26:	7bbb      	ldrb	r3, [r7, #14]
 8005c28:	7b3a      	ldrb	r2, [r7, #12]
 8005c2a:	4911      	ldr	r1, [pc, #68]	; (8005c70 <UARTEx_SetNbDataToProcess+0x94>)
 8005c2c:	5c8a      	ldrb	r2, [r1, r2]
 8005c2e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005c32:	7b3a      	ldrb	r2, [r7, #12]
 8005c34:	490f      	ldr	r1, [pc, #60]	; (8005c74 <UARTEx_SetNbDataToProcess+0x98>)
 8005c36:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c38:	fb93 f3f2 	sdiv	r3, r3, r2
 8005c3c:	b29a      	uxth	r2, r3
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c44:	7bfb      	ldrb	r3, [r7, #15]
 8005c46:	7b7a      	ldrb	r2, [r7, #13]
 8005c48:	4909      	ldr	r1, [pc, #36]	; (8005c70 <UARTEx_SetNbDataToProcess+0x94>)
 8005c4a:	5c8a      	ldrb	r2, [r1, r2]
 8005c4c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005c50:	7b7a      	ldrb	r2, [r7, #13]
 8005c52:	4908      	ldr	r1, [pc, #32]	; (8005c74 <UARTEx_SetNbDataToProcess+0x98>)
 8005c54:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c56:	fb93 f3f2 	sdiv	r3, r3, r2
 8005c5a:	b29a      	uxth	r2, r3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005c62:	bf00      	nop
 8005c64:	3714      	adds	r7, #20
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop
 8005c70:	0800613c 	.word	0x0800613c
 8005c74:	08006144 	.word	0x08006144

08005c78 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b08b      	sub	sp, #44	; 0x2c
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	fa93 f3a3 	rbit	r3, r3
 8005c92:	613b      	str	r3, [r7, #16]
  return result;
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d101      	bne.n	8005ca2 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8005c9e:	2320      	movs	r3, #32
 8005ca0:	e003      	b.n	8005caa <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	fab3 f383 	clz	r3, r3
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	005b      	lsls	r3, r3, #1
 8005cac:	2103      	movs	r1, #3
 8005cae:	fa01 f303 	lsl.w	r3, r1, r3
 8005cb2:	43db      	mvns	r3, r3
 8005cb4:	401a      	ands	r2, r3
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cba:	6a3b      	ldr	r3, [r7, #32]
 8005cbc:	fa93 f3a3 	rbit	r3, r3
 8005cc0:	61fb      	str	r3, [r7, #28]
  return result;
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d101      	bne.n	8005cd0 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8005ccc:	2320      	movs	r3, #32
 8005cce:	e003      	b.n	8005cd8 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8005cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd2:	fab3 f383 	clz	r3, r3
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	005b      	lsls	r3, r3, #1
 8005cda:	6879      	ldr	r1, [r7, #4]
 8005cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8005ce0:	431a      	orrs	r2, r3
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	601a      	str	r2, [r3, #0]
}
 8005ce6:	bf00      	nop
 8005ce8:	372c      	adds	r7, #44	; 0x2c
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr

08005cf2 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8005cf2:	b480      	push	{r7}
 8005cf4:	b085      	sub	sp, #20
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	60f8      	str	r0, [r7, #12]
 8005cfa:	60b9      	str	r1, [r7, #8]
 8005cfc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	685a      	ldr	r2, [r3, #4]
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	43db      	mvns	r3, r3
 8005d06:	401a      	ands	r2, r3
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	6879      	ldr	r1, [r7, #4]
 8005d0c:	fb01 f303 	mul.w	r3, r1, r3
 8005d10:	431a      	orrs	r2, r3
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	605a      	str	r2, [r3, #4]
}
 8005d16:	bf00      	nop
 8005d18:	3714      	adds	r7, #20
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr

08005d22 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8005d22:	b480      	push	{r7}
 8005d24:	b08b      	sub	sp, #44	; 0x2c
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	60f8      	str	r0, [r7, #12]
 8005d2a:	60b9      	str	r1, [r7, #8]
 8005d2c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	689a      	ldr	r2, [r3, #8]
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	fa93 f3a3 	rbit	r3, r3
 8005d3c:	613b      	str	r3, [r7, #16]
  return result;
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d101      	bne.n	8005d4c <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8005d48:	2320      	movs	r3, #32
 8005d4a:	e003      	b.n	8005d54 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	fab3 f383 	clz	r3, r3
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	005b      	lsls	r3, r3, #1
 8005d56:	2103      	movs	r1, #3
 8005d58:	fa01 f303 	lsl.w	r3, r1, r3
 8005d5c:	43db      	mvns	r3, r3
 8005d5e:	401a      	ands	r2, r3
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d64:	6a3b      	ldr	r3, [r7, #32]
 8005d66:	fa93 f3a3 	rbit	r3, r3
 8005d6a:	61fb      	str	r3, [r7, #28]
  return result;
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d101      	bne.n	8005d7a <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8005d76:	2320      	movs	r3, #32
 8005d78:	e003      	b.n	8005d82 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7c:	fab3 f383 	clz	r3, r3
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	005b      	lsls	r3, r3, #1
 8005d84:	6879      	ldr	r1, [r7, #4]
 8005d86:	fa01 f303 	lsl.w	r3, r1, r3
 8005d8a:	431a      	orrs	r2, r3
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8005d90:	bf00      	nop
 8005d92:	372c      	adds	r7, #44	; 0x2c
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b08b      	sub	sp, #44	; 0x2c
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	68da      	ldr	r2, [r3, #12]
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	fa93 f3a3 	rbit	r3, r3
 8005db6:	613b      	str	r3, [r7, #16]
  return result;
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d101      	bne.n	8005dc6 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8005dc2:	2320      	movs	r3, #32
 8005dc4:	e003      	b.n	8005dce <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	fab3 f383 	clz	r3, r3
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	005b      	lsls	r3, r3, #1
 8005dd0:	2103      	movs	r1, #3
 8005dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8005dd6:	43db      	mvns	r3, r3
 8005dd8:	401a      	ands	r2, r3
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dde:	6a3b      	ldr	r3, [r7, #32]
 8005de0:	fa93 f3a3 	rbit	r3, r3
 8005de4:	61fb      	str	r3, [r7, #28]
  return result;
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d101      	bne.n	8005df4 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8005df0:	2320      	movs	r3, #32
 8005df2:	e003      	b.n	8005dfc <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8005df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df6:	fab3 f383 	clz	r3, r3
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	005b      	lsls	r3, r3, #1
 8005dfe:	6879      	ldr	r1, [r7, #4]
 8005e00:	fa01 f303 	lsl.w	r3, r1, r3
 8005e04:	431a      	orrs	r2, r3
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	60da      	str	r2, [r3, #12]
}
 8005e0a:	bf00      	nop
 8005e0c:	372c      	adds	r7, #44	; 0x2c
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr

08005e16 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8005e16:	b480      	push	{r7}
 8005e18:	b08b      	sub	sp, #44	; 0x2c
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	60f8      	str	r0, [r7, #12]
 8005e1e:	60b9      	str	r1, [r7, #8]
 8005e20:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6a1a      	ldr	r2, [r3, #32]
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	fa93 f3a3 	rbit	r3, r3
 8005e30:	613b      	str	r3, [r7, #16]
  return result;
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d101      	bne.n	8005e40 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8005e3c:	2320      	movs	r3, #32
 8005e3e:	e003      	b.n	8005e48 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	fab3 f383 	clz	r3, r3
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	210f      	movs	r1, #15
 8005e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e50:	43db      	mvns	r3, r3
 8005e52:	401a      	ands	r2, r3
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e58:	6a3b      	ldr	r3, [r7, #32]
 8005e5a:	fa93 f3a3 	rbit	r3, r3
 8005e5e:	61fb      	str	r3, [r7, #28]
  return result;
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d101      	bne.n	8005e6e <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8005e6a:	2320      	movs	r3, #32
 8005e6c:	e003      	b.n	8005e76 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8005e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e70:	fab3 f383 	clz	r3, r3
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	6879      	ldr	r1, [r7, #4]
 8005e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e7e:	431a      	orrs	r2, r3
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8005e84:	bf00      	nop
 8005e86:	372c      	adds	r7, #44	; 0x2c
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b08b      	sub	sp, #44	; 0x2c
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	0a1b      	lsrs	r3, r3, #8
 8005ea4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	fa93 f3a3 	rbit	r3, r3
 8005eac:	613b      	str	r3, [r7, #16]
  return result;
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d101      	bne.n	8005ebc <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8005eb8:	2320      	movs	r3, #32
 8005eba:	e003      	b.n	8005ec4 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8005ebc:	69bb      	ldr	r3, [r7, #24]
 8005ebe:	fab3 f383 	clz	r3, r3
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	210f      	movs	r1, #15
 8005ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8005ecc:	43db      	mvns	r3, r3
 8005ece:	401a      	ands	r2, r3
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	0a1b      	lsrs	r3, r3, #8
 8005ed4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ed6:	6a3b      	ldr	r3, [r7, #32]
 8005ed8:	fa93 f3a3 	rbit	r3, r3
 8005edc:	61fb      	str	r3, [r7, #28]
  return result;
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d101      	bne.n	8005eec <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8005ee8:	2320      	movs	r3, #32
 8005eea:	e003      	b.n	8005ef4 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8005eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eee:	fab3 f383 	clz	r3, r3
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	6879      	ldr	r1, [r7, #4]
 8005ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8005efc:	431a      	orrs	r2, r3
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8005f02:	bf00      	nop
 8005f04:	372c      	adds	r7, #44	; 0x2c
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr

08005f0e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8005f0e:	b580      	push	{r7, lr}
 8005f10:	b088      	sub	sp, #32
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
 8005f16:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	fa93 f3a3 	rbit	r3, r3
 8005f24:	60fb      	str	r3, [r7, #12]
  return result;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d101      	bne.n	8005f34 <LL_GPIO_Init+0x26>
    return 32U;
 8005f30:	2320      	movs	r3, #32
 8005f32:	e003      	b.n	8005f3c <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	fab3 f383 	clz	r3, r3
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005f3e:	e047      	b.n	8005fd0 <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	2101      	movs	r1, #1
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	fa01 f303 	lsl.w	r3, r1, r3
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d039      	beq.n	8005fca <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d003      	beq.n	8005f66 <LL_GPIO_Init+0x58>
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	2b02      	cmp	r3, #2
 8005f64:	d10d      	bne.n	8005f82 <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	69b9      	ldr	r1, [r7, #24]
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f7ff fed7 	bl	8005d22 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	461a      	mov	r2, r3
 8005f7a:	69b9      	ldr	r1, [r7, #24]
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f7ff feb8 	bl	8005cf2 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	461a      	mov	r2, r3
 8005f88:	69b9      	ldr	r1, [r7, #24]
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f7ff ff06 	bl	8005d9c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	2b02      	cmp	r3, #2
 8005f96:	d111      	bne.n	8005fbc <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	2bff      	cmp	r3, #255	; 0xff
 8005f9c:	d807      	bhi.n	8005fae <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	695b      	ldr	r3, [r3, #20]
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	69b9      	ldr	r1, [r7, #24]
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f7ff ff35 	bl	8005e16 <LL_GPIO_SetAFPin_0_7>
 8005fac:	e006      	b.n	8005fbc <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	695b      	ldr	r3, [r3, #20]
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	69b9      	ldr	r1, [r7, #24]
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f7ff ff6a 	bl	8005e90 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	69b9      	ldr	r1, [r7, #24]
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f7ff fe57 	bl	8005c78 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	3301      	adds	r3, #1
 8005fce:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	fa22 f303 	lsr.w	r3, r2, r3
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d1b0      	bne.n	8005f40 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8005fde:	2300      	movs	r3, #0
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3720      	adds	r7, #32
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b085      	sub	sp, #20
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005ff0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005ff4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005ffc:	b29a      	uxth	r2, r3
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	b29b      	uxth	r3, r3
 8006002:	43db      	mvns	r3, r3
 8006004:	b29b      	uxth	r3, r3
 8006006:	4013      	ands	r3, r2
 8006008:	b29a      	uxth	r2, r3
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3714      	adds	r7, #20
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr

0800601e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800601e:	b480      	push	{r7}
 8006020:	b085      	sub	sp, #20
 8006022:	af00      	add	r7, sp, #0
 8006024:	60f8      	str	r0, [r7, #12]
 8006026:	1d3b      	adds	r3, r7, #4
 8006028:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2201      	movs	r2, #1
 8006030:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2200      	movs	r2, #0
 8006038:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2200      	movs	r2, #0
 8006040:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2200      	movs	r2, #0
 8006048:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800604c:	2300      	movs	r3, #0
}
 800604e:	4618      	mov	r0, r3
 8006050:	3714      	adds	r7, #20
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr
	...

0800605c <__libc_init_array>:
 800605c:	b570      	push	{r4, r5, r6, lr}
 800605e:	4d0d      	ldr	r5, [pc, #52]	; (8006094 <__libc_init_array+0x38>)
 8006060:	2600      	movs	r6, #0
 8006062:	4c0d      	ldr	r4, [pc, #52]	; (8006098 <__libc_init_array+0x3c>)
 8006064:	1b64      	subs	r4, r4, r5
 8006066:	10a4      	asrs	r4, r4, #2
 8006068:	42a6      	cmp	r6, r4
 800606a:	d109      	bne.n	8006080 <__libc_init_array+0x24>
 800606c:	4d0b      	ldr	r5, [pc, #44]	; (800609c <__libc_init_array+0x40>)
 800606e:	2600      	movs	r6, #0
 8006070:	4c0b      	ldr	r4, [pc, #44]	; (80060a0 <__libc_init_array+0x44>)
 8006072:	f000 f81f 	bl	80060b4 <_init>
 8006076:	1b64      	subs	r4, r4, r5
 8006078:	10a4      	asrs	r4, r4, #2
 800607a:	42a6      	cmp	r6, r4
 800607c:	d105      	bne.n	800608a <__libc_init_array+0x2e>
 800607e:	bd70      	pop	{r4, r5, r6, pc}
 8006080:	f855 3b04 	ldr.w	r3, [r5], #4
 8006084:	3601      	adds	r6, #1
 8006086:	4798      	blx	r3
 8006088:	e7ee      	b.n	8006068 <__libc_init_array+0xc>
 800608a:	f855 3b04 	ldr.w	r3, [r5], #4
 800608e:	3601      	adds	r6, #1
 8006090:	4798      	blx	r3
 8006092:	e7f2      	b.n	800607a <__libc_init_array+0x1e>
 8006094:	08006154 	.word	0x08006154
 8006098:	08006154 	.word	0x08006154
 800609c:	08006154 	.word	0x08006154
 80060a0:	08006158 	.word	0x08006158

080060a4 <memset>:
 80060a4:	4402      	add	r2, r0
 80060a6:	4603      	mov	r3, r0
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d100      	bne.n	80060ae <memset+0xa>
 80060ac:	4770      	bx	lr
 80060ae:	f803 1b01 	strb.w	r1, [r3], #1
 80060b2:	e7f9      	b.n	80060a8 <memset+0x4>

080060b4 <_init>:
 80060b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060b6:	bf00      	nop
 80060b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060ba:	bc08      	pop	{r3}
 80060bc:	469e      	mov	lr, r3
 80060be:	4770      	bx	lr

080060c0 <_fini>:
 80060c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060c2:	bf00      	nop
 80060c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060c6:	bc08      	pop	{r3}
 80060c8:	469e      	mov	lr, r3
 80060ca:	4770      	bx	lr
